// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AnyTypeFunction
{
    public static class DynListToDyn
    {
        public static Task<DynListToDynResult> InvokeAsync(DynListToDynArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<DynListToDynResult>("any-type-function:index:dynListToDyn", args ?? new DynListToDynArgs(), options.WithDefaults());

        public static Output<DynListToDynResult> Invoke(DynListToDynInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<DynListToDynResult>("any-type-function:index:dynListToDyn", args ?? new DynListToDynInvokeArgs(), options.WithDefaults());

        public static Output<DynListToDynResult> Invoke(DynListToDynInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<DynListToDynResult>("any-type-function:index:dynListToDyn", args ?? new DynListToDynInvokeArgs(), options.WithDefaults());
    }


    public sealed class DynListToDynArgs : global::Pulumi.InvokeArgs
    {
        [Input("inputs")]
        private List<object>? _inputs;
        public List<object> Inputs
        {
            get => _inputs ?? (_inputs = new List<object>());
            set => _inputs = value;
        }

        public DynListToDynArgs()
        {
        }
        public static new DynListToDynArgs Empty => new DynListToDynArgs();
    }

    public sealed class DynListToDynInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("inputs")]
        private InputList<object>? _inputs;
        public InputList<object> Inputs
        {
            get => _inputs ?? (_inputs = new InputList<object>());
            set => _inputs = value;
        }

        public DynListToDynInvokeArgs()
        {
        }
        public static new DynListToDynInvokeArgs Empty => new DynListToDynInvokeArgs();
    }


    [OutputType]
    public sealed class DynListToDynResult
    {
        public readonly object Result;

        [OutputConstructor]
        private DynListToDynResult(object result)
        {
            Result = result;
        }
    }
}
