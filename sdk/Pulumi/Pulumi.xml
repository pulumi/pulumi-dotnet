<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pulumi</name>
    </assembly>
    <members>
        <member name="T:Pulumi.Config">
            <summary>
            <see cref="T:Pulumi.Config"/> is a bag of related configuration state.  Each bag contains any number
            of configuration variables, indexed by simple keys, and each has a name that uniquely
            identifies it; two bags with different names do not share values for variables that
            otherwise share the same key.  For example, a bag whose name is <c>pulumi:foo</c>, with keys
            <c>a</c>, <c>b</c>, and <c>c</c>, is entirely separate from a bag whose name is
            <c>pulumi:bar</c> with the same simple key names.  Each key has a fully qualified names,
            such as <c>pulumi:foo:a</c>, ..., and <c>pulumi:bar:a</c>, respectively.
            </summary>
        </member>
        <member name="F:Pulumi.Config._name">
            <summary>
            <see cref="F:Pulumi.Config._name"/> is the configuration bag's logical name and uniquely identifies it.
            The default is the name of the current project.
            </summary>
        </member>
        <member name="M:Pulumi.Config.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Pulumi.Config"/> instance. <paramref name="name"/> is the
            configuration bag's logical name and uniquely identifies it. The default is the name of
            the current project.
            </summary>
        </member>
        <member name="M:Pulumi.Config.Get(System.String)">
            <summary>
            Loads an optional configuration value by its key, or <see langword="null"/> if it doesn't exist.
            </summary>
        </member>
        <member name="M:Pulumi.Config.GetSecret(System.String)">
            <summary>
            Loads an optional configuration value by its key, marking it as a secret, or <see
            langword="null"/> if it doesn't exist.
            </summary>
        </member>
        <member name="M:Pulumi.Config.GetBoolean(System.String)">
            <summary>
            Loads an optional configuration value, as a boolean, by its key, or null if it doesn't exist.
            If the configuration value isn't a legal boolean, this function will throw an error.
            </summary>
        </member>
        <member name="M:Pulumi.Config.GetSecretBoolean(System.String)">
            <summary>
            Loads an optional configuration value, as a boolean, by its key, making it as a secret or
            null if it doesn't exist. If the configuration value isn't a legal boolean, this
            function will throw an error.
            </summary>
        </member>
        <member name="M:Pulumi.Config.GetInt32(System.String)">
            <summary>
            Loads an optional configuration value, as a number, by its key, or null if it doesn't exist.
            If the configuration value isn't a legal number, this function will throw an error.
            </summary>
        </member>
        <member name="M:Pulumi.Config.GetSecretInt32(System.String)">
            <summary>
            Loads an optional configuration value, as a number, by its key, marking it as a secret
            or null if it doesn't exist.
            If the configuration value isn't a legal number, this function will throw an error.
            </summary>
        </member>
        <member name="M:Pulumi.Config.GetDouble(System.String)">
            <summary>
            Loads an optional configuration value, as a number, by its key, or null if it doesn't exist.
            If the configuration value isn't a legal number, this function will throw an error.
            </summary>
        </member>
        <member name="M:Pulumi.Config.GetSecretDouble(System.String)">
            <summary>
            Loads an optional configuration value, as a number, by its key, making it as a secret or
            null if it doesn't exist. If the configuration value isn't a legal number, this
            function will throw an error.
            </summary>
        </member>
        <member name="M:Pulumi.Config.GetObject``1(System.String)">
            <summary>
            Loads an optional configuration value, as an object, by its key, or null if it doesn't
            exist. This works by taking the value associated with <paramref name="key"/> and passing
            it to <see cref="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)"/>.
            </summary>
        </member>
        <member name="M:Pulumi.Config.GetSecretObject``1(System.String)">
            <summary>
            Loads an optional configuration value, as an object, by its key, marking it as a secret
            or null if it doesn't exist. This works by taking the value associated with <paramref
            name="key"/> and passing it to <see cref="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)"/>.
            </summary>
        </member>
        <member name="M:Pulumi.Config.Require(System.String)">
            <summary>
            Loads a configuration value by its given key.  If it doesn't exist, an error is thrown.
            </summary>
        </member>
        <member name="M:Pulumi.Config.RequireSecret(System.String)">
            <summary>
            Loads a configuration value by its given key, marking it as a secret.  If it doesn't exist, an error
            is thrown.
            </summary>
        </member>
        <member name="M:Pulumi.Config.RequireBoolean(System.String)">
            <summary>
            Loads a configuration value, as a boolean, by its given key.  If it doesn't exist, or the
            configuration value is not a legal boolean, an error is thrown.
            </summary>
        </member>
        <member name="M:Pulumi.Config.RequireSecretBoolean(System.String)">
            <summary>
            Loads a configuration value, as a boolean, by its given key, marking it as a secret.
            If it doesn't exist, or the configuration value is not a legal boolean, an error is thrown.
            </summary>
        </member>
        <member name="M:Pulumi.Config.RequireInt32(System.String)">
            <summary>
            Loads a configuration value, as a number, by its given key.  If it doesn't exist, or the
            configuration value is not a legal number, an error is thrown.
            </summary>
        </member>
        <member name="M:Pulumi.Config.RequireSecretInt32(System.String)">
            <summary>
            Loads a configuration value, as a number, by its given key, marking it as a secret.
            If it doesn't exist, or the configuration value is not a legal number, an error is thrown.
            </summary>
        </member>
        <member name="M:Pulumi.Config.RequireDouble(System.String)">
            <summary>
            Loads a configuration value, as a number, by its given key.  If it doesn't exist, or the
            configuration value is not a legal number, an error is thrown.
            </summary>
        </member>
        <member name="M:Pulumi.Config.RequireSecretDouble(System.String)">
            <summary>
            Loads a configuration value, as a number, by its given key, marking it as a secret.
            If it doesn't exist, or the configuration value is not a legal number, an error is thrown.
            </summary>
        </member>
        <member name="M:Pulumi.Config.RequireObject``1(System.String)">
            <summary>
            Loads a configuration value as a JSON string and deserializes the JSON into an object.
            object. If it doesn't exist, or the configuration value cannot be converted using <see
            cref="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)"/>, an error is
            thrown.
            </summary>
        </member>
        <member name="M:Pulumi.Config.RequireSecretObject``1(System.String)">
            <summary>
            Loads a configuration value as a JSON string and deserializes the JSON into a JavaScript
            object, marking it as a secret. If it doesn't exist, or the configuration value cannot
            be converted using <see cref="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)"/>,
            an error is thrown.
            </summary>
        </member>
        <member name="M:Pulumi.Config.FullKey(System.String)">
            <summary>
            Turns a simple configuration key into a fully resolved one, by prepending the bag's name.
            </summary>
        </member>
        <member name="T:Pulumi.Config.ConfigTypeException">
            <summary>
            ConfigTypeException is used when a configuration value is of the wrong type.
            </summary>
        </member>
        <member name="T:Pulumi.Config.ConfigMissingException">
            <summary>
            ConfigMissingException is used when a configuration value is completely missing.
            </summary>
        </member>
        <member name="T:Pulumi.Experimental.PropertyValueType">
            <summary>
            Property values will be one of these types.
            </summary>
        </member>
        <member name="T:Pulumi.Experimental.LogSeverity">
            <summary>
            LogSeverity is the severity level of a log message.  Errors are fatal; all others are informational.
            </summary>
        </member>
        <member name="F:Pulumi.Experimental.LogSeverity.Debug">
            <summary>
            A debug-level message not displayed to end-users (the default).
            </summary>
        </member>
        <member name="F:Pulumi.Experimental.LogSeverity.Info">
            <summary>
            An informational message printed to output during resource operations.
            </summary>
        </member>
        <member name="F:Pulumi.Experimental.LogSeverity.Warning">
            <summary>
            A warning to indicate that something went wrong.
            </summary>
        </member>
        <member name="F:Pulumi.Experimental.LogSeverity.Error">
            <summary>
            A fatal error indicating that the tool should stop processing subsequent resource operations.
            </summary>
        </member>
        <member name="T:Pulumi.Experimental.LogRequest">
            <summary>
            A log message to be sent to the Pulumi engine.
            </summary>
        </member>
        <member name="P:Pulumi.Experimental.LogRequest.Severity">
            <summary>
            The logging level of this message.
            </summary>
        </member>
        <member name="P:Pulumi.Experimental.LogRequest.Message">
            <summary>
            The contents of the logged message.
            </summary>
        </member>
        <member name="P:Pulumi.Experimental.LogRequest.Urn">
            <summary>
            The (optional) resource urn this log is associated with.
            </summary>
        </member>
        <member name="P:Pulumi.Experimental.LogRequest.StreamId">
            <summary>
            The (optional) stream id that a stream of log messages can be associated with. This allows
            clients to not have to buffer a large set of log messages that they all want to be
            conceptually connected.  Instead the messages can be sent as chunks (with the same stream id)
            and the end display can show the messages as they arrive, while still stitching them together
            into one total log message.
            </summary>
            <remarks>
            0 means do not associate with any stream.
            </remarks>
        </member>
        <member name="P:Pulumi.Experimental.LogRequest.Ephemeral">
            <summary>
            Optional value indicating whether this is a status message.
            </summary>
        </member>
        <member name="T:Pulumi.Experimental.IEngine">
            <summary>
            An interface to the engine host running this plugin.
            </summary>
        </member>
        <member name="M:Pulumi.Experimental.IEngine.LogAsync(Pulumi.Experimental.LogRequest)">
            <summary>
            Send a log message to the host.
            </summary>
        </member>
        <member name="T:Pulumi.Experimental.Provider.ComponentAnalyzer">
            <summary>
            Analyzes component resource types and generates a package schema.
            </summary>
        </member>
        <member name="M:Pulumi.Experimental.Provider.ComponentAnalyzer.GenerateSchema(Pulumi.Experimental.Provider.Metadata,System.Reflection.Assembly)">
            <summary>
            Analyzes the components in the given assembly and generates a package schema.
            </summary>
            <param name="metadata">The package metadata including name (required), version and display name (optional)</param>
            <param name="assembly">The assembly containing component resource types to analyze</param>
            <returns>A PackageSpec containing the complete schema for all components and their types</returns>
        </member>
        <member name="M:Pulumi.Experimental.Provider.ComponentAnalyzer.GenerateSchema(Pulumi.Experimental.Provider.Metadata,System.Type[])">
            <summary>
            Analyzes the specified component types and generates a package schema.
            </summary>
            <param name="metadata">The package metadata including name (required), version and display name (optional)</param>
            <param name="componentTypes">The component resource types to analyze</param>
            <returns>A PackageSpec containing the complete schema for all components and their types</returns>
        </member>
        <member name="M:Pulumi.Experimental.Provider.ComponentAnalyzer.FindComponentType(System.String,System.Reflection.Assembly,System.Type[])">
            <summary>
            Finds a component type by name in the given assembly or type array.
            </summary>
        </member>
        <member name="T:Pulumi.Experimental.Provider.ComponentProvider">
            <summary>
            A provider that can be used to construct components from a given assembly with automatic schema inference.
            </summary>
        </member>
        <member name="M:Pulumi.Experimental.Provider.ComponentProvider.#ctor(System.Reflection.Assembly,Pulumi.Experimental.Provider.Metadata,System.Type[])">
            <summary>
            Creates a new component provider.
            </summary>
            <param name="componentAssembly">The assembly containing component types</param>
            <param name="metadata">The metadata for the package</param>
            <param name="componentTypes">Optional array of known component types</param>
        </member>
        <member name="M:Pulumi.Experimental.Provider.ComponentProvider.GetSchema(Pulumi.Experimental.Provider.GetSchemaRequest,System.Threading.CancellationToken)">
            <summary>
            Gets the schema for the components in the assembly.
            </summary>
            <param name="request">The request containing the package name</param>
            <param name="ct">The cancellation token</param>
            <returns>The schema for the components in the assembly</returns>
        </member>
        <member name="M:Pulumi.Experimental.Provider.ComponentProvider.Construct(Pulumi.Experimental.Provider.ConstructRequest,System.Threading.CancellationToken)">
            <summary>
            Constructs a component resource.
            </summary>
            <param name="request">The request containing the component type and inputs</param>
            <param name="ct">The cancellation token</param>
            <returns>The constructed component resource</returns>
            <exception cref="T:System.ArgumentException">If the resource type is invalid</exception>
            <exception cref="T:System.InvalidOperationException">If the component type is not found or cannot be constructed</exception>
        </member>
        <member name="T:Pulumi.Experimental.Provider.ComponentProviderHost">
            <summary>
            A host to serve the component provider automatically. See <see cref="M:Pulumi.Experimental.Provider.ComponentProviderHost.Serve(System.String[],System.Reflection.Assembly,System.String)"/> for more details.
            </summary>
        </member>
        <member name="M:Pulumi.Experimental.Provider.ComponentProviderHost.Serve(System.String[],System.Reflection.Assembly,System.String)">
            <summary>
            Serves the component provider. It discovers all component types in the given assembly and serves them
            automatically as a component provider, including GetSchema and Construct methods.
            </summary>
            <param name="args">The command-line arguments</param>
            <param name="componentAssembly">The assembly containing component types</param>
            <param name="packageName">Optional package name (defaults to assembly name)</param>
        </member>
        <member name="T:Pulumi.Experimental.Provider.NonSignallingDeploymentBuilder">
            <summary>
            NonSignallingDeploymentBuilder decorates an existing <see cref="T:Pulumi.IDeploymentBuilder"/> to create an <see
            cref="T:Pulumi.IMonitor"/> that does not signal the engine for shutdown. This is useful in scenarios where we want to
            kick off a deployment in tandem with another that is already responsible for managing the engine's lifecycle,
            such as when a provider <c>Construct</c>s a component resource. In such cases, we do not want to signal shutdown
            at the end of the <c>Construct</c> operation, as the engine is still in use by the program that created the
            component.
            </summary>
        </member>
        <member name="P:Pulumi.Experimental.Provider.NonSignallingDeploymentBuilder.DeploymentBuilder">
            <summary>
            The <see cref="T:Pulumi.IDeploymentBuilder"/> that this instance decorates.
            </summary>
        </member>
        <member name="M:Pulumi.Experimental.Provider.NonSignallingDeploymentBuilder.#ctor(Pulumi.IDeploymentBuilder)">
            <summary>
            Initializes a new <see cref="T:Pulumi.Experimental.Provider.NonSignallingDeploymentBuilder"/>.
            </summary>
        </member>
        <member name="T:Pulumi.Experimental.Provider.NonSignallingMonitor">
            <summary>
            NonSignallingMonitor decorates an existing <see cref="T:Pulumi.IMonitor"/> to not signal the engine for shutdown. This
            is useful in scenarios where we know that another monitor is responsible for managing the engine's
            lifecycle, such as when a provider <c>Construct</c>s a component resource.
            </summary>
        </member>
        <member name="P:Pulumi.Experimental.Provider.NonSignallingMonitor.Monitor">
            <summary>
            The <see cref="T:Pulumi.IMonitor"/> that this instance decorates.
            </summary>
        </member>
        <member name="M:Pulumi.Experimental.Provider.NonSignallingMonitor.#ctor(Pulumi.IMonitor)">
            <summary>
            Initializes a new <see cref="T:Pulumi.Experimental.Provider.NonSignallingMonitor"/>.
            </summary>
        </member>
        <member name="T:Pulumi.Experimental.Provider.ParametersArgs">
            <summary>
            A parameter value, represented as an array of strings, as might be provided by a command-line invocation, such as
            that used to generate an SDK.
            </summary>
        </member>
        <member name="T:Pulumi.Experimental.Provider.ParametersValue">
            <summary>
            A parameter value, represented by an arbitrary array of bytes accompanied by a name and version. This is expected
            to be the format used by parameterized provider SDKs.
            </summary>
        </member>
        <member name="P:Pulumi.Experimental.Provider.ParametersValue.Name">
            <summary>
            The sub-package name for this sub-schema parameterization.
            </summary>
        </member>
        <member name="P:Pulumi.Experimental.Provider.ParametersValue.Version">
            <summary>
            The sub-package version for this sub-schema parameterization.
            </summary>
        </member>
        <member name="P:Pulumi.Experimental.Provider.ParametersValue.Value">
            <summary>
            The embedded value from the sub-package.
            </summary>
        </member>
        <member name="P:Pulumi.Experimental.Provider.ParameterizeResponse.Name">
            <summary>
            The name of the sub-package parameterized.
            </summary>
        </member>
        <member name="P:Pulumi.Experimental.Provider.ParameterizeResponse.Version">
            <summary>
            The version of the sub-package parameterized.
            </summary>
        </member>
        <member name="T:Pulumi.Alias">
            <summary>
            Alias is a description of prior named used for a resource. It can be processed in the
            context of a resource creation to determine what the full aliased URN would be.
            <para/>
            Use <see cref="P:Pulumi.Alias.Urn"/> in the case where a prior URN is known and can just be specified in
            full.  Otherwise, provide some subset of the other properties in this type to generate an
            appropriate urn from the pre-existing values of the <see cref="T:Pulumi.Resource"/> with certain
            parts overridden.
            <para/>
            The presence of a property indicates if its value should be used. If absent (i.e.
            <see langword="null"/>), then the value is not used.
            <para/>
            Note: because of the above, there needs to be special handling to indicate that the previous
            <see cref="P:Pulumi.Alias.Parent"/> of a <see cref="T:Pulumi.Resource"/> was <see langword="null"/>.  Specifically,
            pass in:
            <para/>
            <c>Aliases = { new Alias { NoParent = true } }</c>
            </summary>
        </member>
        <member name="P:Pulumi.Alias.Urn">
            <summary>
            The previous urn to alias to.  If this is provided, no other properties in this type
            should be provided.
            </summary>
        </member>
        <member name="P:Pulumi.Alias.Name">
            <summary>
            The previous name of the resource.  If <see langword="null"/>, the current name of the
            resource is used.
            </summary>
        </member>
        <member name="P:Pulumi.Alias.Type">
            <summary>
            The previous type of the resource.  If <see langword="null"/>, the current type of the
            resource is used.
            </summary>
        </member>
        <member name="P:Pulumi.Alias.Stack">
            <summary>
            The previous stack of the resource.  If <see langword="null"/>, defaults to the value of
            <see cref="P:Pulumi.IDeployment.StackName"/>.
            </summary>
        </member>
        <member name="P:Pulumi.Alias.Project">
            <summary>
            The previous project of the resource. If <see langword="null"/>, defaults to the value
            of <see cref="P:Pulumi.IDeployment.ProjectName"/>.
            </summary>
        </member>
        <member name="P:Pulumi.Alias.Parent">
            <summary>
            The previous parent of the resource. If <see langword="null"/>, the current parent of
            the resource is used.
            <para/>
            To specify no original parent, use <c>new Alias { NoParent = true }</c>.
            <para/>
            Only specify one of <see cref="P:Pulumi.Alias.Parent"/> or <see cref="P:Pulumi.Alias.ParentUrn"/> or <see cref="P:Pulumi.Alias.NoParent"/>.
            </summary>
        </member>
        <member name="P:Pulumi.Alias.ParentUrn">
            <summary>
            The previous parent of the resource. If <see langword="null"/>, the current parent of
            the resource is used.
            <para/>
            To specify no original parent, use <c>new Alias { NoParent = true }</c>.
            <para/>
            Only specify one of <see cref="P:Pulumi.Alias.Parent"/> or <see cref="P:Pulumi.Alias.ParentUrn"/> or <see cref="P:Pulumi.Alias.NoParent"/>.
            </summary>
        </member>
        <member name="P:Pulumi.Alias.NoParent">
            <summary>
            Used to indicate the resource previously had no parent.  If <see langword="false"/> this
            property is ignored.
            <para/>
            To specify no original parent, use <c>new Alias { NoParent = true }</c>.
            <para/>
            Only specify one of <see cref="P:Pulumi.Alias.Parent"/> or <see cref="P:Pulumi.Alias.ParentUrn"/> or <see cref="P:Pulumi.Alias.NoParent"/>.
            </summary>
        </member>
        <member name="M:Pulumi.Alias.Deserialize(Pulumirpc.Alias)">
            <summary>
            Deserialize a wire protocol alias to an alias object.
            </summary>
        </member>
        <member name="T:Pulumi.Archive">
            <summary>
            An Archive represents a collection of named assets.
            </summary>
        </member>
        <member name="T:Pulumi.AssetArchive">
            <summary>
            An AssetArchive is an archive created from an in-memory collection of named assets or other
            archives.
            </summary>
        </member>
        <member name="T:Pulumi.FileArchive">
            <summary>
            A FileArchive is a file-based archive, or a collection of file-based assets.  This can be a
            raw directory or a single archive file in one of the supported formats(.tar, .tar.gz,
            or.zip).
            </summary>
        </member>
        <member name="T:Pulumi.RemoteArchive">
            <summary>
            A RemoteArchive is a file-based archive fetched from a remote location.  The URI's scheme
            dictates the protocol for fetching the archive's contents: <c>file://</c> is a local file
            (just like a FileArchive), <c>http://</c> and <c>https://</c> specify HTTP and HTTPS,
            respectively, and specific providers may recognize custom schemes.
            </summary>
        </member>
        <member name="T:Pulumi.Asset">
            <summary>
            Asset represents a single blob of text or data that is managed as a first class entity.
            </summary>
        </member>
        <member name="T:Pulumi.FileAsset">
            <summary>
            FileAsset is a kind of asset produced from a given path to a file on the local filesystem.
            </summary>
        </member>
        <member name="T:Pulumi.StringAsset">
            <summary>
            StringAsset is a kind of asset produced from an in-memory UTF8-encoded string.
            </summary>
        </member>
        <member name="T:Pulumi.RemoteAsset">
            <summary>
            RemoteAsset is a kind of asset produced from a given URI string.  The URI's scheme dictates
            the protocol for fetching contents: <c>file://</c> specifies a local file, <c>http://</c>
            and <c>https://</c> specify HTTP and HTTPS, respectively.  Note that specific providers may
            recognize alternative schemes; this is merely the base-most set that all providers support.
            </summary>
        </member>
        <member name="T:Pulumi.AssetOrArchive">
            <summary>
            Base class of <see cref="T:Pulumi.Asset"/>s and <see cref="T:Pulumi.Archive"/>s.
            </summary>
        </member>
        <member name="T:Pulumi.IInput">
            <summary>
            Internal interface to allow our code to operate on inputs in an untyped manner. Necessary as
            there is no reasonable way to write algorithms over heterogeneous instantiations of generic
            types.
            </summary>
        </member>
        <member name="T:Pulumi.Input`1">
            <summary>
            <see cref="T:Pulumi.Input`1"/> is a property input for a <see cref="T:Pulumi.Resource"/>.  It may be a promptly
            available T, or the output from a existing <see cref="T:Pulumi.Resource"/>.
            </summary>
        </member>
        <member name="F:Pulumi.Input`1._outputValue">
            <summary>
            Technically, in .net we can represent Inputs entirely using the Output type (since
            Outputs can wrap values and promises).  However, it would look very weird to state that
            the inputs to a resource *had* to be Outputs. So we basically just come up with this
            wrapper type so things look sensible, even though under the covers we implement things
            using the exact same type
            </summary>
        </member>
        <member name="M:Pulumi.InputExtensions.Apply``2(Pulumi.Input{``0},System.Func{``0,``1})">
            <summary>
            <see cref="M:Pulumi.Output`1.Apply``1(System.Func{`0,Pulumi.Output{``0}})"/> for more details.
            </summary>
        </member>
        <member name="M:Pulumi.InputExtensions.Apply``2(Pulumi.Input{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            <see cref="M:Pulumi.Output`1.Apply``1(System.Func{`0,Pulumi.Output{``0}})"/> for more details.
            </summary>
        </member>
        <member name="M:Pulumi.InputExtensions.Apply``2(Pulumi.Input{``0},System.Func{``0,Pulumi.Input{``1}})">
            <summary>
            <see cref="M:Pulumi.Output`1.Apply``1(System.Func{`0,Pulumi.Output{``0}})"/> for more details.
            </summary>
        </member>
        <member name="M:Pulumi.InputExtensions.Apply``2(Pulumi.Input{``0},System.Func{``0,Pulumi.Output{``1}})">
            <summary>
            <see cref="M:Pulumi.Output`1.Apply``1(System.Func{`0,Pulumi.Output{``0}})"/> for more details.
            </summary>
        </member>
        <member name="T:Pulumi.InputJson">
            <summary>
            Represents an <see cref="T:Pulumi.Input`1"/> value that wraps a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
        </member>
        <member name="T:Pulumi.InputList`1">
            <summary>
            A list of values that can be passed in as the arguments to a <see cref="T:Pulumi.Resource"/>.
            The individual values are themselves <see cref="T:Pulumi.Input`1"/>s.  i.e. the individual values
            can be concrete values or <see cref="T:Pulumi.Output`1"/>s.
            <para/>
            <see cref="T:Pulumi.InputList`1"/> differs from a normal <see cref="T:System.Collections.Generic.IList`1"/> in that it is itself
            an <see cref="T:Pulumi.Input`1"/>.  For example, a <see cref="T:Pulumi.Resource"/> that accepts an <see
            cref="T:Pulumi.InputList`1"/> will accept not just a list but an <see cref="T:Pulumi.Output`1"/>
            of a list.  This is important for cases where the <see cref="T:Pulumi.Output`1"/>
            list from some <see cref="T:Pulumi.Resource"/> needs to be passed into another <see
            cref="T:Pulumi.Resource"/>.  Or for cases where creating the list invariably produces an <see
            cref="T:Pulumi.Output`1"/> because its resultant value is dependent on other <see
            cref="T:Pulumi.Output`1"/>s.
            <para/>
            This benefit of <see cref="T:Pulumi.InputList`1"/> is also a limitation.  Because it represents a
            list of values that may eventually be created, there is no way to simply iterate over, or
            access the elements of the list synchronously.
            <para/>
            <see cref="T:Pulumi.InputList`1"/> is designed to be easily used in object and collection
            initializers.  For example, a resource that accepts a list of inputs can be written in
            either of these forms:
            <para/>
            <code>
                new SomeResource("name", new SomeResourceArgs {
                    ListProperty = { Value1, Value2, Value3 },
                });
            </code>
            <para/>
            or
            <code>
                new SomeResource("name", new SomeResourceArgs {
                    ListProperty = new [] { Value1, Value2, Value3 },
                });
            </code>
            </summary>
        </member>
        <member name="P:Pulumi.InputList`1.Value">
             <summary>
             InputList externally has to behave as an <c>Input{ImmutableArray{T}}</c>, but we actually want to
             keep nested Input/Output values separate, so that we can serialise the overall list shape even if one of the
             inner elements is an unknown value.
            
             To do that we keep a separate value of the form <c>Input{ImmutableArray{Input{T}}}</c>/> which each
             time we set syncs the flattened value to the base <c>Input{ImmutableArray{T}}</c>.
             </summary>
        </member>
        <member name="M:Pulumi.InputList`1.Add(Pulumi.InputList{`0})">
            <summary>
            Note: this is non-standard convenience for use with collection initializers.
            </summary>
        </member>
        <member name="M:Pulumi.InputList`1.Concat(Pulumi.InputList{`0})">
            <summary>
            Concatenates the values in this list with the values in <paramref name="other"/>,
            returning the concatenated sequence in a new <see cref="T:Pulumi.InputList`1"/>.
            </summary>
        </member>
        <member name="T:Pulumi.InputMap`1">
            <summary>
            A mapping of <see cref="T:System.String"/>s to values that can be passed in as the arguments to a
            <see cref="T:Pulumi.Resource"/>. The individual values are themselves <see cref="T:Pulumi.Input`1"/>s.  i.e.
            the individual values can be concrete values or <see cref="T:Pulumi.Output`1"/>s.
            <para/>
            <see cref="T:Pulumi.InputMap`1"/> differs from a normal <see cref="T:System.Collections.Generic.IDictionary`2"/> in that it is
            itself an <see cref="T:Pulumi.Input`1"/>.  For example, a <see cref="T:Pulumi.Resource"/> that accepts an
            <see cref="T:Pulumi.InputMap`1"/> will accept not just a dictionary but an <see cref="T:Pulumi.Output`1"/>
            of a dictionary as well.  This is important for cases where the <see cref="T:Pulumi.Output`1"/>
            map from some <see cref="T:Pulumi.Resource"/> needs to be passed into another <see cref="T:Pulumi.Resource"/>.
            Or for cases where creating the map invariably produces an <see cref="T:Pulumi.Output`1"/> because
            its resultant value is dependent on other <see cref="T:Pulumi.Output`1"/>s.
            <para/>
            This benefit of <see cref="T:Pulumi.InputMap`1"/> is also a limitation.  Because it represents a
            list of values that may eventually be created, there is no way to simply iterate over, or
            access the elements of the map synchronously.
            <para/>
            <see cref="T:Pulumi.InputMap`1"/> is designed to be easily used in object and collection
            initializers.  For example, a resource that accepts a map of values can be written easily in
            this form:
            <para/>
            <code>
                new SomeResource("name", new SomeResourceArgs {
                    MapProperty = {
                        { Key1, Value1 },
                        { Key2, Value2 },
                        { Key3, Value3 },
                    },
                });
            </code>
            </summary>
        </member>
        <member name="P:Pulumi.InputMap`1.Value">
             <summary>
             InputMap externally has to behave as an <c>Input{ImmutableDictionary{string, T}}</c>, but we actually
             want to keep nested Input/Output values separate, so that we can serialise the overall map shape even if
             one of the inner elements is an unknown value.
            
             To do that we keep a separate value of the form <c>Input{ImmutableDictionary{string, Input{T}}}</c>
             which each time we set syncs the flattened value to the base <c>Input{ImmutableDictionary{string,
             T}}</c>.
             </summary>
        </member>
        <member name="M:Pulumi.InputMap`1.Add(Pulumi.InputMap{`0})">
            <summary>
            Note: this is non-standard convenience for use with collection initializers.
            </summary>
        </member>
        <member name="M:Pulumi.InputMap`1.Merge(Pulumi.InputMap{`0},Pulumi.InputMap{`0})">
            <summary>
            Merge two instances of <see cref="T:Pulumi.InputMap`1"/>. Returns a new <see cref="T:Pulumi.InputMap`1"/>
            without modifying any of the arguments.
            <para/>If both maps contain the same key, the value from the second map takes over.
            </summary>
            <param name="first">The first <see cref="T:Pulumi.InputMap`1"/>. Has lower priority in case of
            key clash.</param>
            <param name="second">The second <see cref="T:Pulumi.InputMap`1"/>. Has higher priority in case of
            key clash.</param>
            <returns>A new instance of <see cref="T:Pulumi.InputMap`1"/> that contains the items from
            both input maps.</returns>
        </member>
        <member name="T:Pulumi.InputUnion`2">
            <summary>
            Represents an <see cref="T:Pulumi.Input`1"/> value that can be one of two different types. For
            example, it might potentially be an <see cref="T:System.Int32"/> some of the time or a <see
            cref="T:System.String"/> in other cases.
            </summary>
        </member>
        <member name="T:Pulumi.OutputJsonConverter">
            <summary>
            Internal class used for Output.JsonSerialize.
            </summary>
        </member>
        <member name="T:Pulumi.Output">
            <summary>
            Useful static utility methods for both creating and working with <see cref="T:Pulumi.Output`1"/>s.
            </summary>
            <summary>
            Useful static utility methods for both creating and working wit <see cref="T:Pulumi.Output`1"/>s.
            </summary>
        </member>
        <member name="M:Pulumi.Output.Unsecret``1(Pulumi.Output{``0})">
            <summary>
            Returns a new <see cref="T:Pulumi.Output`1"/> which is a copy of the existing output but marked as
            a non-secret. The original output is not modified in any way.
            </summary>
        </member>
        <member name="M:Pulumi.Output.IsSecretAsync``1(Pulumi.Output{``0})">
            <summary>
            Retrieves the secretness status of the given output.
            </summary>
        </member>
        <member name="M:Pulumi.Output.All``1(Pulumi.Input{``0}[])">
            <summary>
            Combines all the <see cref="T:Pulumi.Input`1"/> values in <paramref name="inputs"/>
            into a single <see cref="T:Pulumi.Output`1"/> with an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>
            containing all their underlying values.  If any of the <see cref="T:Pulumi.Input`1"/>s are not
            known, the final result will be not known.  Similarly, if any of the <see
            cref="T:Pulumi.Input`1"/>s are secrets, then the final result will be a secret.
            </summary>
        </member>
        <member name="M:Pulumi.Output.All``1(System.Collections.Generic.IEnumerable{Pulumi.Input{``0}})">
            <summary>
            <see cref="M:Pulumi.Output.All``1(Pulumi.Input{``0}[])"/> for more details.
            </summary>
        </member>
        <member name="M:Pulumi.Output.All``1(Pulumi.Output{``0}[])">
            <summary>
            Combines all the <see cref="T:Pulumi.Output`1"/> values in <paramref name="outputs"/>
            into a single <see cref="T:Pulumi.Output`1"/> with an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>
            containing all their underlying values.  If any of the <see cref="T:Pulumi.Output`1"/>s are not
            known, the final result will be not known.  Similarly, if any of the <see
            cref="T:Pulumi.Output`1"/>s are secrets, then the final result will be a secret.
            </summary>
        </member>
        <member name="M:Pulumi.Output.All``1(System.Collections.Generic.IEnumerable{Pulumi.Output{``0}})">
            <summary>
            <see cref="M:Pulumi.Output.All``1(Pulumi.Output{``0}[])"/> for more details.
            </summary>
        </member>
        <member name="M:Pulumi.Output.Format(System.FormattableString)">
            <summary>
            Takes in a <see cref="T:System.FormattableString"/> with potential <see cref="T:Pulumi.Input`1"/>s or
            <see cref="T:Pulumi.Output`1"/> in the 'placeholder holes'.  Conceptually, this method unwraps
            all the underlying values in the holes, combines them appropriately with the <see
            cref="P:System.FormattableString.Format"/> string, and produces an <see cref="T:Pulumi.Output`1"/>
            containing the final result.
            <para/>
            If any of the <see cref="T:Pulumi.Input`1"/>s or <see cref="T:Pulumi.Output`1"/>s are not known, the
            final result will be not known.  Similarly, if any of the <see cref="T:Pulumi.Input`1"/>s or
            <see cref="T:Pulumi.Output`1"/>s are secrets, then the final result will be a secret.
            </summary>
        </member>
        <member name="M:Pulumi.Output.JsonSerialize``1(Pulumi.Output{``0},System.Text.Json.JsonSerializerOptions)">
            <summary>
            Uses <see cref="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)"/>
            to serialize the given <see cref="T:Pulumi.Output`1"/> value into a JSON string.
            </summary>
        </member>
        <member name="M:Pulumi.Output.JsonDeserialize``1(Pulumi.Output{System.String},System.Text.Json.JsonSerializerOptions)">
            <summary>
            Uses <see cref="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)"/>
            to deserialize the given <see cref="T:Pulumi.Output`1"/> string value into a <typeparam name="T"/>.
            </summary>
        </member>
        <member name="M:Pulumi.Output.Tuple``8(Pulumi.Input{``0},Pulumi.Input{``1},Pulumi.Input{``2},Pulumi.Input{``3},Pulumi.Input{``4},Pulumi.Input{``5},Pulumi.Input{``6},Pulumi.Input{``7})">
            <summary>
            Combines all the <see cref="T:Pulumi.Input`1"/> values in the provided parameters and combines
            them all into a single tuple containing each of their underlying values.  If any of the
            <see cref="T:Pulumi.Input`1"/>s are not known, the final result will be not known.  Similarly,
            if any of the <see cref="T:Pulumi.Input`1"/>s are secrets, then the final result will be a
            secret.
            </summary>
        </member>
        <member name="M:Pulumi.Output.Tuple``2(Pulumi.Input{``0},Pulumi.Input{``1})">
            <summary>
            <see cref="M:Pulumi.Output.Tuple``8(Pulumi.Input{``0},Pulumi.Input{``1},Pulumi.Input{``2},Pulumi.Input{``3},Pulumi.Input{``4},Pulumi.Input{``5},Pulumi.Input{``6},Pulumi.Input{``7})"/>
            </summary>
        </member>
        <member name="M:Pulumi.Output.Tuple``3(Pulumi.Input{``0},Pulumi.Input{``1},Pulumi.Input{``2})">
            <summary>
            <see cref="M:Pulumi.Output.Tuple``8(Pulumi.Input{``0},Pulumi.Input{``1},Pulumi.Input{``2},Pulumi.Input{``3},Pulumi.Input{``4},Pulumi.Input{``5},Pulumi.Input{``6},Pulumi.Input{``7})"/>
            </summary>
        </member>
        <member name="M:Pulumi.Output.Tuple``4(Pulumi.Input{``0},Pulumi.Input{``1},Pulumi.Input{``2},Pulumi.Input{``3})">
            <summary>
            <see cref="M:Pulumi.Output.Tuple``8(Pulumi.Input{``0},Pulumi.Input{``1},Pulumi.Input{``2},Pulumi.Input{``3},Pulumi.Input{``4},Pulumi.Input{``5},Pulumi.Input{``6},Pulumi.Input{``7})"/>
            </summary>
        </member>
        <member name="M:Pulumi.Output.Tuple``5(Pulumi.Input{``0},Pulumi.Input{``1},Pulumi.Input{``2},Pulumi.Input{``3},Pulumi.Input{``4})">
            <summary>
            <see cref="M:Pulumi.Output.Tuple``8(Pulumi.Input{``0},Pulumi.Input{``1},Pulumi.Input{``2},Pulumi.Input{``3},Pulumi.Input{``4},Pulumi.Input{``5},Pulumi.Input{``6},Pulumi.Input{``7})"/>
            </summary>
        </member>
        <member name="M:Pulumi.Output.Tuple``6(Pulumi.Input{``0},Pulumi.Input{``1},Pulumi.Input{``2},Pulumi.Input{``3},Pulumi.Input{``4},Pulumi.Input{``5})">
            <summary>
            <see cref="M:Pulumi.Output.Tuple``8(Pulumi.Input{``0},Pulumi.Input{``1},Pulumi.Input{``2},Pulumi.Input{``3},Pulumi.Input{``4},Pulumi.Input{``5},Pulumi.Input{``6},Pulumi.Input{``7})"/>
            </summary>
        </member>
        <member name="M:Pulumi.Output.Tuple``7(Pulumi.Input{``0},Pulumi.Input{``1},Pulumi.Input{``2},Pulumi.Input{``3},Pulumi.Input{``4},Pulumi.Input{``5},Pulumi.Input{``6})">
            <summary>
            <see cref="M:Pulumi.Output.Tuple``8(Pulumi.Input{``0},Pulumi.Input{``1},Pulumi.Input{``2},Pulumi.Input{``3},Pulumi.Input{``4},Pulumi.Input{``5},Pulumi.Input{``6},Pulumi.Input{``7})"/>
            </summary>
        </member>
        <member name="M:Pulumi.Output.Tuple``2(Pulumi.Output{``0},Pulumi.Output{``1})">
            <summary>
            <see cref="M:Pulumi.Output.Tuple``8(Pulumi.Input{``0},Pulumi.Input{``1},Pulumi.Input{``2},Pulumi.Input{``3},Pulumi.Input{``4},Pulumi.Input{``5},Pulumi.Input{``6},Pulumi.Input{``7})"/>
            </summary>
        </member>
        <member name="M:Pulumi.Output.Tuple``3(Pulumi.Output{``0},Pulumi.Output{``1},Pulumi.Output{``2})">
            <summary>
            <see cref="M:Pulumi.Output.Tuple``8(Pulumi.Input{``0},Pulumi.Input{``1},Pulumi.Input{``2},Pulumi.Input{``3},Pulumi.Input{``4},Pulumi.Input{``5},Pulumi.Input{``6},Pulumi.Input{``7})"/>
            </summary>
        </member>
        <member name="M:Pulumi.Output.Tuple``4(Pulumi.Output{``0},Pulumi.Output{``1},Pulumi.Output{``2},Pulumi.Output{``3})">
            <summary>
            <see cref="M:Pulumi.Output.Tuple``8(Pulumi.Input{``0},Pulumi.Input{``1},Pulumi.Input{``2},Pulumi.Input{``3},Pulumi.Input{``4},Pulumi.Input{``5},Pulumi.Input{``6},Pulumi.Input{``7})"/>
            </summary>
        </member>
        <member name="M:Pulumi.Output.Tuple``5(Pulumi.Output{``0},Pulumi.Output{``1},Pulumi.Output{``2},Pulumi.Output{``3},Pulumi.Output{``4})">
            <summary>
            <see cref="M:Pulumi.Output.Tuple``8(Pulumi.Input{``0},Pulumi.Input{``1},Pulumi.Input{``2},Pulumi.Input{``3},Pulumi.Input{``4},Pulumi.Input{``5},Pulumi.Input{``6},Pulumi.Input{``7})"/>
            </summary>
        </member>
        <member name="M:Pulumi.Output.Tuple``6(Pulumi.Output{``0},Pulumi.Output{``1},Pulumi.Output{``2},Pulumi.Output{``3},Pulumi.Output{``4},Pulumi.Output{``5})">
            <summary>
            <see cref="M:Pulumi.Output.Tuple``8(Pulumi.Input{``0},Pulumi.Input{``1},Pulumi.Input{``2},Pulumi.Input{``3},Pulumi.Input{``4},Pulumi.Input{``5},Pulumi.Input{``6},Pulumi.Input{``7})"/>
            </summary>
        </member>
        <member name="M:Pulumi.Output.Tuple``7(Pulumi.Output{``0},Pulumi.Output{``1},Pulumi.Output{``2},Pulumi.Output{``3},Pulumi.Output{``4},Pulumi.Output{``5},Pulumi.Output{``6})">
            <summary>
            <see cref="M:Pulumi.Output.Tuple``8(Pulumi.Input{``0},Pulumi.Input{``1},Pulumi.Input{``2},Pulumi.Input{``3},Pulumi.Input{``4},Pulumi.Input{``5},Pulumi.Input{``6},Pulumi.Input{``7})"/>
            </summary>
        </member>
        <member name="M:Pulumi.Output.Tuple``8(Pulumi.Output{``0},Pulumi.Output{``1},Pulumi.Output{``2},Pulumi.Output{``3},Pulumi.Output{``4},Pulumi.Output{``5},Pulumi.Output{``6},Pulumi.Output{``7})">
            <summary>
            <see cref="M:Pulumi.Output.Tuple``8(Pulumi.Input{``0},Pulumi.Input{``1},Pulumi.Input{``2},Pulumi.Input{``3},Pulumi.Input{``4},Pulumi.Input{``5},Pulumi.Input{``6},Pulumi.Input{``7})"/>
            </summary>
        </member>
        <member name="T:Pulumi.IOutput">
            <summary>
            Internal interface to allow our code to operate on outputs in an untyped manner. Necessary
            as there is no reasonable way to write algorithms over heterogeneous instantiations of
            generic types.
            </summary>
        </member>
        <member name="M:Pulumi.IOutput.GetDataAsync">
            <summary>
            Returns an <see cref="T:Pulumi.Output`1"/> equivalent to this, except with our
            <see cref="F:Pulumi.Serialization.OutputData`1.Value"/> casted to an object.
            </summary>
        </member>
        <member name="T:Pulumi.Output`1">
            <summary>
            <see cref="T:Pulumi.Output`1"/>s are a key part of how Pulumi tracks dependencies between <see
            cref="T:Pulumi.Resource"/>s. Because the values of outputs are not available until resources are
            created, these are represented using the special <see cref="T:Pulumi.Output`1"/>s type, which
            internally represents two things: an eventually available value of the output and
            the dependency on the source(s) of the output value.
            In fact, <see cref="T:Pulumi.Output`1"/>s is quite similar to <see cref="T:System.Threading.Tasks.Task`1"/>.
            Additionally, they carry along dependency information.
            <para/>
            The output properties of all resource objects in Pulumi have type <see cref="T:Pulumi.Output`1"/>.
            </summary>
        </member>
        <member name="M:Pulumi.Output`1.WithDependencies(System.Collections.Immutable.ImmutableHashSet{Pulumi.Resource})">
            <summary>
            This returns a new <see cref="T:Pulumi.Output`1"/> that represents the same value as this output, but with
            the extra dependencies specified.
            </summary>
        </member>
        <member name="M:Pulumi.Output`1.Apply(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            <see cref="M:Pulumi.Output`1.Apply``1(System.Func{`0,Pulumi.Output{``0}})"/> for more details.
            </summary>
        </member>
        <member name="M:Pulumi.Output`1.Apply``1(System.Func{`0,``0})">
            <summary>
            <see cref="M:Pulumi.Output`1.Apply``1(System.Func{`0,Pulumi.Output{``0}})"/> for more details.
            </summary>
        </member>
        <member name="M:Pulumi.Output`1.Apply``1(System.Func{`0,System.Threading.Tasks.Task{``0}})">
            <summary>
            <see cref="M:Pulumi.Output`1.Apply``1(System.Func{`0,Pulumi.Output{``0}})"/> for more details.
            </summary>
        </member>
        <member name="M:Pulumi.Output`1.Apply``1(System.Func{`0,Pulumi.Input{``0}})">
            <summary>
            <see cref="M:Pulumi.Output`1.Apply``1(System.Func{`0,Pulumi.Output{``0}})"/> for more details.
            </summary>
        </member>
        <member name="M:Pulumi.Output`1.Apply``1(System.Func{`0,Pulumi.Output{``0}})">
             <summary>
             Transforms the data of this <see cref="T:Pulumi.Output`1"/> with the provided <paramref
             name="func"/>. The result remains an <see cref="T:Pulumi.Output`1"/> so that dependent resources
             can be properly tracked.
             <para/>
             <paramref name="func"/> is not allowed to make resources.
             <para/>
             <paramref name="func"/> can return other <see cref="T:Pulumi.Output`1"/>s.  This can be handy if
             you have an <c>Output&lt;SomeType&gt;</c> and you want to get a transitive dependency of
             it.  i.e.:
            
             <code>
             Output&lt;SomeType&gt; d1 = ...;
             Output&lt;OtherType&gt; d2 = d1.Apply(v => v.OtherOutput); // getting an output off of 'v'.
             </code>
            
             In this example, taking a dependency on d2 means a resource will depend on all the resources
             of d1.  It will <b>not</b> depend on the resources of v.x.y.OtherDep.
             <para/>
             Importantly, the Resources that d2 feels like it will depend on are the same resources
             as d1. If you need have multiple <see cref="T:Pulumi.Output`1"/>s and a single <see
             cref="T:Pulumi.Output`1"/> is needed that combines both set of resources, then <see
             cref="M:Pulumi.Output.All``1(Pulumi.Input{``0}[])"/> or <see
             cref="M:Pulumi.Output.Tuple``3(Pulumi.Input{``0},Pulumi.Input{``1},Pulumi.Input{``2})"/>
             should be used instead.
             <para/>
             This function will only be called execution of a <c>pulumi up</c> request.  It will not
             run during <c>pulumi preview</c> (as the values of resources are of course not known
             then).
             </summary>
        </member>
        <member name="T:Pulumi.DeferredOutput`1">
            <summary>
            Represents the producer side of an <see cref="T:Pulumi.Output`1"/> value, providing access to the consumer side through
            the Output property.
            </summary>
        </member>
        <member name="P:Pulumi.DeferredOutput`1.Output">
            <summary>
            The <see cref="T:Pulumi.Output`1"/> that represents the consumer side of this <see cref="T:Pulumi.DeferredOutput`1"/>.
            </summary>
        </member>
        <member name="M:Pulumi.DeferredOutput`1.Resolve(Pulumi.Output{`0})">
            <summary>
            Resolves the value of the <see cref="T:Pulumi.Output`1"/> represented by this <see
            cref="T:Pulumi.DeferredOutput`1"/> to the same eventually resolved result as the provided <see
            cref="T:Pulumi.Output`1"/>.
            </summary>
        </member>
        <member name="T:Pulumi.OutputExtensions">
            <summary>
            Extension methods for <see cref="T:Pulumi.Output`1"/>.
            </summary>
        </member>
        <member name="M:Pulumi.OutputExtensions.GetAt``1(Pulumi.Output{System.Collections.Immutable.ImmutableArray{``0}},Pulumi.Input{System.Int32})">
            <summary>
            Convert an output containing an array to an output containing the array element
            at the specified index.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">An array wrapped into <see cref="T:Pulumi.Output`1"/>.</param>
            <param name="index">An index to get an element at.</param>
            <returns>An <see cref="T:Pulumi.Output`1"/> containing an array element.</returns>
        </member>
        <member name="M:Pulumi.OutputExtensions.First``1(Pulumi.Output{System.Collections.Immutable.ImmutableArray{``0}})">
            <summary>
            Convert an output containing an array to an output containing its first element.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">An array wrapped into <see cref="T:Pulumi.Output`1"/>.</param>
            <returns>An <see cref="T:Pulumi.Output`1"/> containing the first array element.</returns>
        </member>
        <member name="M:Pulumi.OutputExtensions.Length``1(Pulumi.Output{System.Collections.Immutable.ImmutableArray{``0}})">
            <summary>
            Convert an output containing an array to an output containing the length of the array.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">An array wrapped into <see cref="T:Pulumi.Output`1"/>.</param>
            <returns>An <see cref="T:Pulumi.Output`1"/> containing the array length.</returns>
        </member>
        <member name="T:Pulumi.Utilities.OutputUtilities">
             <summary>
             Allows extracting some internal insights about an instance of
             <see cref="T:Pulumi.Output`1"/>.
            
             Danger: these utilities are intended for use in test and
             debugging scenarios. In normal Pulumi programs, please
             consider using `.Apply` instead to chain `Output{T}`
             transformations without unpacking the underlying T. Doing
             so preserves metadata such as resource dependencies that
             is used by Pulumi engine to operate correctly. Using
             `await output.GetValueAsync()` directly opens up a possibility
             to introduce issues with lost metadata.
             </summary>
        </member>
        <member name="M:Pulumi.Utilities.OutputUtilities.CreateUnknown``1(``0)">
            <summary>
            Create an unknown with the given value.
            Note: generally, this should never be used since an unknown never resolves during preview.
            Bearing that in mind, this can be used in combination with await for
            a program control flow to avoid deadlock situations.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Pulumi.Utilities.OutputUtilities.CreateUnknown``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Create an unknown with the given value factory.
            Note: generally, this should never be used since an unknown never resolves during preview.
            Bearing that in mind, this can be used in combination with await for
            a program control flow to avoid deadlock situations.
            In particular, the value factory will never be called during preview.
            </summary>
            <param name="valueFactory">The value factory.</param>
        </member>
        <member name="M:Pulumi.Utilities.OutputUtilities.WithDependency``1(Pulumi.Output{``0},Pulumi.Resource)">
            <summary>
            Create an output with the given dependency.
            Note: generally this should never be used in normal programs, it is exposed for tests.
            </summary>
        </member>
        <member name="M:Pulumi.Utilities.OutputUtilities.GetIsKnownAsync``1(Pulumi.Output{``0})">
            <summary>
            Retrieve the known status of the given output.
            Note: generally, this should never be used in combination with await for
            a program control flow to avoid deadlock situations.
            </summary>
            <param name="output">The <see cref="T:Pulumi.Output`1"/> to evaluate.</param>
        </member>
        <member name="M:Pulumi.Utilities.OutputUtilities.GetValueAsync``1(Pulumi.Output{``0})">
            <summary>
            Retrieve the value of the given output.
            Note: generally, this should never be used in combination with await for
            a program control flow to avoid deadlock situations.
            </summary>
            <param name="output">The <see cref="T:Pulumi.Output`1"/> to evaluate.</param>
        </member>
        <member name="M:Pulumi.Utilities.OutputUtilities.GetDependenciesAsync``1(Pulumi.Output{``0})">
            <summary>
            Retrieve a set of resources that the given output depends on.
            </summary>
            <param name="output">The <see cref="T:Pulumi.Output`1"/> to get dependencies of.</param>
        </member>
        <member name="T:Pulumi.IUnion">
            <summary>
            Internal interface to allow our code to operate on <see cref="T:Pulumi.Union`2"/>s in an
            untyped manner. Necessary as there is no reasonable way to write algorithms over
            heterogeneous instantiations of generic types.
            </summary>
        </member>
        <member name="T:Pulumi.Union`2">
            <summary>
            Represents a <see href="https://en.wikipedia.org/wiki/Tagged_union">Tagged Union</see>.
            <para/>
            This is used to hold a value that could take on several different, but fixed, types. Only
            one of the types can be in use at any one time. It can be thought of as a type that has
            several "cases," each of which should be handled correctly when that type is manipulated.
            <para/>
            For example, a <see cref="T:Pulumi.Resource"/> property that could either store a <see cref="T:System.Int32"/>
            or a <see cref="T:System.String"/> can be represented as <c>Output&lt;int, string&gt;</c>.  The <see
            cref="T:Pulumi.Input`1"/> version of this is <see cref="T:Pulumi.InputUnion`2"/>.
            </summary>
        </member>
        <member name="T:Pulumi.Urn">
            <summary>
            An automatically generated logical URN, used to stably identify resources. These are created
            automatically by Pulumi to identify resources.  They cannot be manually constructed.
            </summary>
        </member>
        <member name="M:Pulumi.Urn.op_Implicit(Pulumi.Urn)~System.String">
            <summary>
            Implicitly converts a URN to a string.
            </summary>
        </member>
        <member name="M:Pulumi.Urn.ToString">
            <summary>
            Returns the string representation of this URN.
            </summary>
        </member>
        <member name="M:Pulumi.Urn.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current URN.
            </summary>
        </member>
        <member name="M:Pulumi.Urn.Equals(Pulumi.Urn)">
            <summary>
            Determines whether the specified URN is equal to the current URN.
            </summary>
        </member>
        <member name="M:Pulumi.Urn.GetHashCode">
            <summary>
            Returns a hash code for this URN.
            </summary>
        </member>
        <member name="M:Pulumi.Urn.op_Equality(Pulumi.Urn,Pulumi.Urn)">
            <summary>
            Determines whether two URN values are equal.
            </summary>
        </member>
        <member name="M:Pulumi.Urn.op_Inequality(Pulumi.Urn,Pulumi.Urn)">
            <summary>
            Determines whether two URN values are not equal.
            </summary>
        </member>
        <member name="M:Pulumi.Urn.Create(Pulumi.Input{System.String},Pulumi.Input{System.String},Pulumi.Resource,Pulumi.Input{System.String},Pulumi.Input{System.String},Pulumi.Input{System.String})">
            <summary>
            Computes a URN from the combination of a resource name, resource type, optional parent,
            optional project and optional stack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pulumi.Urn.InheritedChildAlias(System.String,System.String,Pulumi.Input{System.String},System.String)">
            <summary>
            <see cref="M:Pulumi.Urn.InheritedChildAlias(System.String,System.String,Pulumi.Input{System.String},System.String)"/> computes the alias that should be applied to a child
            based on an alias applied to it's parent. This may involve changing the name of the
            resource in cases where the resource has a named derived from the name of the parent,
            and the parent name changed.
            </summary>
        </member>
        <member name="T:Pulumi.Callback">
            <summary>
            A callback function that can be invoked by the engine to perform some operation. The input message will be a
            byte serialized protobuf message, which the callback function should deserialize and process. The return value
            is a protobuf message that the SDK will serialize and return to the engine.
            </summary>
            <param name="message">A byte serialized protobuf message.</param>
            <param name="cancellationToken">The async cancellation token.</param>
            <returns>A protobuf message to be returned to the engine.</returns>
        </member>
        <member name="T:Pulumi.Callbacks">
            <summary>
            This class implements the callbacks server used by the engine to invoke remote functions in the dotnet process.
            </summary>
        </member>
        <member name="T:Pulumi.CallOptions">
            <summary>
            Options to help control the behavior of <see cref="M:Pulumi.Deployment.Call``1(System.String,Pulumi.CallArgs,Pulumi.Resource,Pulumi.CallOptions,System.Boolean,Pulumi.RegisterPackageRequest)"/>.
            </summary>
        </member>
        <member name="P:Pulumi.CallOptions.Parent">
            <summary>
            An optional parent to use for default options for this call (e.g. the default provider
            to use).
            </summary>
        </member>
        <member name="P:Pulumi.CallOptions.Provider">
            <summary>
            An optional provider to use for this call. If no provider is supplied, the default
            provider for the called function's package will be used.
            </summary>
        </member>
        <member name="P:Pulumi.CallOptions.Version">
            <summary>
            An optional version, corresponding to the version of the provider plugin that should be
            used when performing this call.
            </summary>
        </member>
        <member name="P:Pulumi.CallOptions.PluginDownloadURL">
            <summary>
            An optional URL. If provided, the provider plugin with exactly this download URL will
            be used when performing this call. This will override the URL sourced from the host
            package, and should be rarely used.
            </summary>
        </member>
        <member name="T:Pulumi.Deployment">
             <summary>
             <see cref="T:Pulumi.Deployment"/> is the entry-point to a Pulumi application. .NET applications
             should perform all startup logic they need in their <c>Main</c> method and then end with:
             <para>
             <c>
             static Task&lt;int&gt; Main(string[] args)
             {
                 // program initialization code ...
            
                 return Deployment.Run(async () =>
                 {
                     // Code that creates resources.
                 });
             }
             </c>
             </para>
             Importantly: Cloud resources cannot be created outside of the lambda passed to any of the
             <see cref="M:Pulumi.Deployment.RunAsync(System.Action)"/> overloads.  Because cloud Resource construction is
             inherently asynchronous, the result of this function is a <see cref="T:System.Threading.Tasks.Task`1"/> which should
             then be returned or awaited.  This will ensure that any problems that are encountered during
             the running of the program are properly reported.  Failure to do this may lead to the
             program ending early before all resources are properly registered.
             </summary>
        </member>
        <member name="F:Pulumi.Deployment._registrationsComplete">
            <summary>
            A gate to tell us when the registrations have been completed, and thus that we can unblock invokes.
            </summary>
        </member>
        <member name="P:Pulumi.Deployment.Instance">
            <summary>
            The current running deployment instance. This is only available from inside the function
            passed to <see cref="M:Pulumi.Deployment.RunAsync(System.Action)"/> (or its overloads).
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.#ctor(Pulumi.Experimental.IEngine,Pulumi.IMonitor,Pulumi.Testing.TestOptions)">
            <summary>
            This constructor is called from <see cref="M:Pulumi.Deployment.TestAsync(Pulumi.Testing.IMocks,System.Func{Pulumi.IRunner,System.Threading.Tasks.Task{System.Int32}},Pulumi.Testing.TestOptions)"/>
            with a mocked monitor and dummy values for project and stack.
            <para/>
            This constructor is also used in deployment tests in order to
            instantiate mock deployments.
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.MonitorSupportsOutputValues">
            <summary>
            Check if the monitor supports the "outputValues" feature.
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.MonitorSupportsAliasSpecs">
            <summary>
            Returns whether the resource monitor we are connected to supports the "aliasSpec" feature across the RPC interface.
            In which case we no longer compute alias combinations ourselves but instead delegate the work to the engine.
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.MonitorSupportsTransforms">
            <summary>
            Returns whether the resource monitor we are connected to supports the "transforms" feature across the RPC interface.
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.MonitorSupportsInvokeTransforms">
            <summary>
            Returns whether the resource monitor we are connected to supports the "invokeTransforms" feature across the RPC interface.
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.MonitorSupportsResourceHooks">
            <summary>
            Returns whether the resource monitor we are connected to supports the "resourceHooks" feature across the RPC
            interface. Resource hooks support running arbitrary code at various points in the resource lifecycle.
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.EngineLogger.Pulumi#IEngineLogger#DebugAsync(System.String,Pulumi.Resource,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Logs a debug-level message that is generally hidden from end-users.
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.EngineLogger.Pulumi#IEngineLogger#InfoAsync(System.String,Pulumi.Resource,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Logs an informational message that is generally printed to stdout during resource
            operations.
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.EngineLogger.Pulumi#IEngineLogger#WarnAsync(System.String,Pulumi.Resource,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Warn logs a warning to indicate that something went wrong, but not catastrophically so.
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.EngineLogger.Pulumi#IEngineLogger#ErrorAsync(System.String,Pulumi.Resource,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Logs a fatal condition. Consider raising an exception
            after calling this method to stop the Pulumi program.
            </summary>
        </member>
        <member name="F:Pulumi.Deployment.Runner._inFlightTasks">
            <summary>
            The set of tasks that we have fired off.  We issue tasks in a Fire-and-Forget manner
            to be able to expose a Synchronous <see cref="T:Pulumi.Resource"/> model for users. i.e. a
            user just synchronously creates a resource, and we asynchronously kick off the work
            to populate it.  This works well, however we have to make sure the console app
            doesn't exit because it thinks there is no work to do.
            <para/>
            To ensure that doesn't happen, we have the main entrypoint of the app just
            continuously, asynchronously loop, waiting for these tasks to complete, and only
            exiting once the set becomes empty.
            </summary>
        </member>
        <member name="P:Pulumi.Deployment.RunnerOptions.IsInlineAutomationProgram">
            <summary>
            Returns whether or not the runner is executing an inline program from the Automation API
            </summary>
        </member>
        <member name="F:Pulumi.Deployment._configEnvKey">
            <summary>
            The environment variable key that the language plugin uses to set configuration values.
            </summary>
        </member>
        <member name="F:Pulumi.Deployment._configSecretKeysEnvKey">
            <summary>
            The environment variable key that the language plugin uses to set the list of secret configuration keys.
            </summary>
        </member>
        <member name="P:Pulumi.Deployment.AllConfig">
            <summary>
            Returns a copy of the full config map.
            </summary>
        </member>
        <member name="P:Pulumi.Deployment.ConfigSecretKeys">
            <summary>
            Returns a copy of the config secret keys.
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.SetConfig(System.String,System.String)">
            <summary>
            Sets a configuration variable.
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.SetAllConfig(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends all provided configuration.
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.Pulumi#IDeploymentInternal#GetConfig(System.String)">
            <summary>
            Returns a configuration variable's value or <see langword="null"/> if it is unset.
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.Pulumi#IDeploymentInternal#IsConfigSecret(System.String)">
            <summary>
            Returns true if the key contains a secret value.
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.CleanKey(System.String)">
            <summary>
            CleanKey takes a configuration key, and if it is of the form "(string):config:(string)"
            removes the ":config:" portion. Previously, our keys always had the string ":config:" in
            them, and we'd like to remove it. However, the language host needs to continue to set it
            so we can be compatible with older versions of our packages. Once we stop supporting
            older packages, we can change the language host to not add this :config: thing and
            remove this function.
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.PrepareHooks(Pulumi.Callbacks,Pulumi.ResourceHookBinding)">
            <summary>
            Prepares a set of <see cref="T:Pulumi.ResourceHookBinding"/>s for transmission as part of a resource registration by
            serializing their names into a <see cref="T:Pulumirpc.RegisterResourceRequest.Types.ResourceHooksBinding"/>.
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.AllAliases(System.Collections.Generic.List{Pulumi.Input{Pulumi.Alias}},System.String,System.String,Pulumi.Resource)">
            <summary>
            <see cref="M:Pulumi.Deployment.AllAliases(System.Collections.Generic.List{Pulumi.Input{Pulumi.Alias}},System.String,System.String,Pulumi.Resource)"/> makes a copy of the aliases array, and add to it any
            implicit aliases inherited from its parent. If there are N child aliases, and
            M parent aliases, there will be (M+1)*(N+1)-1 total aliases, or, as calculated
            in the logic below, N+(M*(1+N)).
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.GetTransitivelyReferencedChildResourcesOfComponentResources(System.Collections.Generic.HashSet{Pulumi.Resource})">
            <summary>
            Recursively walk the resources passed in, returning them and all resources reachable from
            <see cref="P:Pulumi.Resource.ChildResources"/> through any **Component** resources we encounter.
            </summary>
        </member>
        <member name="F:Pulumi.Deployment.PrepareResult.SupportsAliasSpec">
            <summary>
            Returns whether the resource monitor we are connected to supports the "aliasSpec" feature across the RPC interface.
            When that is not the case, use only use the URNs of the aliases to populate the AliasURNs field of RegisterResourceRequest,
            otherwise we pass the full structure of the Aliases field to the resource monitor.
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.CompleteResourceAsync(Pulumi.Resource,System.Boolean,System.Func{System.String,Pulumi.Resource},Pulumi.ResourceArgs,Pulumi.ResourceOptions,System.Collections.Immutable.ImmutableDictionary{System.String,Pulumi.Serialization.IOutputCompletionSource},Pulumi.RegisterPackageRequest)">
            <summary>
            Calls <see cref="M:Pulumi.Deployment.ReadOrRegisterResourceAsync(Pulumi.Resource,System.Boolean,System.Func{System.String,Pulumi.Resource},Pulumi.ResourceArgs,Pulumi.ResourceOptions,Pulumi.RegisterPackageRequest)"/> then completes all the
            <see cref="T:Pulumi.Serialization.IOutputCompletionSource"/> sources on the <paramref name="resource"/> with
            the results of it.
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.GetRootResourceAsync(System.String)">
            <summary>
            Returns a root resource URN that will automatically become the default parent of all
            resources.  This can be used to ensure that all resources without explicit parents are
            parented to a common parent resource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pulumi.Deployment.RunAsync(System.Action)">
            <summary>
            <see cref="M:Pulumi.Deployment.RunAsync(System.Func{System.Threading.Tasks.Task{System.Collections.Generic.IDictionary{System.String,System.Object}}},Pulumi.StackOptions)"/> for more details.
            </summary>
            <param name="action">Callback that creates stack resources.</param>
        </member>
        <member name="M:Pulumi.Deployment.RunAsync(System.Func{System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>
            <see cref="M:Pulumi.Deployment.RunAsync(System.Func{System.Threading.Tasks.Task{System.Collections.Generic.IDictionary{System.String,System.Object}}},Pulumi.StackOptions)"/> for more details.
            </summary>
            <param name="func">Callback that creates stack resources.</param>
            <returns>A dictionary of stack outputs.</returns>
        </member>
        <member name="M:Pulumi.Deployment.RunAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            <see cref="M:Pulumi.Deployment.RunAsync(System.Func{System.Threading.Tasks.Task{System.Collections.Generic.IDictionary{System.String,System.Object}}},Pulumi.StackOptions)"/> for more details.
            </summary>
            <param name="func">Callback that creates stack resources.</param>
        </member>
        <member name="M:Pulumi.Deployment.RunAsync(System.Func{System.Threading.Tasks.Task{System.Collections.Generic.IDictionary{System.String,System.Object}}},Pulumi.StackOptions)">
             <summary>
             <see cref="M:Pulumi.Deployment.RunAsync(System.Func{System.Threading.Tasks.Task{System.Collections.Generic.IDictionary{System.String,System.Object}}},Pulumi.StackOptions)"/> is an
             entry-point to a Pulumi application. .NET applications should perform all startup logic
             they need in their <c>Main</c> method and then end with:
             <para>
             <c>
             static Task&lt;int&gt; Main(string[] args)
             {
                 // program initialization code ...
            
                 return Deployment.Run(async () =>
                 {
                     // Code that creates resources.
                 });
             }
             </c>
             </para>
             Importantly: Cloud resources cannot be created outside of the lambda passed to any of the
             <see cref="M:Pulumi.Deployment.RunAsync(System.Action)"/> overloads.  Because cloud Resource construction is
             inherently asynchronous, the result of this function is a <see cref="T:System.Threading.Tasks.Task`1"/> which should
             then be returned or awaited.  This will ensure that any problems that are encountered during
             the running of the program are properly reported.  Failure to do this may lead to the
             program ending early before all resources are properly registered.
             <para/>
             The function passed to <see cref="M:Pulumi.Deployment.RunAsync(System.Func{System.Threading.Tasks.Task{System.Collections.Generic.IDictionary{System.String,System.Object}}},Pulumi.StackOptions)"/>
             can optionally return an <see cref="T:System.Collections.Generic.IDictionary`2"/>.  The keys and values
             in this dictionary will become the outputs for the Pulumi Stack that is created.
             </summary>
             <param name="func">Callback that creates stack resources.</param>
             <param name="options">Stack options.</param>
        </member>
        <member name="M:Pulumi.Deployment.RunAsync``1">
             <summary>
             <see cref="M:Pulumi.Deployment.RunAsync``1"/> is an entry-point to a Pulumi
             application. .NET applications should perform all startup logic they
             need in their <c>Main</c> method and then end with:
             <para>
             <c>
             static Task&lt;int&gt; Main(string[] args) {// program
             initialization code ...
            
                 return Deployment.Run&lt;MyStack&gt;();}
             </c>
             </para>
             <para>
             Deployment will instantiate a new stack instance based on the type
             passed as TStack type parameter. Importantly, cloud resources cannot
             be created outside of the <see cref="P:Pulumi.Deployment.Stack"/> component.
             </para>
             <para>
             Because cloud Resource construction is inherently asynchronous, the
             result of this function is a <see cref="T:System.Threading.Tasks.Task`1"/> which should then
             be returned or awaited.  This will ensure that any problems that are
             encountered during the running of the program are properly reported.
             Failure to do this may lead to the program ending early before all
             resources are properly registered.
             </para>
             </summary>
        </member>
        <member name="M:Pulumi.Deployment.RunAsync``1(System.IServiceProvider)">
             <summary>
             <see cref="M:Pulumi.Deployment.RunAsync``1"/> is an entry-point to a Pulumi
             application. .NET applications should perform all startup logic they
             need in their <c>Main</c> method and then end with:
             <para>
             <c>
             static Task&lt;int&gt; Main(string[] args) {// program
             initialization code ...
            
                 return Deployment.Run&lt;MyStack&gt;(serviceProvider);}
             </c>
             </para>
             <para>
             Deployment will instantiate a new stack instance based on the type
             passed as TStack type parameter using the serviceProvider.
             Importantly, cloud resources cannot be created outside of the
             <see cref="P:Pulumi.Deployment.Stack"/> component.
             </para>
             <para>
             Because cloud Resource construction is inherently asynchronous, the
             result of this function is a <see cref="T:System.Threading.Tasks.Task`1"/> which should then
             be returned or awaited.  This will ensure that any problems that are
             encountered during the running of the program are properly reported.
             Failure to do this may lead to the program ending early before all
             resources are properly registered.
             </para>
             </summary>
        </member>
        <member name="M:Pulumi.Deployment.TestWithServiceProviderAsync``1(Pulumi.Testing.IMocks,System.IServiceProvider,Pulumi.Testing.TestOptions)">
            <summary>
            Entry point to test a Pulumi application. Deployment will
            instantiate a new stack instance based on the type passed as TStack
            type parameter using the given service provider. This method creates
            no real resources.
            Note: Currently, unit tests that call
            <see cref="M:Pulumi.Deployment.TestWithServiceProviderAsync``1(Pulumi.Testing.IMocks,System.IServiceProvider,Pulumi.Testing.TestOptions)"/>
            must run serially; parallel execution is not supported.
            </summary>
            <param name="mocks">Hooks to mock the engine calls.</param>
            <param name="serviceProvider"></param>
            <param name="options">Optional settings for the test run.</param>
            <typeparam name="TStack">The type of the stack to test.</typeparam>
            <returns>Test result containing created resources and errors, if any.</returns>
        </member>
        <member name="M:Pulumi.Deployment.TestAsync``1(Pulumi.Testing.IMocks,Pulumi.Testing.TestOptions)">
            <summary>
            Entry point to test a Pulumi application. Deployment will
            instantiate a new stack instance based on the type passed as TStack
            type parameter. This method creates no real resources.
            Note: Currently, unit tests that call <see cref="M:Pulumi.Deployment.TestAsync``1(Pulumi.Testing.IMocks,Pulumi.Testing.TestOptions)"/>
            must run serially; parallel execution is not supported.
            </summary>
            <param name="mocks">Hooks to mock the engine calls.</param>
            <param name="options">Optional settings for the test run.</param>
            <typeparam name="TStack">The type of the stack to test.</typeparam>
            <returns>Test result containing created resources and errors, if any.</returns>
        </member>
        <member name="M:Pulumi.Deployment.TestResults(System.Collections.Immutable.ImmutableArray{Pulumi.Resource})">
             <summary>
             Used inside TestAsync overloads where users have a function that creates resources
             in which case an internal TestStack is used to create the resources.
            
             This function takes the created resources from the TestStack and filters it out of the created resources
             (since it is internal) and obtains the outputs returned, if any from that TestStack.
             </summary>
             <param name="resources">The created resources from TestAsync</param>
             <returns>Resources and outputs</returns>
        </member>
        <member name="M:Pulumi.Deployment.TestAsync(Pulumi.Testing.IMocks,Pulumi.Testing.TestOptions,System.Func{System.Threading.Tasks.Task{System.Collections.Generic.IDictionary{System.String,System.Object}}})">
            <summary>
            Entry point to test a Pulumi application. Deployment will
            run the provided function that creates resources but doesn't actually deploy them
            Note: Currently, unit tests that call this function
            must run serially; parallel execution is not supported.
            </summary>
            <param name="testMocks">Hooks to mock the engine calls.</param>
            <param name="testOptions">Optional settings for the test run.</param>
            <param name="createResources">The function which creates resources and returns outputs.</param>
            <returns>Test result containing created resources and outputs, if any.</returns>
        </member>
        <member name="M:Pulumi.Deployment.TestAsync(Pulumi.Testing.IMocks,Pulumi.Testing.TestOptions,System.Func{System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>
            Entry point to test a Pulumi application. Deployment will
            run the provided function that creates resources but doesn't actually deploy them
            Note: Currently, unit tests that call this function
            must run serially; parallel execution is not supported.
            </summary>
            <param name="testMocks">Hooks to mock the engine calls.</param>
            <param name="testOptions">Optional settings for the test run.</param>
            <param name="createResources">The function which creates resources and returns outputs.</param>
            <returns>Test result containing created resources and outputs, if any.</returns>
        </member>
        <member name="M:Pulumi.Deployment.TestAsync(Pulumi.Testing.IMocks,Pulumi.Testing.TestOptions,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Entry point to test a Pulumi application. Deployment will
            run the provided function that creates resources but doesn't actually deploy them
            Note: Currently, unit tests that call this function
            must run serially; parallel execution is not supported.
            </summary>
            <param name="testMocks">Hooks to mock the engine calls.</param>
            <param name="testOptions">Optional settings for the test run.</param>
            <param name="createResources">The function which creates resources and returns outputs.</param>
            <returns>Test result containing created resources and outputs, if any.</returns>
        </member>
        <member name="M:Pulumi.Deployment.TestAsync(Pulumi.Testing.IMocks,Pulumi.Testing.TestOptions,System.Action)">
            <summary>
            Entry point to test a Pulumi application. Deployment will
            run the provided function that creates resources but doesn't actually deploy them
            Note: Currently, unit tests that call this function
            must run serially; parallel execution is not supported.
            </summary>
            <param name="testMocks">Hooks to mock the engine calls.</param>
            <param name="testOptions">Optional settings for the test run.</param>
            <param name="createResources">The function which creates resources and returns outputs.</param>
            <returns>Test result containing created resources and outputs, if any.</returns>
        </member>
        <member name="M:Pulumi.Deployment.TryTestAsync(Pulumi.Testing.IMocks,System.Func{Pulumi.IRunner,System.Threading.Tasks.Task{System.Int32}},Pulumi.Testing.TestOptions)">
            <summary>
            Like `TestAsync`, but instead of throwing the errors
            detected in the engine, returns them in the result tuple.
            This enables tests to observe partially constructed
            `Resources` vector in presence of deliberate errors.
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.SerializeResourcePropertiesAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="M:Pulumi.Deployment.SerializeResourcePropertiesAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean,System.Boolean)"/> walks the props object passed in,
            awaiting all interior promises besides those for <see cref="P:Pulumi.Resource.Urn"/> and <see
            cref="P:Pulumi.CustomResource.Id"/>, creating a reasonable POCO object that can be remoted over
            to registerResource.
            </summary>
        </member>
        <member name="M:Pulumi.Deployment.SerializeFilteredPropertiesAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Predicate{System.String},System.Boolean,System.Boolean,System.Boolean)">
             <summary>
             <see cref="M:Pulumi.Deployment.SerializeFilteredPropertiesAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Predicate{System.String},System.Boolean,System.Boolean,System.Boolean)"/> walks the props object passed in,
             awaiting all interior promises for properties with keys that match the provided filter,
             creating a reasonable POCO object that can be remoted over to registerResource.
             </summary>
            
             <param name="label">label</param>
             <param name="args">args</param>
             <param name="acceptKey">acceptKey</param>
             <param name="keepResources">keepResources</param>
             <param name="keepOutputValues">
             Specifies if we should marshal output values. It is the callers
             responsibility to ensure that the monitor supports the OutputValues
             feature.
             </param>
             <param name="excludeResourceReferencesFromDependencies">
             Specifies if we should exclude resource references from the resulting
             <see cref="F:Pulumi.Deployment.SerializationResult.PropertyToDependentResources"/>. This is useful for remote
             components (i.e. multi-lang components, or MLCs) where we want property dependencies to be
             empty for a property that only contains resource references.
             </param>
        </member>
        <member name="M:Pulumi.Deployment.SerializeFilteredPropertiesRawAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Predicate{System.String},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Acts as `SerializeFilteredPropertiesAsync` without the
            last step of encoding the value into a Protobuf form.
            </summary>
        </member>
        <member name="T:Pulumi.DeploymentInstance">
            <summary>
            Metadata of the deployment that is currently running. Accessible via <see cref="P:Pulumi.Deployment.Instance"/>.
            </summary>
        </member>
        <member name="P:Pulumi.DeploymentInstance.StackName">
            <summary>
            Returns the current stack name.
            </summary>
        </member>
        <member name="P:Pulumi.DeploymentInstance.ProjectName">
            <summary>
            Returns the current project name.
            </summary>
        </member>
        <member name="P:Pulumi.DeploymentInstance.RootDirectory">
            <summary>
            Root directory, that is the location of the Pulumi.yaml file.
            </summary>
        </member>
        <member name="P:Pulumi.DeploymentInstance.OrganizationName">
            <summary>
            Returns the current organization name.
            </summary>
        </member>
        <member name="P:Pulumi.DeploymentInstance.IsDryRun">
            <summary>
            Whether or not the application is currently being previewed or actually applied.
            </summary>
        </member>
        <member name="M:Pulumi.DeploymentInstance.Invoke``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions,Pulumi.RegisterPackageRequest)">
            <inheritdoc />
        </member>
        <member name="M:Pulumi.DeploymentInstance.Invoke``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOutputOptions,Pulumi.RegisterPackageRequest)">
            <inheritdoc />
        </member>
        <member name="M:Pulumi.DeploymentInstance.Invoke``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions)">
            <inheritdoc />
        </member>
        <member name="M:Pulumi.DeploymentInstance.Invoke``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOutputOptions)">
            <inheritdoc />
        </member>
        <member name="M:Pulumi.DeploymentInstance.InvokeSingle``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions,Pulumi.RegisterPackageRequest)">
            <inheritdoc />
        </member>
        <member name="M:Pulumi.DeploymentInstance.InvokeSingle``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOutputOptions,Pulumi.RegisterPackageRequest)">
            <inheritdoc />
        </member>
        <member name="M:Pulumi.DeploymentInstance.InvokeSingle``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions)">
            <inheritdoc />
        </member>
        <member name="M:Pulumi.DeploymentInstance.InvokeSingle``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOutputOptions)">
            <inheritdoc />
        </member>
        <member name="M:Pulumi.DeploymentInstance.InvokeAsync``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions,Pulumi.RegisterPackageRequest)">
            <inheritdoc />
        </member>
        <member name="M:Pulumi.DeploymentInstance.InvokeAsync``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions)">
            <inheritdoc />
        </member>
        <member name="M:Pulumi.DeploymentInstance.InvokeSingleAsync``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions,Pulumi.RegisterPackageRequest)">
            <inheritdoc />
        </member>
        <member name="M:Pulumi.DeploymentInstance.InvokeSingleAsync``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions)">
            <inheritdoc />
        </member>
        <member name="M:Pulumi.DeploymentInstance.InvokeAsync(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions,Pulumi.RegisterPackageRequest)">
            <summary>
            Same as <see cref="M:Pulumi.DeploymentInstance.InvokeAsync``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions,Pulumi.RegisterPackageRequest)"/>, however the
            return value is ignored.
            </summary>
        </member>
        <member name="M:Pulumi.DeploymentInstance.InvokeAsync(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions)">
            <summary>
            Same as <see cref="M:Pulumi.DeploymentInstance.InvokeAsync``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions,Pulumi.RegisterPackageRequest)"/>, however the
            return value is ignored.
            </summary>
        </member>
        <member name="M:Pulumi.DeploymentInstance.Call``1(System.String,Pulumi.CallArgs,Pulumi.Resource,Pulumi.CallOptions,Pulumi.RegisterPackageRequest)">
            <inheritdoc />
        </member>
        <member name="M:Pulumi.DeploymentInstance.Call``1(System.String,Pulumi.CallArgs,Pulumi.Resource,Pulumi.CallOptions)">
            <inheritdoc />
        </member>
        <member name="M:Pulumi.DeploymentInstance.Call(System.String,Pulumi.CallArgs,Pulumi.Resource,Pulumi.CallOptions,Pulumi.RegisterPackageRequest)">
            <inheritdoc />
        </member>
        <member name="M:Pulumi.DeploymentInstance.Call(System.String,Pulumi.CallArgs,Pulumi.Resource,Pulumi.CallOptions)">
            <inheritdoc />
        </member>
        <member name="P:Pulumi.IDeployment.StackName">
            <summary>
            Returns the current stack name.
            </summary>
        </member>
        <member name="P:Pulumi.IDeployment.ProjectName">
            <summary>
            Returns the current project name.
            </summary>
        </member>
        <member name="P:Pulumi.IDeployment.RootDirectory">
            <summary>
            Returns the project root. The location of Pulumi.yaml.
            </summary>
        </member>
        <member name="P:Pulumi.IDeployment.OrganizationName">
            <summary>
            Returns the current organization name.
            </summary>
        </member>
        <member name="P:Pulumi.IDeployment.IsDryRun">
            <summary>
            Whether or not the application is currently being previewed or actually applied.
            </summary>
        </member>
        <member name="M:Pulumi.IDeployment.InvokeAsync``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions)">
            <summary>
            Dynamically invokes the function '<paramref name="token"/>', which is offered by a
            provider plugin.
            <para/>
            The result of <see cref="M:Pulumi.IDeployment.InvokeAsync(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions)"/> will be a <see cref="T:System.Threading.Tasks.Task"/> resolved to the
            result value of the provider plugin.
            <para/>
            The <paramref name="args"/> inputs can be a bag of computed values(including, `T`s,
            <see cref="T:System.Threading.Tasks.Task`1"/>s, <see cref="T:Pulumi.Output`1"/>s etc.).
            </summary>
        </member>
        <member name="M:Pulumi.IDeployment.InvokeAsync``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions,Pulumi.RegisterPackageRequest)">
            <summary>
            Dynamically invokes the function '<paramref name="token"/>', which is offered by a
            provider plugin.
            <para/>
            The result of <see cref="M:Pulumi.IDeployment.InvokeAsync(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions,Pulumi.RegisterPackageRequest)"/> will be a <see cref="T:System.Threading.Tasks.Task"/> resolved to the
            result value of the provider plugin.
            <para/>
            The <paramref name="args"/> inputs can be a bag of computed values(including, `T`s,
            <see cref="T:System.Threading.Tasks.Task`1"/>s, <see cref="T:Pulumi.Output`1"/>s etc.).
            </summary>
        </member>
        <member name="M:Pulumi.IDeployment.InvokeSingleAsync``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions,Pulumi.RegisterPackageRequest)">
            <summary>
            Dynamically invokes the function '<paramref name="token"/>', which is offered by a
            provider plugin.
            <para/>
            The result of <see cref="M:Pulumi.IDeployment.InvokeSingleAsync``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions,Pulumi.RegisterPackageRequest)"/> will be a <see cref="T:System.Threading.Tasks.Task"/> resolved to the
            result value of the provider plugin that returns a bag of properties with a single value that is returned.
            <para/>
            The <paramref name="args"/> inputs can be a bag of computed values(including, `T`s,
            <see cref="T:System.Threading.Tasks.Task`1"/>s, <see cref="T:Pulumi.Output`1"/>s etc.).
            </summary>
        </member>
        <member name="M:Pulumi.IDeployment.InvokeSingleAsync``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions)">
            <summary>
            Dynamically invokes the function '<paramref name="token"/>', which is offered by a
            provider plugin.
            <para/>
            The result of <see cref="M:Pulumi.IDeployment.InvokeSingleAsync``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions)"/> will be a <see cref="T:System.Threading.Tasks.Task"/> resolved to the
            result value of the provider plugin that returns a bag of properties with a single value that is returned.
            <para/>
            The <paramref name="args"/> inputs can be a bag of computed values(including, `T`s,
            <see cref="T:System.Threading.Tasks.Task`1"/>s, <see cref="T:Pulumi.Output`1"/>s etc.).
            </summary>
        </member>
        <member name="M:Pulumi.IDeployment.Invoke``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions)">
            <summary>
            Dynamically invokes the function '<paramref name="token"/>', which is offered by a
            provider plugin.
            <para/>
            The result of <see cref="M:Pulumi.IDeployment.Invoke``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions)"/> will be a <see cref="T:Pulumi.Output"/> resolved to the
            result value of the provider plugin.
            <para/>
            The <paramref name="args"/> inputs can be a bag of computed values(including, `T`s,
            <see cref="T:System.Threading.Tasks.Task`1"/>s, <see cref="T:Pulumi.Output`1"/>s etc.).
            </summary>
        </member>
        <member name="M:Pulumi.IDeployment.Invoke``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOutputOptions)">
            <summary>
            Dynamically invokes the function '<paramref name="token"/>', which is offered by a
            provider plugin.
            <para/>
            The result of <see cref="M:Pulumi.IDeployment.Invoke``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions)"/> will be a <see cref="T:Pulumi.Output"/> resolved to the
            result value of the provider plugin.
            <para/>
            The <paramref name="args"/> inputs can be a bag of computed values(including, `T`s,
            <see cref="T:System.Threading.Tasks.Task`1"/>s, <see cref="T:Pulumi.Output`1"/>s etc.).
            </summary>
        </member>
        <member name="M:Pulumi.IDeployment.Invoke``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions,Pulumi.RegisterPackageRequest)">
            <summary>
            Dynamically invokes the function '<paramref name="token"/>', which is offered by a
            provider plugin.
            <para/>
            The result of <see cref="M:Pulumi.IDeployment.Invoke``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions,Pulumi.RegisterPackageRequest)"/> will be a <see cref="T:Pulumi.Output"/> resolved to the
            result value of the provider plugin.
            <para/>
            The <paramref name="args"/> inputs can be a bag of computed values(including, `T`s,
            <see cref="T:System.Threading.Tasks.Task`1"/>s, <see cref="T:Pulumi.Output`1"/>s etc.).
            </summary>
        </member>
        <member name="M:Pulumi.IDeployment.Invoke``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOutputOptions,Pulumi.RegisterPackageRequest)">
            <summary>
            Dynamically invokes the function '<paramref name="token"/>', which is offered by a
            provider plugin.
            <para/>
            The result of <see cref="M:Pulumi.IDeployment.Invoke``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOutputOptions,Pulumi.RegisterPackageRequest)"/> will be a <see cref="T:Pulumi.Output"/> resolved to the
            result value of the provider plugin.
            <para/>
            The <paramref name="args"/> inputs can be a bag of computed values(including, `T`s,
            <see cref="T:System.Threading.Tasks.Task`1"/>s, <see cref="T:Pulumi.Output`1"/>s etc.).
            </summary>
        </member>
        <member name="M:Pulumi.IDeployment.InvokeSingle``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions)">
            <summary>
            Dynamically invokes the function '<paramref name="token"/>', which is offered by a
            provider plugin.
            <para/>
            The result of <see cref="M:Pulumi.IDeployment.InvokeSingle``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions)"/> will be a <see cref="T:Pulumi.Output"/> resolved to the
            result value of the provider plugin that returns a bag of properties with a single value that is returned.
            <para/>
            The <paramref name="args"/> inputs can be a bag of computed values(including, `T`s,
            <see cref="T:System.Threading.Tasks.Task`1"/>s, <see cref="T:Pulumi.Output`1"/>s etc.).
            </summary>
        </member>
        <member name="M:Pulumi.IDeployment.InvokeSingle``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOutputOptions)">
            <summary>
            Dynamically invokes the function '<paramref name="token"/>', which is offered by a
            provider plugin.
            <para/>
            The result of <see cref="M:Pulumi.IDeployment.InvokeSingle``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOutputOptions)"/> will be a <see cref="T:Pulumi.Output"/> resolved to the
            result value of the provider plugin that returns a bag of properties with a single value that is returned.
            <para/>
            The <paramref name="args"/> inputs can be a bag of computed values(including, `T`s,
            <see cref="T:System.Threading.Tasks.Task`1"/>s, <see cref="T:Pulumi.Output`1"/>s etc.).
            </summary>
        </member>
        <member name="M:Pulumi.IDeployment.InvokeSingle``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions,Pulumi.RegisterPackageRequest)">
            <summary>
            Dynamically invokes the function '<paramref name="token"/>', which is offered by a
            provider plugin.
            <para/>
            The result of <see cref="M:Pulumi.IDeployment.InvokeSingle``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions,Pulumi.RegisterPackageRequest)"/> will be a <see cref="T:Pulumi.Output"/> resolved to the
            result value of the provider plugin that returns a bag of properties with a single value that is returned.
            <para/>
            The <paramref name="args"/> inputs can be a bag of computed values(including, `T`s,
            <see cref="T:System.Threading.Tasks.Task`1"/>s, <see cref="T:Pulumi.Output`1"/>s etc.).
            </summary>
        </member>
        <member name="M:Pulumi.IDeployment.InvokeSingle``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOutputOptions,Pulumi.RegisterPackageRequest)">
            <summary>
            Dynamically invokes the function '<paramref name="token"/>', which is offered by a
            provider plugin.
            <para/>
            The result of <see cref="M:Pulumi.IDeployment.InvokeSingle``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOutputOptions,Pulumi.RegisterPackageRequest)"/> will be a <see cref="T:Pulumi.Output"/> resolved to the
            result value of the provider plugin that returns a bag of properties with a single value that is returned.
            <para/>
            The <paramref name="args"/> inputs can be a bag of computed values(including, `T`s,
            <see cref="T:System.Threading.Tasks.Task`1"/>s, <see cref="T:Pulumi.Output`1"/>s etc.).
            </summary>
        </member>
        <member name="M:Pulumi.IDeployment.InvokeAsync(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions)">
            <summary>
            Same as <see cref="M:Pulumi.IDeployment.InvokeAsync``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions)"/>, however the
            return value is ignored.
            </summary>
        </member>
        <member name="M:Pulumi.IDeployment.InvokeAsync(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions,Pulumi.RegisterPackageRequest)">
            <summary>
            Same as <see cref="M:Pulumi.IDeployment.InvokeAsync``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions,Pulumi.RegisterPackageRequest)"/>, however the
            return value is ignored.
            </summary>
        </member>
        <member name="M:Pulumi.IDeployment.Call``1(System.String,Pulumi.CallArgs,Pulumi.Resource,Pulumi.CallOptions)">
            <summary>
            Dynamically calls the function '<paramref name="token"/>', which is offered by a
            provider plugin. <see cref="M:Pulumi.IDeployment.Call``1(System.String,Pulumi.CallArgs,Pulumi.Resource,Pulumi.CallOptions)"/> returns immediately while the operation takes
            place asynchronously in the background, similar to Resource constructors.
            <para/>
            The result of <see cref="M:Pulumi.IDeployment.Call``1(System.String,Pulumi.CallArgs,Pulumi.Resource,Pulumi.CallOptions)"/> will be a <see cref="T:Pulumi.Output`1"/> resolved to the
            result value of the provider plugin.
            <para/>
            The <paramref name="args"/> inputs can be a bag of computed values(including, `T`s,
            <see cref="T:System.Threading.Tasks.Task`1"/>s, <see cref="T:Pulumi.Output`1"/>s etc.).
            </summary>
        </member>
        <member name="M:Pulumi.IDeployment.Call``1(System.String,Pulumi.CallArgs,Pulumi.Resource,Pulumi.CallOptions,Pulumi.RegisterPackageRequest)">
            <summary>
            Dynamically calls the function '<paramref name="token"/>', which is offered by a
            provider plugin. <see cref="M:Pulumi.IDeployment.Call``1(System.String,Pulumi.CallArgs,Pulumi.Resource,Pulumi.CallOptions,Pulumi.RegisterPackageRequest)"/> returns immediately while the operation takes
            place asynchronously in the background, similar to Resource constructors.
            <para/>
            The result of <see cref="M:Pulumi.IDeployment.Call``1(System.String,Pulumi.CallArgs,Pulumi.Resource,Pulumi.CallOptions,Pulumi.RegisterPackageRequest)"/> will be a <see cref="T:Pulumi.Output`1"/> resolved to the
            result value of the provider plugin.
            <para/>
            The <paramref name="args"/> inputs can be a bag of computed values(including, `T`s,
            <see cref="T:System.Threading.Tasks.Task`1"/>s, <see cref="T:Pulumi.Output`1"/>s etc.).
            </summary>
        </member>
        <member name="M:Pulumi.IDeployment.Call(System.String,Pulumi.CallArgs,Pulumi.Resource,Pulumi.CallOptions)">
            <summary>
            Same as <see cref="M:Pulumi.IDeployment.Call``1(System.String,Pulumi.CallArgs,Pulumi.Resource,Pulumi.CallOptions)"/>, however the return value is ignored.
            </summary>
        </member>
        <member name="M:Pulumi.IDeployment.Call(System.String,Pulumi.CallArgs,Pulumi.Resource,Pulumi.CallOptions,Pulumi.RegisterPackageRequest)">
            <summary>
            Same as <see cref="M:Pulumi.IDeployment.Call``1(System.String,Pulumi.CallArgs,Pulumi.Resource,Pulumi.CallOptions,Pulumi.RegisterPackageRequest)"/>, however the return value is ignored.
            </summary>
        </member>
        <member name="M:Pulumi.IDeployment.RegisterInvokeTransform(Pulumi.InvokeTransform)">
            <summary>
            Register an invoke transform to run when invoke calls are made.
            </summary>
        </member>
        <member name="M:Pulumi.IDeploymentInternal.RegisterResourceHook(Pulumi.ResourceHook)">
            <summary>
            Registers a resource hook against the deployment, returning a task that completes when the registration
            has finished.
            </summary>
        </member>
        <member name="M:Pulumi.IDeploymentInternal.SignalAndWaitForShutdownAsync">
            <summary>
            Signals to the deployment that no more resources will be registered and that the program has no more work to
            do. This method should not return until the deployment is finished and it is safe for the program to exit
            (e.g. the engine does not need anything more from the program, such as resource hook implementations).
            </summary>
        </member>
        <member name="M:Pulumi.IMonitor.RegisterResourceHookAsync(Pulumirpc.RegisterResourceHookRequest)">
            <summary>
            Registers a resource hook against the deployment, returning a task that completes when the registration
            has finished.
            </summary>
        </member>
        <member name="M:Pulumi.IMonitor.SignalAndWaitForShutdownAsync">
            <summary>
            Signals to the monitor that no more resources will be registered and that the program has no more work to
            do. This method should not return until the deployment is finished and it is safe for the program to exit
            (e.g. the engine does not need anything more from the program, such as resource hook implementations).
            </summary>
        </member>
        <member name="T:Pulumi.InvokeOptions">
            <summary>
            Options to help control the behavior of <see cref="M:Pulumi.IDeployment.InvokeAsync``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOptions,Pulumi.RegisterPackageRequest)"/>.
            </summary>
        </member>
        <member name="P:Pulumi.InvokeOptions.Parent">
            <summary>
            An optional parent to use for default options for this invoke (e.g. the default provider
            to use).
            </summary>
        </member>
        <member name="P:Pulumi.InvokeOptions.Provider">
            <summary>
            An optional provider to use for this invocation. If no provider is supplied, the default
            provider for the invoked function's package will be used.
            </summary>
        </member>
        <member name="P:Pulumi.InvokeOptions.Version">
            <summary>
            An optional version, corresponding to the version of the provider plugin that should be
            used when performing this invoke.
            </summary>
        </member>
        <member name="P:Pulumi.InvokeOptions.PluginDownloadURL">
            <summary>
            An optional URL, corresponding to the download URL of the provider plugin that should be
            used when performing this invoke.
            </summary>
        </member>
        <member name="T:Pulumi.InvokeOutputOptions">
            <summary>
            Options to help control the behavior of <see cref="M:Pulumi.IDeployment.Invoke``1(System.String,Pulumi.InvokeArgs,Pulumi.InvokeOutputOptions,Pulumi.RegisterPackageRequest)"/>.
            </summary>
        </member>
        <member name="P:Pulumi.InvokeOutputOptions.DependsOn">
            <summary>
            Optional additional explicit dependencies on resources.
            </summary>
        </member>
        <member name="T:Pulumi.TaskMonitoringHelper">
            <summary>
            Monitors dynamically added tasks for completion. Enters IDLE
            state when all monitored tasks finish. Allows awaiting next
            IDLE state or an exception, whichever comes first.
            Thread-safe.
            </summary>
        </member>
        <member name="M:Pulumi.TaskMonitoringHelper.AddTask(System.Threading.Tasks.Task)">
            <summary>
            Starts monitoring the given task.
            </summary>
        </member>
        <member name="M:Pulumi.TaskMonitoringHelper.AwaitIdleOrFirstExceptionAsync">
             <summary>
             Awaits next IDLE state or an exception, whichever comes
             first. Several exceptions may be returned if they have
             been observed prior to this call.
            
             IDLE state is represented as an empty sequence in the result.
             </summary>
        </member>
        <member name="T:Pulumi.LogException">
            <summary>
            Special exception we throw if we had a problem actually logging a message to the engine
            error rpc endpoint. In this case, we have no choice but to tear ourselves down reporting
            whatever we can to the console instead.
            </summary>
        </member>
        <member name="T:Pulumi.ResourceException">
            <summary>
            ResourceException can be used for terminating a program abruptly, specifically associating the
            problem with a Resource.Depending on the nature of the problem, clients can choose whether
            or not a call stack should be returned as well. This should be very rare, and would only
            indicate no usefulness of presenting that stack to the user.
            </summary>
        </member>
        <member name="T:Pulumi.RunException">
            <summary>
            RunException can be used for terminating a program abruptly, but resulting in a clean exit
            rather than the usual verbose unhandled error logic which emits the source program text and
            complete stack trace.  This type should be rarely used and not be used by developers.
            The reason to make it public is for it to be assertable by testing frameworks. Ideally <see
            cref="T:Pulumi.ResourceException"/> should always be used so that as many errors as possible can be
            associated with a Resource.
            </summary>
        </member>
        <member name="T:Pulumi.Log">
            <summary>
            Logging functions that can be called from a .NET application that will be logged to the
            <c>Pulumi</c> log stream.  These events will be printed in the terminal while the Pulumi app
            runs, and will be available from the Web console afterwards.
            </summary>
        </member>
        <member name="M:Pulumi.Log.Debug(System.String,Pulumi.Resource,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Logs a debug-level message that is generally hidden from end-users.
            </summary>
        </member>
        <member name="M:Pulumi.Log.Info(System.String,Pulumi.Resource,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Logs an informational message that is generally printed to stdout during resource
            operations.
            </summary>
        </member>
        <member name="M:Pulumi.Log.Warn(System.String,Pulumi.Resource,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Logs a warning to indicate that something went wrong, but not catastrophically so.
            </summary>
        </member>
        <member name="M:Pulumi.Log.Error(System.String,Pulumi.Resource,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Logs a fatal condition. Consider raising an exception
            after calling Error to stop the Pulumi program.
            </summary>
        </member>
        <member name="M:Pulumi.Log.Exception(System.Exception,Pulumi.Resource,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Logs an exception. Consider raising the exception after
            calling this method to stop the Pulumi program.
            </summary>
        </member>
        <member name="T:Pulumi.CallArgs">
            <summary>
            Base type for all call argument classes.
            </summary>
        </member>
        <member name="T:Pulumi.ComponentResource">
            <summary>
            A <see cref="T:Pulumi.Resource"/> that aggregates one or more other child resources into a higher
            level abstraction. The component resource itself is a resource, but does not require custom
            CRUD operations for provisioning.
            </summary>
        </member>
        <member name="M:Pulumi.ComponentResource.#ctor(System.String,System.String,Pulumi.ComponentResourceOptions)">
            <summary>
            Creates and registers a new component resource.  <paramref name="type"/> is the fully
            qualified type token and <paramref name="name"/> is the "name" part to use in creating a
            stable and globally unique URN for the object. <c>options.parent</c> is the optional parent
            for this component, and [options.dependsOn] is an optional list of other resources that
            this resource depends on, controlling the order in which we perform resource operations.
            </summary>
            <param name="type">The type of the resource.</param>
            <param name="name">The unique name of the resource.</param>
            <param name="options">A bag of options that control this resource's behavior.</param>
        </member>
        <member name="M:Pulumi.ComponentResource.#ctor(System.String,System.String,Pulumi.ResourceArgs,Pulumi.ComponentResourceOptions,System.Boolean)">
            <summary>
            Creates and registers a new component resource.  <paramref name="type"/> is the fully
            qualified type token and <paramref name="name"/> is the "name" part to use in creating a
            stable and globally unique URN for the object. <c>options.parent</c> is the optional parent
            for this component, and [options.dependsOn] is an optional list of other resources that
            this resource depends on, controlling the order in which we perform resource operations.
            </summary>
            <param name="type">The type of the resource.</param>
            <param name="name">The unique name of the resource.</param>
            <param name="args">The arguments to use to populate the new resource.</param>
            <param name="options">A bag of options that control this resource's behavior.</param>
            <param name="remote">True if this is a remote component resource.</param>
        </member>
        <member name="M:Pulumi.ComponentResource.#ctor(System.String,System.String,Pulumi.ResourceArgs,Pulumi.ComponentResourceOptions,System.Boolean,Pulumi.RegisterPackageRequest)">
            <summary>
            Creates and registers a new component resource.  <paramref name="type"/> is the fully
            qualified type token and <paramref name="name"/> is the "name" part to use in creating a
            stable and globally unique URN for the object. <c>options.parent</c> is the optional parent
            for this component, and [options.dependsOn] is an optional list of other resources that
            this resource depends on, controlling the order in which we perform resource operations.
            </summary>
            <param name="type">The type of the resource.</param>
            <param name="name">The unique name of the resource.</param>
            <param name="args">The arguments to use to populate the new resource.</param>
            <param name="options">A bag of options that control this resource's behavior.</param>
            <param name="remote">True if this is a remote component resource.</param>
            <param name="registerPackageRequest">Package parameterization options.</param>
        </member>
        <member name="M:Pulumi.ComponentResource.RegisterOutputs">
            <summary>
            RegisterOutputs registers synthetic outputs that a component has initialized, usually by
            allocating other child sub-resources and propagating their resulting property values.
            ComponentResources should always call this at the end of their constructor to indicate
            that they are done creating child resources.  While not strictly necessary, this helps
            the experience by ensuring the UI transitions the ComponentResource to the 'complete'
            state as quickly as possible (instead of waiting until the entire application completes).
            </summary>
        </member>
        <member name="T:Pulumi.ComponentResourceOptions">
            <summary>
            A bag of optional settings that control a <see cref="T:Pulumi.ComponentResource"/>'s behavior.
            </summary>
        </member>
        <member name="P:Pulumi.ComponentResourceOptions.Providers">
             <summary>
             An optional set of providers to use for child resources.
            
             Note: do not provide both <see cref="P:Pulumi.ResourceOptions.Provider"/> and <see
             cref="P:Pulumi.ComponentResourceOptions.Providers"/>.
             </summary>
        </member>
        <member name="M:Pulumi.ComponentResourceOptions.Merge(Pulumi.ComponentResourceOptions,Pulumi.ComponentResourceOptions)">
            <summary>
            Takes two <see cref="T:Pulumi.ComponentResourceOptions"/> values and produces a new
            <see cref="T:Pulumi.ComponentResourceOptions"/> with the respective
            properties of <paramref name="options2"/> merged over the same properties in <paramref
            name="options1"/>. The original options objects will be unchanged.
            <para/>
            A new instance will always be returned.
            <para/>
            Conceptually property merging follows these basic rules:
            <list type="number">
            <item><description>
            If the property is a collection, the final value will be a collection containing the
            values from each options object.
            </description></item>
            <item><description>
            Simple scalar values from <paramref name="options2"/> (i.e. <see cref="T:System.String"/>s,
            <see cref="T:System.Int32"/>s, <see cref="T:System.Boolean"/>s) will replace the values of <paramref
            name="options1"/>.
            </description></item>
            <item><description>
            <see langword="null"/> values in <paramref name="options2"/> will be ignored.
            </description></item>
            <item><description>
            Providers is a special case. Only one value per package will be in the resulting list.
            Priority is given to values in <paramref name="options2"/>. If multiple providers for
            the same package are present, later providers take priority.
            </description></item>
            </list>
            </summary>
        </member>
        <member name="T:Pulumi.CustomResource">
            <summary>
            CustomResource is a resource whose create, read, update, and delete (CRUD) operations are
            managed by performing external operations on some physical entity. The engine understands
            how to diff and perform partial updates of them, and these CRUD operations are implemented
            in a dynamically loaded plugin for the defining package.
            </summary>
        </member>
        <member name="P:Pulumi.CustomResource.Id">
            <summary>
            Id is the provider-assigned unique ID for this managed resource.  It is set during
            deployments and may be missing (unknown) during planning phases.
            </summary>
        </member>
        <member name="M:Pulumi.CustomResource.#ctor(System.String,System.String,Pulumi.ResourceArgs,Pulumi.CustomResourceOptions,Pulumi.RegisterPackageRequest)">
            <summary>
            Creates and registers a new managed resource.  <paramref name="type"/> is the fully
            qualified type token and <paramref name="name"/> is the "name" part to use in creating a
            stable and globally unique URN for the object.  <see cref="P:Pulumi.ResourceOptions.DependsOn"/>
            is an optional list of other resources that this resource depends on, controlling the
            order in which we perform resource operations.  Creating an instance does not necessarily
            perform a create on the physical entity which it represents, and instead, this is
            dependent upon the diffing of the new goal state compared to the current known resource
            state.
            </summary>
            <param name="type">The type of the resource.</param>
            <param name="name">The unique name of the resource.</param>
            <param name="args">The arguments to use to populate the new resource.</param>
            <param name="options">A bag of options that control this resource's behavior.</param>
            <param name="registerPackageRequest">Package parameterization options</param>
        </member>
        <member name="M:Pulumi.CustomResource.#ctor(System.String,System.String,Pulumi.ResourceArgs,Pulumi.CustomResourceOptions)">
            <summary>
            Creates and registers a new managed resource.  <paramref name="type"/> is the fully
            qualified type token and <paramref name="name"/> is the "name" part to use in creating a
            stable and globally unique URN for the object.  <see cref="P:Pulumi.ResourceOptions.DependsOn"/>
            is an optional list of other resources that this resource depends on, controlling the
            order in which we perform resource operations.  Creating an instance does not necessarily
            perform a create on the physical entity which it represents, and instead, this is
            dependent upon the diffing of the new goal state compared to the current known resource
            state.
            </summary>
            <param name="type">The type of the resource.</param>
            <param name="name">The unique name of the resource.</param>
            <param name="args">The arguments to use to populate the new resource.</param>
            <param name="options">A bag of options that control this resource's behavior.</param>
        </member>
        <member name="M:Pulumi.CustomResource.#ctor(System.String,System.String,Pulumi.ResourceArgs,Pulumi.CustomResourceOptions,System.Boolean,Pulumi.RegisterPackageRequest)">
            <summary>
            Creates and registers a new managed resource.  <paramref name="type"/> is the fully
            qualified type token and <paramref name="name"/> is the "name" part to use in creating a
            stable and globally unique URN for the object.  <see cref="P:Pulumi.ResourceOptions.DependsOn"/>
            is an optional list of other resources that this resource depends on, controlling the
            order in which we perform resource operations.  Creating an instance does not necessarily
            perform a create on the physical entity which it represents, and instead, this is
            dependent upon the diffing of the new goal state compared to the current known resource
            state.
            </summary>
            <param name="type">The type of the resource.</param>
            <param name="name">The unique name of the resource.</param>
            <param name="args">The arguments to use to populate the new resource.</param>
            <param name="options">A bag of options that control this resource's behavior.</param>
            <param name="dependency">True if this is a synthetic resource used internally for dependency tracking.</param>
            <param name="registerPackageRequest">Package parameterization options</param>
        </member>
        <member name="T:Pulumi.CustomResourceOptions">
            <summary>
            <see cref="T:Pulumi.CustomResourceOptions"/> is a bag of optional settings that control a <see
            cref="T:Pulumi.CustomResource"/>'s behavior.
            </summary>
        </member>
        <member name="P:Pulumi.CustomResourceOptions.DeleteBeforeReplace">
            <summary>
            When set to <c>true</c>, indicates that this resource should be deleted before its
            replacement is created when replacement is necessary.
            </summary>
        </member>
        <member name="P:Pulumi.CustomResourceOptions.AdditionalSecretOutputs">
            <summary>
            The names of outputs for this resource that should be treated as secrets. This augments
            the list that the resource provider and pulumi engine already determine based on inputs
            to your resource. It can be used to mark certain outputs as a secrets on a per resource
            basis.
            </summary>
        </member>
        <member name="P:Pulumi.CustomResourceOptions.ImportId">
            <summary>
            When provided with a resource ID, import indicates that this resource's provider should
            import its state from the cloud resource with the given ID.The inputs to the resource's
            constructor must align with the resource's current state.Once a resource has been
            imported, the import property must be removed from the resource's options.
            </summary>
        </member>
        <member name="M:Pulumi.CustomResourceOptions.Merge(Pulumi.CustomResourceOptions,Pulumi.CustomResourceOptions)">
            <summary>
            Takes two <see cref="T:Pulumi.CustomResourceOptions"/> values and produces a new
            <see cref="T:Pulumi.CustomResourceOptions"/> with the respective
            properties of <paramref name="options2"/> merged over the same properties in <paramref
            name="options1"/>. The original options objects will be unchanged.
            <para/>
            A new instance will always be returned.
            <para/>
            Conceptually property merging follows these basic rules:
            <list type="number">
            <item><description>
            If the property is a collection, the final value will be a collection containing the
            values from each options object.
            </description></item>
            <item><description>
            Simple scalar values from <paramref name="options2"/> (i.e. <see cref="T:System.String"/>s,
            <see cref="T:System.Int32"/>s, <see cref="T:System.Boolean"/>s) will replace the values of <paramref
            name="options1"/>.
            </description></item>
            <item><description>
            <see langword="null"/> values in <paramref name="options2"/> will be ignored.
            </description></item>
            </list>
            </summary>
        </member>
        <member name="T:Pulumi.CustomTimeouts">
            <summary>
            Optional timeouts to supply in <see cref="P:Pulumi.ResourceOptions.CustomTimeouts"/>.
            </summary>
        </member>
        <member name="P:Pulumi.CustomTimeouts.Create">
            <summary>
            The optional create timeout.
            </summary>
        </member>
        <member name="P:Pulumi.CustomTimeouts.Update">
            <summary>
            The optional update timeout.
            </summary>
        </member>
        <member name="P:Pulumi.CustomTimeouts.Delete">
            <summary>
            The optional delete timeout.
            </summary>
        </member>
        <member name="T:Pulumi.DependencyProviderResource">
            <summary>
            <see cref="T:Pulumi.DependencyProviderResource"/> is a <see cref="T:Pulumi.Resource"/> that is used by the provider SDK as a
            stand-in for a provider that is only used for its reference. Its only valid properties are its URN and ID.
            </summary>
        </member>
        <member name="T:Pulumi.DependencyResource">
            <summary>
            <see cref="T:Pulumi.DependencyResource"/> is a <see cref="T:Pulumi.Resource"/> that is used to indicate that an
            <see cref="T:Pulumi.Output"/> has a dependency on a particular resource. These resources are only created when dealing
            with remote component resources.
            </summary>
        </member>
        <member name="T:Pulumi.DictionaryInvokeArgs">
            <summary>
            A special type of <see cref="T:Pulumi.InvokeArgs"/> with resource inputs represented
            as a loosely-typed dictionary of objects. Normally,
            <see cref="T:Pulumi.DictionaryInvokeArgs"/> should not be used by resource providers
            since it's too low-level and provides low safety. Its target scenario are
            resources with a very dynamic shape of inputs.
            The input dictionary may only contain objects that are serializable by
            Pulumi, i.e only the following types (or pulumi.Output of those types) are allowed:
            <list type="bullet">
            <item><description>Primitive types: <see cref="T:System.String"/>, <see cref="T:System.Double"/>,
            <see cref="T:System.Int32"/>, <see cref="T:System.Boolean"/></description></item>
            <item><description><see cref="T:Pulumi.Asset"/>, <see cref="T:Pulumi.Archive"/>, or
            <see cref="T:Pulumi.AssetArchive"/></description></item>
            <item><description><see cref="T:System.Text.Json.JsonElement"/>
            </description></item>
            <item><description>Generic collections of the above:
            <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>, <see cref="T:System.Collections.Immutable.ImmutableDictionary`2"/>
            with <see cref="T:System.String"/> keys, <see cref="T:Pulumi.Union`2"/></description></item>
            </list>
            </summary>
        </member>
        <member name="M:Pulumi.DictionaryInvokeArgs.#ctor(System.Collections.Immutable.ImmutableDictionary{System.String,System.Object})">
            <summary>
            Constructs an instance of <see cref="T:Pulumi.DictionaryInvokeArgs"/> from
            a dictionary of input objects.
            </summary>
            <param name="dictionary">The input dictionary. It may only contain objects
            that are serializable by Pulumi.</param>
        </member>
        <member name="T:Pulumi.DictionaryResourceArgs">
            <summary>
            A special type of <see cref="T:Pulumi.ResourceArgs"/> with resource inputs represented
            as a loosely-typed dictionary of objects. Normally,
            <see cref="T:Pulumi.DictionaryResourceArgs"/> should not be used by resource providers
            since it's too low-level and provides low safety. Its target scenario are
            resources with a very dynamic shape of inputs.
            The input dictionary may only contain objects that are serializable by
            Pulumi, i.e only the following types (or pulumi.Output of those types) are allowed:
            <list type="bullet">
            <item><description>Primitive types: <see cref="T:System.String"/>, <see cref="T:System.Double"/>,
            <see cref="T:System.Int32"/>, <see cref="T:System.Boolean"/></description></item>
            <item><description><see cref="T:Pulumi.Asset"/>, <see cref="T:Pulumi.Archive"/>, or
            <see cref="T:Pulumi.AssetArchive"/></description></item>
            <item><description><see cref="T:System.Text.Json.JsonElement"/>
            </description></item>
            <item><description>Generic collections of the above:
            <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>, <see cref="T:System.Collections.Immutable.ImmutableDictionary`2"/>
            with <see cref="T:System.String"/> keys, <see cref="T:Pulumi.Union`2"/></description></item>
            </list>
            </summary>
        </member>
        <member name="M:Pulumi.DictionaryResourceArgs.#ctor(System.Collections.Immutable.ImmutableDictionary{System.String,System.Object})">
            <summary>
            Constructs an instance of <see cref="T:Pulumi.DictionaryResourceArgs"/> from
            a dictionary of input objects.
            </summary>
            <param name="dictionary">The input dictionary. It may only contain objects
            that are serializable by Pulumi.</param>
        </member>
        <member name="T:Pulumi.InputArgs">
            <summary>
            Base type for all input argument classes.
            </summary>
        </member>
        <member name="T:Pulumi.InvokeArgs">
            <summary>
            Base type for all invoke argument classes.
            </summary>
        </member>
        <member name="T:Pulumi.InvokeTransform">
            <summary>
            The type of an invoke transform.
            </summary>
            <param name="args"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:Pulumi.InvokeTransformArgs.Token">
            <summary>
            The token of the invoke.
            </summary>
        </member>
        <member name="P:Pulumi.InvokeTransformArgs.Args">
            <summary>
            The original properties passed to the Resource constructor.
            </summary>
        </member>
        <member name="P:Pulumi.InvokeTransformArgs.Options">
            <summary>
            The original resource options passed to the Resource constructor.
            </summary>
        </member>
        <member name="T:Pulumi.ProviderResource">
            <summary>
            <see cref="T:Pulumi.ProviderResource"/> is a <see cref="T:Pulumi.Resource"/> that implements CRUD operations
            for other custom resources. These resources are managed similarly to other resources,
            including the usual diffing and update semantics.
            </summary>
        </member>
        <member name="M:Pulumi.ProviderResource.#ctor(System.String,System.String,Pulumi.ResourceArgs,Pulumi.CustomResourceOptions)">
            <summary>
            Creates and registers a new provider resource for a particular package.
            </summary>
            <param name="package">The package associated with this provider.</param>
            <param name="name">The unique name of the provider.</param>
            <param name="args">The configuration to use for this provider.</param>
            <param name="options">A bag of options that control this provider's behavior.</param>
        </member>
        <member name="M:Pulumi.ProviderResource.#ctor(System.String,System.String,Pulumi.ResourceArgs,Pulumi.CustomResourceOptions,Pulumi.RegisterPackageRequest)">
            <summary>
            Creates and registers a new provider resource for a particular package.
            </summary>
            <param name="package">The package associated with this provider.</param>
            <param name="name">The unique name of the provider.</param>
            <param name="args">The configuration to use for this provider.</param>
            <param name="options">A bag of options that control this provider's behavior.</param>
            <param name="registerPackageRequest">Options for package parameterization.</param>
        </member>
        <member name="M:Pulumi.ProviderResource.#ctor(System.String,System.String,Pulumi.ResourceArgs,Pulumi.CustomResourceOptions,System.Boolean,Pulumi.RegisterPackageRequest)">
            <summary>
            Creates and registers a new provider resource for a particular package.
            </summary>
            <param name="package">The package associated with this provider.</param>
            <param name="name">The unique name of the provider.</param>
            <param name="args">The configuration to use for this provider.</param>
            <param name="options">A bag of options that control this provider's behavior.</param>
            <param name="dependency">True if this is a synthetic resource used internally for dependency tracking.</param>
            <param name="registerPackageRequest">Options for package parameterization.</param>
        </member>
        <member name="P:Pulumi.RegisterPackageRequest.PackageParameterization.Name">
            <summary>
            The name of the parameterized package
            </summary>
        </member>
        <member name="P:Pulumi.RegisterPackageRequest.PackageParameterization.Version">
            <summary>
            The version of the parameterized package
            </summary>
        </member>
        <member name="P:Pulumi.RegisterPackageRequest.PackageParameterization.Value">
            <summary>
            The paramter value for the parameterized package
            </summary>
        </member>
        <member name="P:Pulumi.RegisterPackageRequest.Name">
            <summary>
            The plugin name
            </summary>
        </member>
        <member name="P:Pulumi.RegisterPackageRequest.Version">
            <summary>
            The plugin version
            </summary>
        </member>
        <member name="P:Pulumi.RegisterPackageRequest.DownloadUrl">
            <summary>
            the optional plugin download url.
            </summary>
        </member>
        <member name="P:Pulumi.RegisterPackageRequest.Checksums">
            <summary>
            the optional plugin checksums
            </summary>
        </member>
        <member name="T:Pulumi.Resource">
            <summary>
            Resource represents a class whose CRUD operations are implemented by a provider plugin.
            </summary>
        </member>
        <member name="P:Pulumi.Resource.ChildResources">
             <summary>
             The child resources of this resource.  We use these (only from a ComponentResource) to
             allow code to dependOn a ComponentResource and have that effectively mean that it is
             depending on all the CustomResource children of that component.
            
             Important!  We only walk through ComponentResources.They're the only resources that
             serve as an aggregation of other primitive(i.e.custom) resources.While a custom resource
             can be a parent of other resources, we don't want to ever depend on those child
             resource.  If we do, it's simple to end up in a situation where we end up depending on a
             child resource that has a data cycle dependency due to the data passed into it. An
             example of how this would be bad is:
            
             <c>
                 var c1 = new CustomResource("c1");
                 var c2 = new CustomResource("c2", { parentId = c1.id }, { parent = c1 });
                 var c3 = new CustomResource("c3", { parentId = c1.id }, { parent = c1 });
             </c>
            
             The problem here is that 'c2' has a data dependency on 'c1'.  If it tries to wait on
             'c1' it will walk to the children and wait on them.This will mean it will wait on 'c3'.
             But 'c3' will be waiting in the same manner on 'c2', and a cycle forms. This normally
             does not happen with ComponentResources as they do not have any data flowing into
             them.The only way you would be able to have a problem is if you had this sort of coding
             pattern:
            
             <c>
                 var c1 = new ComponentResource("c1");
                 var c2 = new CustomResource("c2", { parentId = c1.urn }, { parent: c1 });
                 var c3 = new CustomResource("c3", { parentId = c1.urn }, { parent: c1 });
             </c>
            
             However, this would be pretty nonsensical as there is zero need for a custom resource to
             ever need to reference the urn of a component resource.  So it's acceptable if that sort
             of pattern failed in practice.
             </summary>
        </member>
        <member name="P:Pulumi.Resource.Urn">
            <summary>
            Urn is the stable logical URN used to distinctly address a resource, both before and
            after deployments.
            </summary>
        </member>
        <member name="F:Pulumi.Resource._protect">
            <summary>
            When set to true, protect ensures this resource cannot be deleted.
            </summary>
        </member>
        <member name="F:Pulumi.Resource._transformations">
            <summary>
            A collection of transformations to apply as part of resource registration.
            </summary>
        </member>
        <member name="F:Pulumi.Resource._aliases">
            <summary>
            A list of aliases applied to this resource.
            </summary>
        </member>
        <member name="M:Pulumi.Resource.GetResourceType">
            <summary>
            The type assigned to the resource at construction.
            </summary>
        </member>
        <member name="M:Pulumi.Resource.GetResourceName">
            <summary>
            The name assigned to the resource at construction.
            </summary>
        </member>
        <member name="F:Pulumi.Resource._providers">
            <summary>
            The set of providers to use for child resources. Keyed by package name (e.g. "aws").
            </summary>
        </member>
        <member name="F:Pulumi.Resource._provider">
            <summary>
            The specified provider or provider determined from the parent for custom resources.
            </summary>
        </member>
        <member name="F:Pulumi.Resource._version">
            <summary>
            The specified provider version.
            </summary>
        </member>
        <member name="F:Pulumi.Resource._pluginDownloadURL">
            <summary>
            The specified provider download URL.
            </summary>
        </member>
        <member name="M:Pulumi.Resource.#ctor(System.String,System.String,System.Boolean,Pulumi.ResourceArgs,Pulumi.ResourceOptions,System.Boolean,System.Boolean,Pulumi.RegisterPackageRequest)">
            <summary>
            Creates and registers a new resource object.  <paramref name="type"/> is the fully
            qualified type token and <paramref name="name"/> is the "name" part to use in creating a
            stable and globally unique URN for the object. dependsOn is an optional list of other
            resources that this resource depends on, controlling the order in which we perform
            resource operations.
            </summary>
            <param name="type">The type of the resource.</param>
            <param name="name">The unique name of the resource.</param>
            <param name="custom">True to indicate that this is a custom resource, managed by a plugin.</param>
            <param name="args">The arguments to use to populate the new resource.</param>
            <param name="options">A bag of options that control this resource's behavior.</param>
            <param name="remote">True if this is a remote component resource.</param>
            <param name="dependency">True if this is a synthetic resource used internally for dependency tracking.</param>
            <param name="registerPackageRequest">Options for package parameterization.</param>
        </member>
        <member name="M:Pulumi.Resource.GetProvider(System.String)">
            <summary>
            Fetches the provider for the given module member, if any.
            </summary>
        </member>
        <member name="T:Pulumi.ResourceArgs">
            <summary>
            Base type for all resource argument classes.
            </summary>
        </member>
        <member name="T:Pulumi.ResourceHook">
            <summary>
            A resource hook is a callback that can be registered to run at specific points in the resource lifecycle.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceHook.Name">
            <summary>
            The name of the resource hook. This must be unique within a program.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceHook.Callback">
            <summary>
            The callback to invoke when the resource hook is triggered.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceHook.Options">
            <summary>
            Options for the resource hook, such as whether it should run during a dry-run operation
            (e.g. <c>preview</c>).
            </summary>
        </member>
        <member name="M:Pulumi.ResourceHook.#ctor(System.String,Pulumi.ResourceHookCallback,Pulumi.ResourceHookOptions)">
            <summary>
            Creates a new <see cref="T:Pulumi.ResourceHook"/> with the specified name, callback, and options.
            </summary>
        </member>
        <member name="M:Pulumi.ResourceHook.#ctor(System.String,Pulumi.ResourceHookCallback,Pulumi.ResourceHookOptions,System.Threading.Tasks.Task)">
            <summary>
            Creates a new <see cref="T:Pulumi.ResourceHook"/> with the specified name, callback, and options. The task
            determining whether or not the hook has been registered must also be provided. Typically this will be a
            registration task attached to the current deployment, but subclasses may use this constructor to
            initialize hooks with custom registration logic.
            </summary>
        </member>
        <member name="T:Pulumi.ResourceHookCallback">
            <summary>
            ResourceHookCallback is a delegate that defines the signature of <see cref="T:Pulumi.ResourceHook"/> callback functions.
            Callbacks take a set of <see cref="T:Pulumi.ResourceHookArgs"/> and an optional <see cref="T:System.Threading.CancellationToken"/>.
            Callbacks may raise an error by throwing an exception, which will be propagated to the resource operation that
            triggered the hook.
            </summary>
        </member>
        <member name="T:Pulumi.ResourceHookOptions">
            <summary>
            Options for registering a <see cref="T:Pulumi.ResourceHook"/>.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceHookOptions.OnDryRun">
            <summary>
            Run the hook during dry-run (<c>preview</c>) operations. Defaults to false.
            </summary>
        </member>
        <member name="T:Pulumi.ResourceHookArgs">
            <summary>
            <para>
            ResourceHookArgs represents the arguments passed to a resource hook. Depending on the hook type, only some of
            the new/old inputs/outputs are set.
            </para>
            <code>
            | Hook Type     | old_inputs | new_inputs | old_outputs | new_outputs |
            | ------------- | ---------- | ---------- | ----------- | ----------- |
            | before_create |            | ✓          |             |             |
            | after_create  |            | ✓          |             | ✓           |
            | before_update | ✓          | ✓          | ✓           |             |
            | after_update  | ✓          | ✓          | ✓           | ✓           |
            | before_delete | ✓          |            | ✓           |             |
            | after_delete  | ✓          |            | ✓           |             |
            </code>
            </summary>
        </member>
        <member name="P:Pulumi.ResourceHookArgs.Urn">
            <summary>
            The URN of the resource that triggered the hook.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceHookArgs.Id">
            <summary>
            The ID of the resource that triggered the hook.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceHookArgs.NewInputs">
            <summary>
            The new inputs of the resource that triggered the hook.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceHookArgs.OldInputs">
            <summary>
            The old inputs of the resource that triggered the hook.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceHookArgs.NewOutputs">
            <summary>
            The new outputs of the resource that triggered the hook.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceHookArgs.OldOutputs">
            <summary>
            The old outputs of the resource that triggered the hook.
            </summary>
        </member>
        <member name="M:Pulumi.ResourceHookArgs.#ctor(System.String,System.String,System.Collections.Immutable.ImmutableDictionary{System.String,System.Object},System.Collections.Immutable.ImmutableDictionary{System.String,System.Object},System.Collections.Immutable.ImmutableDictionary{System.String,System.Object},System.Collections.Immutable.ImmutableDictionary{System.String,System.Object})">
            <summary>
            Creates a new set of <see cref="T:Pulumi.ResourceHookArgs"/>.
            </summary>
        </member>
        <member name="T:Pulumi.ResourceHookBinding">
            <summary>
            <para>
            Binds <see cref="T:Pulumi.ResourceHook"/>s to a resource. The resource hooks will be invoked at specific points in the
            lifecycle of the resource.
            </para>
            <para>
            <c>Before*</c> hooks that raise an exception will cause the resource operation to fail. <c>After*</c> hooks that
            raise an exception will log a warning, but do not cause the action or the deployment to fail.
            </para>
            <para>
            When running <c>pulumi destroy</c>, <c>BeforeDelete</c> and <c>AfterDelete</c> resource hooks require the
            operation to run with <c>--run-program</c>, to ensure that the program which defines the hooks is available.
            </para>
            </summary>
        </member>
        <member name="P:Pulumi.ResourceHookBinding.BeforeCreate">
            <summary>
            Hooks to be invoked before the resource is created.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceHookBinding.AfterCreate">
            <summary>
            Hooks to be invoked after the resource is created.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceHookBinding.BeforeUpdate">
            <summary>
            Hooks to be invoked before the resource is updated.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceHookBinding.AfterUpdate">
            <summary>
            Hooks to be invoked after the resource is updated.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceHookBinding.BeforeDelete">
            <summary>
            Hooks to be invoked before the resource is deleted.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceHookBinding.AfterDelete">
            <summary>
            Hooks to be invoked after the resource is deleted.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceHookBinding.IsEmpty">
            <summary>
            IsEmpty is true if and only if no hooks have been bound to any of the lifecycle events.
            </summary>
        </member>
        <member name="M:Pulumi.ResourceHookBinding.Clone">
            <summary>
            Creates a deep copy of this <see cref="T:Pulumi.ResourceHookBinding"/> instance.
            </summary>
        </member>
        <member name="M:Pulumi.ResourceHookBinding.Concat(Pulumi.ResourceHookBinding)">
            <summary>
            Concatenates this <see cref="T:Pulumi.ResourceHookBinding"/> with another , merging their hooks.
            </summary>
        </member>
        <member name="T:Pulumi.ResourceHookUtilities">
            <summary>
            Utilities for working with resource hooks, particularly for converting
            between protobuf representations and .NET ResourceHook objects.
            </summary>
        </member>
        <member name="M:Pulumi.ResourceHookUtilities.ResourceHookBindingFromProto(Pulumirpc.RegisterResourceRequest.Types.ResourceHooksBinding)">
            <summary>
            Converts a protobuf ResourceHooksBinding from
            RegisterResourceRequest to a .NET ResourceHookBinding using
            StubResourceHook instances. This is used when receiving hooks from
            transforms that need to be reconstructed as .NET objects.
            </summary>
        </member>
        <member name="M:Pulumi.ResourceHookUtilities.ResourceHookBindingFromProto(Pulumirpc.ConstructRequest.Types.ResourceHooksBinding)">
            <summary>
            Converts a protobuf ResourceHooksBinding from ConstructRequest to a
            .NET ResourceHookBinding using StubResourceHook instances. This is
            used when receiving hooks from remote components that need to be
            reconstructed as .NET objects.
            </summary>
        </member>
        <member name="T:Pulumi.ResourceHookUtilities.StubResourceHook">
             <summary>
             StubResourceHook is a resource hook that does nothing.
            
             We need to reconstruct ResourceHook instances when receiving hooks
             from transforms or remote components, but we only have the name
             available. We know these hooks have already been registered, so we
             can construct dummy hooks here that will be serialized back into a
             list of hook names.
             </summary>
        </member>
        <member name="T:Pulumi.ResourceOptions">
            <summary>
            ResourceOptions is a bag of optional settings that control a resource's behavior.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceOptions.Id">
            <summary>
            An optional existing ID to load, rather than create.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceOptions.Parent">
            <summary>
            An optional parent resource to which this resource belongs.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceOptions.DependsOn">
            <summary>
            Optional additional explicit dependencies on other resources.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceOptions.Protect">
            <summary>
            When set to true, protect ensures this resource cannot be deleted.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceOptions.IgnoreChanges">
            <summary>
            Ignore changes to any of the specified properties.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceOptions.Version">
            <summary>
            An optional version, corresponding to the version of the provider plugin that should be
            used when operating on this resource. This version overrides the version information
            inferred from the current package and should rarely be used.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceOptions.Provider">
             <summary>
             An optional provider to use for this resource's CRUD operations. If no provider is
             supplied, the default provider for the resource's package will be used. The default
             provider is pulled from the parent's provider bag (see also
             ComponentResourceOptions.providers).
            
             If this is a <see cref="T:Pulumi.ComponentResourceOptions"/> do not provide both <see
             cref="P:Pulumi.ResourceOptions.Provider"/> and <see cref="P:Pulumi.ComponentResourceOptions.Providers"/>.
             </summary>
        </member>
        <member name="P:Pulumi.ResourceOptions.CustomTimeouts">
            <summary>
             An optional CustomTimeouts configuration block.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceOptions.ResourceTransformations">
            <summary>
            Optional list of transformations to apply to this resource during construction.The
            transformations are applied in order, and are applied prior to transformation applied to
            parents walking from the resource up to the stack.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceOptions.ResourceTransforms">
            <summary>
            Optional list of transforms to apply to this resource during construction.The transforms are applied in
            order, and are applied prior to transform applied to parents walking from the resource up to the stack.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceOptions.Aliases">
            <summary>
            An optional list of aliases to treat this resource as matching.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceOptions.Urn">
            <summary>
            The URN of a previously-registered resource of this type to read from the engine.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceOptions.ReplaceOnChanges">
            <summary>
            Changes to any of these property paths will force a replacement.  If this list
            includes `"*"`, changes to any properties will force a replacement.  Initialization
            errors from previous deployments will require replacement instead of update only if
            `"*"` is passed.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceOptions.PluginDownloadURL">
            <summary>
            An optional URL, corresponding to the url from which the provider plugin that should be
            used when operating on this resource is downloaded from. This URL overrides the download URL
            inferred from the current package and should rarely be used.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceOptions.RetainOnDelete">
            <summary>
            If set to True, the providers Delete method will not be called for this resource.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceOptions.DeletedWith">
            <summary>
            If set, the providers Delete method will not be called for this resource
            if specified resource is being deleted as well.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceOptions.Hooks">
            <summary>
            Optional resource hooks to bind to this resource. The hooks will be invoked during the lifecycle of
            the resource.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceOptions.HideDiffs">
            <summary>
            If set, diffs from the included property paths will not be shown.
            This only affects the diff display, and does not affect update behavior.
            </summary>
        </member>
        <member name="T:Pulumi.ResourceTransform">
            <summary>
            ResourceTransform is the callback signature for <see cref="P:Pulumi.ResourceOptions.ResourceTransforms"/>. A
            transform is passed the same set of inputs provided to the <see cref="T:Pulumi.Resource"/> constructor, and can
            optionally return back alternate values for the <c>properties</c> and/or <c>options</c> prior to the resource
            actually being created. The effect will be as though those <c>properties</c> and/or <c>options</c> were passed
            in place of the original call to the <see cref="T:Pulumi.Resource"/> constructor. If the transform returns <see
            langword="null"/>, this indicates that the resource will not be transformed.
            </summary>
            <returns>The new values to use for the <c>args</c> and <c>options</c> of the <see cref="T:Pulumi.Resource"/> in place of
            the originally provided values.</returns>
        </member>
        <member name="P:Pulumi.ResourceTransformArgs.Name">
            <summary>
            The name of the resource being transformed.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceTransformArgs.Type">
            <summary>
            The type of the resource being transformed.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceTransformArgs.Custom">
            <summary>
            If this is a custom resource.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceTransformArgs.Args">
            <summary>
            The original properties passed to the Resource constructor.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceTransformArgs.Options">
            <summary>
            The original resource options passed to the Resource constructor.
            </summary>
        </member>
        <member name="T:Pulumi.ResourceTransformation">
            <summary>
            ResourceTransformation is the callback signature for <see
            cref="P:Pulumi.ResourceOptions.ResourceTransformations"/>. A transformation is passed the same set of
            inputs provided to the <see cref="T:Pulumi.Resource"/> constructor, and can optionally return back
            alternate values for the <c>properties</c> and/or <c>options</c> prior to the resource
            actually being created. The effect will be as though those <c>properties</c> and/or
            <c>options</c> were passed in place of the original call to the <see cref="T:Pulumi.Resource"/>
            constructor.  If the transformation returns <see langword="null"/>, this indicates that the
            resource will not be transformed.
            </summary>
            <returns>The new values to use for the <c>args</c> and <c>options</c> of the <see
            cref="T:Pulumi.Resource"/> in place of the originally provided values.</returns>
        </member>
        <member name="P:Pulumi.ResourceTransformationArgs.Resource">
            <summary>
            The Resource instance that is being transformed.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceTransformationArgs.Args">
            <summary>
            The original properties passed to the Resource constructor.
            </summary>
        </member>
        <member name="P:Pulumi.ResourceTransformationArgs.Options">
            <summary>
            The original resource options passed to the Resource constructor.
            </summary>
        </member>
        <member name="T:Pulumi.StackOptions">
            <summary>
            <see cref="T:Pulumi.StackOptions"/> is a bag of optional settings that control a stack's behavior.
            </summary>
        </member>
        <member name="P:Pulumi.StackOptions.ResourceTransformations">
            <summary>
            Optional list of transformations to apply to this stack's resources during construction.
            The transformations are applied in order, and are applied after all the transformations of custom
            and component resources in the stack.
            </summary>
        </member>
        <member name="P:Pulumi.StackOptions.ResourceTransforms">
            <summary>
            Optional list of transforms to apply to this stack's resources during construction. The transforms are
            applied in order, and are applied after all the transforms of custom and component resources in the stack.
            </summary>
        </member>
        <member name="T:Pulumi.StackReference">
            <summary>
            Manages a reference to a Pulumi stack and provides access to the referenced stack's outputs.
            </summary>
        </member>
        <member name="P:Pulumi.StackReference.Name">
            <summary>
            The name of the referenced stack.
            </summary>
        </member>
        <member name="P:Pulumi.StackReference.Outputs">
            <summary>
            The outputs of the referenced stack.
            </summary>
        </member>
        <member name="P:Pulumi.StackReference.SecretOutputNames">
            <summary>
            The names of any stack outputs which contain secrets.
            </summary>
        </member>
        <member name="M:Pulumi.StackReference.#ctor(System.String,Pulumi.StackReferenceArgs,Pulumi.CustomResourceOptions)">
            <summary>
            Create a <see cref="T:Pulumi.StackReference"/> resource with the given unique name, arguments, and options.
            <para />
            If args is not specified, the name of the referenced stack will be the name of the StackReference resource.
            </summary>
            <param name="name">The unique name of the stack reference.</param>
            <param name="args">The arguments to use to populate this resource's properties.</param>
            <param name="options">A bag of options that control this resource's behavior.</param>
        </member>
        <member name="M:Pulumi.StackReference.GetOutput(Pulumi.Input{System.String})">
            <summary>
            Fetches the value of the named stack output, or null if the stack output was not found.
            </summary>
            <param name="name">The name of the stack output to fetch.</param>
            <returns>An <see cref="T:Pulumi.Output`1"/> containing the requested value.</returns>
        </member>
        <member name="M:Pulumi.StackReference.RequireOutput(Pulumi.Input{System.String})">
            <summary>
            Fetches the value of the named stack output, or throws an error if the output was not found.
            </summary>
            <param name="name">The name of the stack output to fetch.</param>
            <returns>An <see cref="T:Pulumi.Output`1"/> containing the requested value.</returns>
        </member>
        <member name="M:Pulumi.StackReference.GetOutputDetailsAsync(System.String)">
            <summary>
            Fetches the value of the named stack output
            and builds a <see ref="StackReferenceOutputDetails"/> object from it.
            <para />
            The returned object has its Value or SecretValue field set
            depending on whether the output is a secret.
            Neither field is set if the output is not found.
            </summary>
            <param name="name">The name of the stack output to fetch.</param>
            <returns>StackReferenceOutputDetails object containing the output.</returns>
        </member>
        <member name="M:Pulumi.StackReference.GetValueAsync(Pulumi.Input{System.String})">
            <summary>
            Fetches the value of the named stack output. May return null if the value is
            not known for some reason.
            <para />
            This operation is not supported (and will throw) for secret outputs.
            </summary>
            <param name="name">The name of the stack output to fetch.</param>
            <returns>The value of the referenced stack output.</returns>
        </member>
        <member name="M:Pulumi.StackReference.RequireValueAsync(Pulumi.Input{System.String})">
            <summary>
            Fetches the value promptly of the named stack output. Throws an error if the stack output is
            not found.
            <para />
            This operation is not supported (and will throw) for secret outputs.
            </summary>
            <param name="name">The name of the stack output to fetch.</param>
            <returns>The value of the referenced stack output.</returns>
        </member>
        <member name="T:Pulumi.StackReferenceArgs">
            <summary>
            The set of arguments for constructing a StackReference resource.
            </summary>
        </member>
        <member name="P:Pulumi.StackReferenceArgs.Name">
            <summary>
            The name of the stack to reference.
            </summary>
        </member>
        <member name="T:Pulumi.StackReferenceOutputDetails">
            <summary>
            Holds a StackReference's output value.
            At most one of Value and SecretValue will be set.
            </summary>
        </member>
        <member name="P:Pulumi.StackReferenceOutputDetails.Value">
            <summary>
            Output value returned by the <see cref="T:Pulumi.StackReference"/>.
            This field is only set if the output is not a secret.
            </summary>
        </member>
        <member name="P:Pulumi.StackReferenceOutputDetails.SecretValue">
            <summary>
            Secret output value returned by the <see cref="T:Pulumi.StackReference"/>.
            This field is only set if the output is a secret.
            </summary>
        </member>
        <member name="T:Pulumi.OutputAttribute">
            <summary>
            Attribute used by a mark <see cref="T:Pulumi.Resource"/> output properties. Use this attribute
            in your Pulumi programs to mark outputs of <see cref="T:Pulumi.ComponentResource"/> and
            <see cref="T:Pulumi.Stack"/> resources.
            </summary>
        </member>
        <member name="T:Pulumi.InputAttribute">
             <summary>
             Attribute used by a Pulumi Cloud Provider Package to mark <see cref="T:Pulumi.Resource"/> input
             fields and properties.
             <para/>
             Note: for simple inputs (i.e. <see cref="T:Pulumi.Input`1"/> this should just be placed on the
             property itself.  i.e. <c>[Input] Input&lt;string&gt; Acl</c>.
            
             For collection inputs (i.e. <see cref="T:Pulumi.InputList`1"/> this should be placed on the
             backing field for the property.  i.e.
            
             <code>
                 [Input] private InputList&lt;string&gt; _acls;
                 public InputList&lt;string&gt; Acls
                 {
                     get => _acls ?? (_acls = new InputList&lt;string&gt;());
                     set => _acls = value;
                 }
             </code>
             </summary>
        </member>
        <member name="T:Pulumi.OutputTypeAttribute">
            <summary>
            Attribute used by a Pulumi Cloud Provider Package to mark complex types used for a Resource
            output property.  A complex type must have a single constructor in it marked with the
            <see cref="T:Pulumi.OutputConstructorAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:Pulumi.OutputConstructorAttribute">
             <summary>
             Attribute used by a Pulumi Cloud Provider Package to marks the constructor for a complex
             property type so that it can be instantiated by the Pulumi runtime.
            
             The constructor should contain parameters that map to the resultant <see
             cref="P:Google.Protobuf.WellKnownTypes.Struct.Fields"/> returned by the engine.
             </summary>
        </member>
        <member name="T:Pulumi.OutputConstructorParameterAttribute">
            <summary>
            Attribute used by a Pulumi Cloud Provider Package to mark
            constructor parameters with a name override.
            </summary>
        </member>
        <member name="T:Pulumi.EnumTypeAttribute">
             <summary>
             Attribute used by a Pulumi Cloud Provider Package to mark enum types.
            
             Requirements for a struct-based enum to be (de)serialized are as follows.
             It must:
               * Be a value type (struct) decoratted with EnumTypeAttribute.
               * Have a constructor that takes a single parameter of the underlying type.
                 The constructor can be private.
               * Have an explicit conversion operator that converts the enum type to the underlying type.
               * Have an underlying type of String or Double.
               * Implementing IEquatable, adding ==/=! operators and overriding ToString isn't required,
                 but is recommended and is what our codegen does.
             </summary>
        </member>
        <member name="F:Pulumi.Serialization.Constants.UnknownValue">
            <summary>
            Unknown values are encoded as a distinguished string value.
            </summary>
        </member>
        <member name="F:Pulumi.Serialization.Constants.SpecialSigKey">
            <summary>
            SpecialSigKey is sometimes used to encode type identity inside of a map. See sdk/go/common/resource/properties.go.
            </summary>
        </member>
        <member name="F:Pulumi.Serialization.Constants.SpecialAssetSig">
            <summary>
            SpecialAssetSig is a randomly assigned hash used to identify assets in maps. See sdk/go/common/resource/asset.go.
            </summary>
        </member>
        <member name="F:Pulumi.Serialization.Constants.SpecialArchiveSig">
            <summary>
            SpecialArchiveSig is a randomly assigned hash used to identify archives in maps. See sdk/go/common/resource/asset.go.
            </summary>
        </member>
        <member name="F:Pulumi.Serialization.Constants.SpecialSecretSig">
            <summary>
            SpecialSecretSig is a randomly assigned hash used to identify secrets in maps. See sdk/go/common/resource/properties.go.
            </summary>
        </member>
        <member name="F:Pulumi.Serialization.Constants.SpecialResourceSig">
            <summary>
            SpecialResourceSig is a randomly assigned hash used to identify resources in maps. See sdk/go/common/resource/properties.go.
            </summary>
        </member>
        <member name="F:Pulumi.Serialization.Constants.SpecialOutputValueSig">
            <summary>
            SpecialOutputValueSig is a randomly assigned hash used to identify outputs in maps. See sdk/go/common/resource/properties.go.
            </summary>
        </member>
        <member name="M:Pulumi.Serialization.Serializer.SerializeAsync(System.String,System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Takes in an arbitrary object and serializes it into a uniform form that can converted
            trivially to a protobuf to be passed to the Pulumi engine.
            <para/>
            The allowed 'basis' forms that can be serialized are:
            <list type="number">
            <item><see langword="null"/>s</item>
            <item><see cref="T:System.Boolean"/>s</item>
            <item><see cref="T:System.Int32"/>s</item>
            <item><see cref="T:System.Double"/>s</item>
            <item><see cref="T:System.String"/>s</item>
            <item><see cref="T:Pulumi.Asset"/>s</item>
            <item><see cref="T:Pulumi.Archive"/>s</item>
            <item><see cref="T:Pulumi.Resource"/>s</item>
            <item><see cref="T:Pulumi.ResourceArgs"/></item>
            <item><see cref="T:System.Text.Json.JsonElement"/></item>
            </list>
            Additionally, other more complex objects can be serialized as long as they are built
            out of serializable objects.  These complex objects include:
            <list type="number">
            <item><see cref="T:Pulumi.Input`1"/>s. As long as they are an Input of a serializable type.</item>
            <item><see cref="T:Pulumi.Output`1"/>s. As long as they are an Output of a serializable type.</item>
            <item><see cref="T:System.Collections.IList"/>s. As long as all elements in the list are serializable.</item>
            <item><see cref="T:System.Collections.IDictionary"/>. As long as the key of the dictionary are <see cref="T:System.String"/>s and as long as the value are all serializable.</item>
            </list>
            No other forms are allowed.
            <para/>
            This function will only return values of a very specific shape.  Specifically, the
            result values returned will *only* be one of:
            <para/>
            <list type="number">
            <item><see langword="null"/></item>
            <item><see cref="T:System.Boolean"/></item>
            <item><see cref="T:System.Int32"/></item>
            <item><see cref="T:System.Double"/></item>
            <item><see cref="T:System.String"/></item>
            <item>An <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> containing only these result value types.</item>
            <item>An <see cref="T:System.Collections.Immutable.IImmutableDictionary`2"/> where the keys are strings and
            the values are only these result value types.</item>
            </list>
            No other result type are allowed to be returned.
            </summary>
        </member>
        <member name="M:Pulumi.Serialization.Serializer.InitializedByDefault(System.Collections.IList)">
             <summary>
             Returns whether the input list was initialized as default.
            
             Here, we check whether the generic list is default(ImmutableArray[T])
             and return the IsDefaultOrEmpty property value from it using reflection.
            
             The use of reflection is unavoidable because we cannot _statically_ resolve the
             generic type T in ImmutableArray[T].
             </summary>
        </member>
        <member name="M:Pulumi.Serialization.Serializer.CreateValue(System.Object)">
            <summary>
            Internal for testing purposes.
            </summary>
        </member>
        <member name="M:Pulumi.Serialization.Serializer.ContainsUnknowns(System.Object)">
             <summary>
             Detects encoded `Unknown` values in objects that conform
             to the grammar returned by `SerializeAsync`.
            
             This possibly needs to be revisited to detect `Unknown`
             values before `SerializeAsync` converts them, in the more
             generic Output representation.
             </summary>
        </member>
        <member name="M:Pulumi.Serialization.Serializer.CreateStruct(System.Collections.Immutable.ImmutableDictionary{System.String,System.Object})">
            <summary>
            Given a <see cref="T:System.Collections.Immutable.ImmutableDictionary`2"/> produced by <see cref="M:Pulumi.Serialization.Serializer.SerializeAsync(System.String,System.Object,System.Boolean,System.Boolean,System.Boolean)"/>,
            produces the equivalent <see cref="T:Google.Protobuf.WellKnownTypes.Struct"/> that can be passed to the Pulumi engine.
            </summary>
        </member>
        <member name="M:Pulumi.ResourcePackages.MayReferenceResourceTypes(System.Reflection.AssemblyName)">
            Helper to short-circuit checking assembly names that
            cannot refer to or reference assemblies with resource
            types in principle.
        </member>
        <member name="M:Pulumi.ResourcePackages.MayContainResourceTypes(System.Reflection.Assembly)">
            Helper to short-circuit traversing assemblies that do not
            reference Pulumi.dll and cannot contain resource types in
            principle.
        </member>
        <member name="T:Pulumi.Stack">
            <summary>
            Stack is the root resource for a Pulumi stack. Derive from this class to create your
            stack definitions.
            </summary>
        </member>
        <member name="P:Pulumi.Stack.Root">
             <summary>
             Constant to represent the 'root stack' resource for a Pulumi application.  The purpose
             of this is solely to make it easy to write an <see cref="T:Pulumi.Alias"/> like so:
            
             <c>aliases = { new Alias { Parent = Pulumi.Stack.Root } }</c>
            
             This indicates that the prior name for a resource was created based on it being parented
             directly by the stack itself and no other resources.  Note: this is equivalent to:
            
             <c>aliases = { new Alias { Parent = null } }</c>
            
             However, the former form is preferable as it is more self-descriptive, while the latter
             may look a bit confusing and may incorrectly look like something that could be removed
             without changing semantics.
             </summary>
        </member>
        <member name="F:Pulumi.Stack._rootPulumiStackTypeName">
            <summary>
            <see cref="F:Pulumi.Stack._rootPulumiStackTypeName"/> is the type name that should be used to construct
            the root component in the tree of Pulumi resources allocated by a deployment.This must
            be kept up to date with
            <c>github.com/pulumi/pulumi/sdk/v3/go/common/resource/stack.RootStackType</c>.
            </summary>
        </member>
        <member name="P:Pulumi.Stack.Outputs">
            <summary>
            The outputs of this stack, if the <c>init</c> callback exited normally.
            </summary>
        </member>
        <member name="M:Pulumi.Stack.#ctor(Pulumi.StackOptions)">
            <summary>
            Create a Stack with stack resources defined in derived class constructor.
            </summary>
        </member>
        <member name="M:Pulumi.Stack.#ctor(System.Func{System.Threading.Tasks.Task{System.Collections.Generic.IDictionary{System.String,System.Object}}},Pulumi.StackOptions)">
            <summary>
            Create a Stack with stack resources created by the <c>init</c> callback.
            An instance of this will be automatically created when any <see
            cref="M:Pulumi.Deployment.RunAsync(System.Action)"/> overload is called.
            </summary>
        </member>
        <member name="M:Pulumi.Stack.RegisterPropertyOutputs">
            <summary>
            Inspect all public properties of the stack to find outputs. Validate the values and register them as stack outputs.
            </summary>
        </member>
        <member name="T:Pulumi.Testing.IMocks">
            <summary>
            Hooks to mock the engine that provide test doubles for offline unit testing of stacks.
            </summary>
        </member>
        <member name="M:Pulumi.Testing.IMocks.NewResourceAsync(Pulumi.Testing.MockResourceArgs)">
            <summary>
            Invoked when a new resource is created by the program.
            </summary>
            <param name="args">MockResourceArgs</param>
            <returns>A tuple of a resource identifier and resource state. State can be either a POCO
            or a dictionary bag. The returned ID may be null for component resources.</returns>
        </member>
        <member name="M:Pulumi.Testing.IMocks.CallAsync(Pulumi.Testing.MockCallArgs)">
            <summary>
            Invoked when the program needs to call a provider to load data (e.g., to retrieve an existing
            resource).
            </summary>
            <param name="args">MockCallArgs</param>
            <returns>Invocation result, can be either a POCO or a dictionary bag.</returns>
        </member>
        <member name="M:Pulumi.Testing.IMocks.RegisterResourceOutputs(Pulumi.Testing.MockRegisterResourceOutputsRequest)">
            <summary>
            Invoked when component resources (including instances of Stack) register their outputs
            </summary>
            <param name="args">MockRegisterResourceOutputsRequest</param>
        </member>
        <member name="T:Pulumi.Testing.MockResourceArgs">
            <summary>
            MockResourceArgs for use in NewResourceAsync
            </summary>
        </member>
        <member name="P:Pulumi.Testing.MockResourceArgs.Type">
            <summary>
            Resource type name.
            </summary>
        </member>
        <member name="P:Pulumi.Testing.MockResourceArgs.Name">
            <summary>
            Resource Name.
            </summary>
        </member>
        <member name="P:Pulumi.Testing.MockResourceArgs.Inputs">
            <summary>
            Dictionary of resource input properties.
            </summary>
        </member>
        <member name="P:Pulumi.Testing.MockResourceArgs.Provider">
            <summary>
            Provider.
            </summary>
        </member>
        <member name="P:Pulumi.Testing.MockResourceArgs.Id">
            <summary>
            Resource identifier.
            </summary>
        </member>
        <member name="T:Pulumi.Testing.MockCallArgs">
            <summary>
            MockCallArgs for use in CallAsync
            </summary>
        </member>
        <member name="P:Pulumi.Testing.MockCallArgs.Token">
            <summary>
            Resource identifier.
            </summary>
        </member>
        <member name="P:Pulumi.Testing.MockCallArgs.Args">
            <summary>
            Dictionary of input arguments.
            </summary>
        </member>
        <member name="P:Pulumi.Testing.MockCallArgs.Provider">
            <summary>
            Provider.
            </summary>
        </member>
        <member name="T:Pulumi.Testing.MockRegisterResourceOutputsRequest">
            <summary>
            MockRegisterResourceOutputsRequest for use in RegisterOutputRequest
            </summary>
        </member>
        <member name="F:Pulumi.Testing.MockRegisterResourceOutputsRequest.Urn">
            <summary>
            The URN of the resource of which the outputs are being registered
            </summary>
        </member>
        <member name="F:Pulumi.Testing.MockRegisterResourceOutputsRequest.Outputs">
            <summary>
            The outputs which have been registered by the resource
            </summary>
        </member>
        <member name="T:Pulumi.Testing.TestOptions">
            <summary>
            Optional settings for <see cref="M:Pulumi.Deployment.TestAsync``1(Pulumi.Testing.IMocks,Pulumi.Testing.TestOptions)"/>.
            </summary>
        </member>
        <member name="P:Pulumi.Testing.TestOptions.ProjectName">
            <summary>
            Project name. Defaults to <b>"project"</b> if not specified.
            </summary>
        </member>
        <member name="P:Pulumi.Testing.TestOptions.RootDirectory">
            <summary>
            Root directory. Defaults to <b>"rootDirectory"</b> if not specified.
            </summary>
        </member>
        <member name="P:Pulumi.Testing.TestOptions.StackName">
            <summary>
            Stack name. Defaults to <b>"stack"</b> if not specified.
            </summary>
        </member>
        <member name="P:Pulumi.Testing.TestOptions.IsPreview">
            <summary>
            Whether the test runs in Preview mode. Defaults to <b>true</b> if not specified.
            </summary>
        </member>
        <member name="P:Pulumi.Testing.TestOptions.OrganizationName">
            <summary>
            Organization name. Defaults to <b>"organization"</b> if not specified.
            </summary>
        </member>
        <member name="T:Pulumi.Testing.TestStack">
            <summary>
            TestStack is used internally to implement Deployment.TestAsync overload where the user has only a function
            that creates resources, not a stack definition. This Stack is filtered out from the created resources
            and it is used to obtain the outputs from the function that created the resources, if any.
            </summary>
        </member>
        <member name="T:Google.Rpc.StatusReflection">
            <summary>Holder for reflection information generated from google/protobuf/status.proto</summary>
        </member>
        <member name="P:Google.Rpc.StatusReflection.Descriptor">
            <summary>File descriptor for google/protobuf/status.proto</summary>
        </member>
        <member name="T:Google.Rpc.Status">
             <summary>
             The `Status` type defines a logical error model that is suitable for different
             programming environments, including REST APIs and RPC APIs. It is used by
             [gRPC](https://github.com/grpc). The error model is designed to be:
            
             - Simple to use and understand for most users
             - Flexible enough to meet unexpected needs
            
             # Overview
            
             The `Status` message contains three pieces of data: error code, error message,
             and error details. The error code should be an enum value of
             [google.rpc.Code][google.rpc.Code], but it may accept additional error codes if needed.  The
             error message should be a developer-facing English message that helps
             developers *understand* and *resolve* the error. If a localized user-facing
             error message is needed, put the localized message in the error details or
             localize it in the client. The optional error details may contain arbitrary
             information about the error. There is a predefined set of error detail types
             in the package `google.rpc` which can be used for common error conditions.
            
             # Language mapping
            
             The `Status` message is the logical representation of the error model, but it
             is not necessarily the actual wire format. When the `Status` message is
             exposed in different client libraries and different wire protocols, it can be
             mapped differently. For example, it will likely be mapped to some exceptions
             in Java, but more likely mapped to some error codes in C.
            
             # Other uses
            
             The error model and the `Status` message can be used in a variety of
             environments, either with or without APIs, to provide a
             consistent developer experience across different environments.
            
             Example uses of this error model include:
            
             - Partial errors. If a service needs to return partial errors to the client,
                 it may embed the `Status` in the normal response to indicate the partial
                 errors.
            
             - Workflow errors. A typical workflow has multiple steps. Each step may
                 have a `Status` message for error reporting purpose.
            
             - Batch operations. If a client uses batch request and batch response, the
                 `Status` message should be used directly inside batch response, one for
                 each error sub-response.
            
             - Asynchronous operations. If an API call embeds asynchronous operation
                 results in its response, the status of those operations should be
                 represented directly using the `Status` message.
            
             - Logging. If some API errors are stored in logs, the message `Status` could
                 be used directly after any stripping needed for security/privacy reasons.
             </summary>
        </member>
        <member name="F:Google.Rpc.Status.CodeFieldNumber">
            <summary>Field number for the "code" field.</summary>
        </member>
        <member name="P:Google.Rpc.Status.Code">
            <summary>
            The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
            </summary>
        </member>
        <member name="F:Google.Rpc.Status.MessageFieldNumber">
            <summary>Field number for the "message" field.</summary>
        </member>
        <member name="P:Google.Rpc.Status.Message">
            <summary>
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
            </summary>
        </member>
        <member name="F:Google.Rpc.Status.DetailsFieldNumber">
            <summary>Field number for the "details" field.</summary>
        </member>
        <member name="P:Google.Rpc.Status.Details">
            <summary>
            A list of messages that carry the error details.  There will be a
            common set of message types for APIs to use.
            </summary>
        </member>
        <member name="T:Pulumirpc.AliasReflection">
            <summary>Holder for reflection information generated from pulumi/alias.proto</summary>
        </member>
        <member name="P:Pulumirpc.AliasReflection.Descriptor">
            <summary>File descriptor for pulumi/alias.proto</summary>
        </member>
        <member name="F:Pulumirpc.Alias.UrnFieldNumber">
            <summary>Field number for the "urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.Alias.Urn">
            <summary>
            The previous urn to alias to.
            </summary>
        </member>
        <member name="P:Pulumirpc.Alias.HasUrn">
            <summary>Gets whether the "urn" field is set</summary>
        </member>
        <member name="M:Pulumirpc.Alias.ClearUrn">
            <summary> Clears the value of the oneof if it's currently set to "urn" </summary>
        </member>
        <member name="F:Pulumirpc.Alias.SpecFieldNumber">
            <summary>Field number for the "spec" field.</summary>
        </member>
        <member name="P:Pulumirpc.Alias.Spec">
            <summary>
            An alias specification.
            </summary>
        </member>
        <member name="T:Pulumirpc.Alias.AliasOneofCase">
            <summary>Enum of possible cases for the "alias" oneof.</summary>
        </member>
        <member name="T:Pulumirpc.Alias.Types">
            <summary>Container for nested types declared in the Alias message type.</summary>
        </member>
        <member name="F:Pulumirpc.Alias.Types.Spec.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.Alias.Types.Spec.Name">
            <summary>
            The previous name of the resource.  If none is provided, we will use the current name.
            </summary>
        </member>
        <member name="F:Pulumirpc.Alias.Types.Spec.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="P:Pulumirpc.Alias.Types.Spec.Type">
            <summary>
            The previous type of the resource. If none is provided, we will use the current resoource type.
            </summary>
        </member>
        <member name="F:Pulumirpc.Alias.Types.Spec.StackFieldNumber">
            <summary>Field number for the "stack" field.</summary>
        </member>
        <member name="P:Pulumirpc.Alias.Types.Spec.Stack">
            <summary>
            The previous stack of the resource. If not set, the current stack of the resource is used.
            </summary>
        </member>
        <member name="F:Pulumirpc.Alias.Types.Spec.ProjectFieldNumber">
            <summary>Field number for the "project" field.</summary>
        </member>
        <member name="P:Pulumirpc.Alias.Types.Spec.Project">
            <summary>
            The previous project of the resource. If not set, the current project of the resource is used.
            </summary>
        </member>
        <member name="F:Pulumirpc.Alias.Types.Spec.ParentUrnFieldNumber">
            <summary>Field number for the "parentUrn" field.</summary>
        </member>
        <member name="P:Pulumirpc.Alias.Types.Spec.ParentUrn">
            <summary>
            The urn of the previous parent.
            </summary>
        </member>
        <member name="P:Pulumirpc.Alias.Types.Spec.HasParentUrn">
            <summary>Gets whether the "parentUrn" field is set</summary>
        </member>
        <member name="M:Pulumirpc.Alias.Types.Spec.ClearParentUrn">
            <summary> Clears the value of the oneof if it's currently set to "parentUrn" </summary>
        </member>
        <member name="F:Pulumirpc.Alias.Types.Spec.NoParentFieldNumber">
            <summary>Field number for the "noParent" field.</summary>
        </member>
        <member name="P:Pulumirpc.Alias.Types.Spec.NoParent">
            <summary>
            Used to indicate the resource previously had no parent. If false this property is ignored.
            </summary>
        </member>
        <member name="P:Pulumirpc.Alias.Types.Spec.HasNoParent">
            <summary>Gets whether the "noParent" field is set</summary>
        </member>
        <member name="M:Pulumirpc.Alias.Types.Spec.ClearNoParent">
            <summary> Clears the value of the oneof if it's currently set to "noParent" </summary>
        </member>
        <member name="T:Pulumirpc.Alias.Types.Spec.ParentOneofCase">
            <summary>Enum of possible cases for the "parent" oneof.</summary>
        </member>
        <member name="T:Pulumirpc.AnalyzerReflection">
            <summary>Holder for reflection information generated from pulumi/analyzer.proto</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerReflection.Descriptor">
            <summary>File descriptor for pulumi/analyzer.proto</summary>
        </member>
        <member name="T:Pulumirpc.EnforcementLevel">
            <summary>
            EnforcementLevel indicates the severity of a policy violation.
            </summary>
        </member>
        <member name="F:Pulumirpc.EnforcementLevel.Advisory">
            <summary>
            Displayed to users, but does not block deployment.
            </summary>
        </member>
        <member name="F:Pulumirpc.EnforcementLevel.Mandatory">
            <summary>
            Stops deployment, cannot be overridden.
            </summary>
        </member>
        <member name="F:Pulumirpc.EnforcementLevel.Disabled">
            <summary>
            Disabled policies do not run during a deployment.
            </summary>
        </member>
        <member name="F:Pulumirpc.EnforcementLevel.Remediate">
            <summary>
            Remediated policies actually fixes problems instead of issuing diagnostics.
            </summary>
        </member>
        <member name="T:Pulumirpc.PolicyType">
            <summary>
            PolicyType indicates the type of a policy.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyType.Unknown">
            <summary>
            Unknown policy type.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyType.Resource">
            <summary>
            A policy that validates a resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyType.Stack">
            <summary>
            A policy that validates a stack.
            </summary>
        </member>
        <member name="T:Pulumirpc.PolicySeverity">
            <summary>
            PolicySeverity indicates the severity of a policy.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicySeverity.Unspecified">
            <summary>
            Unspecified severity.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicySeverity.Low">
            <summary>
            Low severity.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicySeverity.Medium">
            <summary>
            Medium severity.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicySeverity.High">
            <summary>
            High severity.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicySeverity.Critical">
            <summary>
            Critical severity.
            </summary>
        </member>
        <member name="T:Pulumirpc.AnalyzerStackConfigureRequest">
            <summary>
            `AnalyzerStackConfigureRequest` is the message for the stack configuration of the stack being analyzed.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerStackConfigureRequest.StackFieldNumber">
            <summary>Field number for the "stack" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerStackConfigureRequest.Stack">
            <summary>
            The stack name being analyzed.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerStackConfigureRequest.ProjectFieldNumber">
            <summary>Field number for the "project" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerStackConfigureRequest.Project">
            <summary>
            The project name of the stack being analyzed.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerStackConfigureRequest.OrganizationFieldNumber">
            <summary>Field number for the "organization" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerStackConfigureRequest.Organization">
            <summary>
            The organization name of the stack being analyzed.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerStackConfigureRequest.DryRunFieldNumber">
            <summary>Field number for the "dry_run" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerStackConfigureRequest.DryRun">
            <summary>
            True if this is a preview/dry run.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerStackConfigureRequest.ConfigSecretKeysFieldNumber">
            <summary>Field number for the "config_secret_keys" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerStackConfigureRequest.ConfigSecretKeys">
            <summary>
            A list of configuration keys whose values should be treated as secrets.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerStackConfigureRequest.ConfigFieldNumber">
            <summary>Field number for the "config" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerStackConfigureRequest.Config">
            <summary>
            The configuration of the stack being analyzed.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerStackConfigureRequest.TagsFieldNumber">
            <summary>Field number for the "tags" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerStackConfigureRequest.Tags">
            <summary>
            Tags for the current stack.
            </summary>
        </member>
        <member name="T:Pulumirpc.AnalyzerStackConfigureResponse">
            <summary>
            `AnalyzerStackConfigureResponse` is the type of responses sent by a [](pulumirpc.Analyzer.ConfigureStack) call.
            </summary>
        </member>
        <member name="T:Pulumirpc.AnalyzerHandshakeRequest">
            <summary>
            `AnalyzerHandshakeRequest` is the type of requests sent as part of a [](pulumirpc.Analyzer.Handshake) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerHandshakeRequest.EngineAddressFieldNumber">
            <summary>Field number for the "engine_address" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerHandshakeRequest.EngineAddress">
            <summary>
            The gRPC address of the engine handshaking with the analyzer. At a minimum, this address will expose an instance
            of the [](pulumirpc.Engine) service.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerHandshakeRequest.RootDirectoryFieldNumber">
            <summary>Field number for the "root_directory" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerHandshakeRequest.RootDirectory">
            <summary>
            A *root directory* where the analyzer's binary, `PulumiPolicy.yaml`, or other identifying source code is located.
            In the event that the analyzer is *not* being booted by the engine (e.g. in the case that the engine has been
            asked to attach to an existing running analyzer instance via a host/port number), this field will be empty.
            </summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerHandshakeRequest.HasRootDirectory">
            <summary>Gets whether the "root_directory" field is set</summary>
        </member>
        <member name="M:Pulumirpc.AnalyzerHandshakeRequest.ClearRootDirectory">
            <summary>Clears the value of the "root_directory" field</summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerHandshakeRequest.ProgramDirectoryFieldNumber">
            <summary>Field number for the "program_directory" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerHandshakeRequest.ProgramDirectory">
            <summary>
            A *program directory* in which the analyzer should execute. This is generally a subdirectory of the root
            directory, though this is not required. In the event that the analyzer is *not* being booted by the engine (e.g.
            in the case that the engine has been asked to attach to an existing running analyzer instance via a host/port
            number), this field will be empty.
            </summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerHandshakeRequest.HasProgramDirectory">
            <summary>Gets whether the "program_directory" field is set</summary>
        </member>
        <member name="M:Pulumirpc.AnalyzerHandshakeRequest.ClearProgramDirectory">
            <summary>Clears the value of the "program_directory" field</summary>
        </member>
        <member name="T:Pulumirpc.AnalyzerHandshakeResponse">
            <summary>
            `AnalyzerHandshakeResponse` is the type of responses sent by a [](pulumirpc.Analyzer.Handshake) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzeRequest.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzeRequest.Type">
            <summary>
            the type token of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzeRequest.PropertiesFieldNumber">
            <summary>Field number for the "properties" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzeRequest.Properties">
            <summary>
            the full properties to use for validation.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzeRequest.UrnFieldNumber">
            <summary>Field number for the "urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzeRequest.Urn">
            <summary>
            the URN of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzeRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzeRequest.Name">
            <summary>
            the name for the resource's URN.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzeRequest.OptionsFieldNumber">
            <summary>Field number for the "options" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzeRequest.Options">
            <summary>
            the resource options.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzeRequest.ProviderFieldNumber">
            <summary>Field number for the "provider" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzeRequest.Provider">
            <summary>
            the resource's provider.
            </summary>
        </member>
        <member name="T:Pulumirpc.AnalyzerResource">
            <summary>
            AnalyzerResource defines the view of a Pulumi-managed resource as sent to Analyzers. The properties
            of the resource are specific to the type of analysis being performed. See the Analyzer
            service definition for more information.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerResource.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerResource.Type">
            <summary>
            the type token of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerResource.PropertiesFieldNumber">
            <summary>Field number for the "properties" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerResource.Properties">
            <summary>
            the full properties to use for validation.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerResource.UrnFieldNumber">
            <summary>Field number for the "urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerResource.Urn">
            <summary>
            the URN of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerResource.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerResource.Name">
            <summary>
            the name for the resource's URN.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerResource.OptionsFieldNumber">
            <summary>Field number for the "options" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerResource.Options">
            <summary>
            the resource options.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerResource.ProviderFieldNumber">
            <summary>Field number for the "provider" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerResource.Provider">
            <summary>
            the resource's provider.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerResource.ParentFieldNumber">
            <summary>Field number for the "parent" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerResource.Parent">
            <summary>
            an optional parent URN that this child resource belongs to.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerResource.DependenciesFieldNumber">
            <summary>Field number for the "dependencies" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerResource.Dependencies">
            <summary>
            a list of URNs that this resource depends on.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerResource.PropertyDependenciesFieldNumber">
            <summary>Field number for the "propertyDependencies" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerResource.PropertyDependencies">
            <summary>
            a map from property keys to the dependencies of the property.
            </summary>
        </member>
        <member name="T:Pulumirpc.AnalyzerResourceOptions">
            <summary>
            AnalyzerResourceOptions defines the options associated with a resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerResourceOptions.ProtectFieldNumber">
            <summary>Field number for the "protect" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerResourceOptions.Protect">
            <summary>
            true if the resource should be marked protected.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerResourceOptions.IgnoreChangesFieldNumber">
            <summary>Field number for the "ignoreChanges" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerResourceOptions.IgnoreChanges">
            <summary>
            a list of property names to ignore during changes.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerResourceOptions.DeleteBeforeReplaceFieldNumber">
            <summary>Field number for the "deleteBeforeReplace" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerResourceOptions.DeleteBeforeReplace">
            <summary>
            true if this resource should be deleted before replacement.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerResourceOptions.DeleteBeforeReplaceDefinedFieldNumber">
            <summary>Field number for the "deleteBeforeReplaceDefined" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerResourceOptions.DeleteBeforeReplaceDefined">
            <summary>
            true if the deleteBeforeReplace property should be treated as defined even if it is false.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerResourceOptions.AdditionalSecretOutputsFieldNumber">
            <summary>Field number for the "additionalSecretOutputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerResourceOptions.AdditionalSecretOutputs">
            <summary>
            a list of output properties that should also be treated as secret, in addition to ones we detect.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerResourceOptions.AliasesFieldNumber">
            <summary>Field number for the "aliases" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerResourceOptions.Aliases">
            <summary>
            a list of additional URNs that shoud be considered the same.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerResourceOptions.CustomTimeoutsFieldNumber">
            <summary>Field number for the "customTimeouts" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerResourceOptions.CustomTimeouts">
            <summary>
            a config block that will be used to configure timeouts for CRUD operations.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerResourceOptions.ParentFieldNumber">
            <summary>Field number for the "parent" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerResourceOptions.Parent">
            <summary>
            an optional parent URN that this child resource belongs to.
            </summary>
        </member>
        <member name="T:Pulumirpc.AnalyzerResourceOptions.Types">
            <summary>Container for nested types declared in the AnalyzerResourceOptions message type.</summary>
        </member>
        <member name="T:Pulumirpc.AnalyzerResourceOptions.Types.CustomTimeouts">
            <summary>
            CustomTimeouts allows a user to be able to create a set of custom timeout parameters.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerResourceOptions.Types.CustomTimeouts.CreateFieldNumber">
            <summary>Field number for the "create" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerResourceOptions.Types.CustomTimeouts.Create">
            <summary>
            The create resource timeout in seconds.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerResourceOptions.Types.CustomTimeouts.UpdateFieldNumber">
            <summary>Field number for the "update" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerResourceOptions.Types.CustomTimeouts.Update">
            <summary>
            The update resource timeout in seconds.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerResourceOptions.Types.CustomTimeouts.DeleteFieldNumber">
            <summary>Field number for the "delete" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerResourceOptions.Types.CustomTimeouts.Delete">
            <summary>
            The delete resource timeout in seconds.
            </summary>
        </member>
        <member name="T:Pulumirpc.AnalyzerProviderResource">
            <summary>
            AnalyzerProviderResource provides information about a resource's provider.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerProviderResource.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerProviderResource.Type">
            <summary>
            the type token of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerProviderResource.PropertiesFieldNumber">
            <summary>Field number for the "properties" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerProviderResource.Properties">
            <summary>
            the full properties to use for validation.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerProviderResource.UrnFieldNumber">
            <summary>Field number for the "urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerProviderResource.Urn">
            <summary>
            the URN of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerProviderResource.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerProviderResource.Name">
            <summary>
            the name for the resource's URN.
            </summary>
        </member>
        <member name="T:Pulumirpc.AnalyzerPropertyDependencies">
            <summary>
            AnalyzerPropertyDependencies describes the resources that a particular property depends on.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerPropertyDependencies.UrnsFieldNumber">
            <summary>Field number for the "urns" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerPropertyDependencies.Urns">
            <summary>
            A list of URNs this property depends on.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzeStackRequest.ResourcesFieldNumber">
            <summary>Field number for the "resources" field.</summary>
        </member>
        <member name="F:Pulumirpc.AnalyzeResponse.DiagnosticsFieldNumber">
            <summary>Field number for the "diagnostics" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzeResponse.Diagnostics">
            <summary>
            information about policy violations.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzeResponse.NotApplicableFieldNumber">
            <summary>Field number for the "not_applicable" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzeResponse.NotApplicable">
            <summary>
            information about policies that were not applicable.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzeDiagnostic.PolicyNameFieldNumber">
            <summary>Field number for the "policyName" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzeDiagnostic.PolicyName">
            <summary>
            Name of the violated policy.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzeDiagnostic.PolicyPackNameFieldNumber">
            <summary>Field number for the "policyPackName" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzeDiagnostic.PolicyPackName">
            <summary>
            Name of the policy pack the policy is in.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzeDiagnostic.PolicyPackVersionFieldNumber">
            <summary>Field number for the "policyPackVersion" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzeDiagnostic.PolicyPackVersion">
            <summary>
            Version of the policy pack.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzeDiagnostic.DescriptionFieldNumber">
            <summary>Field number for the "description" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzeDiagnostic.Description">
            <summary>
            Description of policy rule. e.g., "encryption enabled."
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzeDiagnostic.MessageFieldNumber">
            <summary>Field number for the "message" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzeDiagnostic.Message">
            <summary>
            Message to display on policy violation, e.g., remediation steps.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzeDiagnostic.EnforcementLevelFieldNumber">
            <summary>Field number for the "enforcementLevel" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzeDiagnostic.EnforcementLevel">
            <summary>
            Severity of the policy violation.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzeDiagnostic.UrnFieldNumber">
            <summary>Field number for the "urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzeDiagnostic.Urn">
            <summary>
            URN of the resource that violates the policy.
            </summary>
        </member>
        <member name="T:Pulumirpc.Remediation">
            <summary>
            Remediation is a single resource remediation result.
            </summary>
        </member>
        <member name="F:Pulumirpc.Remediation.PolicyNameFieldNumber">
            <summary>Field number for the "policyName" field.</summary>
        </member>
        <member name="P:Pulumirpc.Remediation.PolicyName">
            <summary>
            Name of the policy that performed the remediation.
            </summary>
        </member>
        <member name="F:Pulumirpc.Remediation.PolicyPackNameFieldNumber">
            <summary>Field number for the "policyPackName" field.</summary>
        </member>
        <member name="P:Pulumirpc.Remediation.PolicyPackName">
            <summary>
            Name of the policy pack the transform is in.
            </summary>
        </member>
        <member name="F:Pulumirpc.Remediation.PolicyPackVersionFieldNumber">
            <summary>Field number for the "policyPackVersion" field.</summary>
        </member>
        <member name="P:Pulumirpc.Remediation.PolicyPackVersion">
            <summary>
            Version of the policy pack.
            </summary>
        </member>
        <member name="F:Pulumirpc.Remediation.DescriptionFieldNumber">
            <summary>Field number for the "description" field.</summary>
        </member>
        <member name="P:Pulumirpc.Remediation.Description">
            <summary>
            Description of transform rule. e.g., "auto-tag resources."
            </summary>
        </member>
        <member name="F:Pulumirpc.Remediation.PropertiesFieldNumber">
            <summary>Field number for the "properties" field.</summary>
        </member>
        <member name="P:Pulumirpc.Remediation.Properties">
            <summary>
            the transformed properties to use.
            </summary>
        </member>
        <member name="F:Pulumirpc.Remediation.DiagnosticFieldNumber">
            <summary>Field number for the "diagnostic" field.</summary>
        </member>
        <member name="P:Pulumirpc.Remediation.Diagnostic">
            <summary>
            an optional warning diagnostic to emit, if a transform failed.
            </summary>
        </member>
        <member name="T:Pulumirpc.RemediateResponse">
            <summary>
            RemediateResponse contains a sequence of remediations applied, in order.
            </summary>
        </member>
        <member name="F:Pulumirpc.RemediateResponse.RemediationsFieldNumber">
            <summary>Field number for the "remediations" field.</summary>
        </member>
        <member name="P:Pulumirpc.RemediateResponse.Remediations">
            <summary>
            the list of remediations that were applied.
            </summary>
        </member>
        <member name="F:Pulumirpc.RemediateResponse.NotApplicableFieldNumber">
            <summary>Field number for the "not_applicable" field.</summary>
        </member>
        <member name="P:Pulumirpc.RemediateResponse.NotApplicable">
            <summary>
            information about policies that were not applicable.
            </summary>
        </member>
        <member name="T:Pulumirpc.AnalyzerInfo">
            <summary>
            AnalyzerInfo provides metadata about a PolicyPack inside an analyzer.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerInfo.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerInfo.Name">
            <summary>
            Name of the PolicyPack.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerInfo.DisplayNameFieldNumber">
            <summary>Field number for the "displayName" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerInfo.DisplayName">
            <summary>
            Pretty name for the PolicyPack.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerInfo.PoliciesFieldNumber">
            <summary>Field number for the "policies" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerInfo.Policies">
            <summary>
            Metadata about policies contained in PolicyPack.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerInfo.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerInfo.Version">
            <summary>
            Version of the Policy Pack.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerInfo.SupportsConfigFieldNumber">
            <summary>Field number for the "supportsConfig" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerInfo.SupportsConfig">
            <summary>
            Whether the Policy Pack supports config.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerInfo.InitialConfigFieldNumber">
            <summary>Field number for the "initialConfig" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerInfo.InitialConfig">
            <summary>
            Map of policy name to config.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerInfo.DescriptionFieldNumber">
            <summary>Field number for the "description" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerInfo.Description">
            <summary>
            Description of the policy pack.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerInfo.ReadmeFieldNumber">
            <summary>Field number for the "readme" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerInfo.Readme">
            <summary>
            README text for the policy pack.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerInfo.ProviderFieldNumber">
            <summary>Field number for the "provider" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerInfo.Provider">
            <summary>
            Cloud provider/platform associated with the policy pack.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerInfo.TagsFieldNumber">
            <summary>Field number for the "tags" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerInfo.Tags">
            <summary>
            Tags for this policy pack.
            </summary>
        </member>
        <member name="F:Pulumirpc.AnalyzerInfo.RepositoryFieldNumber">
            <summary>Field number for the "repository" field.</summary>
        </member>
        <member name="P:Pulumirpc.AnalyzerInfo.Repository">
            <summary>
            A URL to the repository where the policy pack is defined.
            </summary>
        </member>
        <member name="T:Pulumirpc.PolicyInfo">
            <summary>
            PolicyInfo provides metadata about a policy within a Policy Pack.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyInfo.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyInfo.Name">
            <summary>
            Name of the policy.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyInfo.DisplayNameFieldNumber">
            <summary>Field number for the "displayName" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyInfo.DisplayName">
            <summary>
            Pretty name for the policy.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyInfo.DescriptionFieldNumber">
            <summary>Field number for the "description" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyInfo.Description">
            <summary>
            Description of policy rule. e.g., "encryption enabled."
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyInfo.MessageFieldNumber">
            <summary>Field number for the "message" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyInfo.Message">
            <summary>
            Message to display on policy violation, e.g., remediation steps.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyInfo.EnforcementLevelFieldNumber">
            <summary>Field number for the "enforcementLevel" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyInfo.EnforcementLevel">
            <summary>
            Severity of the policy violation.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyInfo.ConfigSchemaFieldNumber">
            <summary>Field number for the "configSchema" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyInfo.ConfigSchema">
            <summary>
            Config schema for the policy.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyInfo.PolicyTypeFieldNumber">
            <summary>Field number for the "policy_type" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyInfo.PolicyType">
            <summary>
            Type of the policy.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyInfo.SeverityFieldNumber">
            <summary>Field number for the "severity" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyInfo.Severity">
            <summary>
            Severity of the policy.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyInfo.FrameworkFieldNumber">
            <summary>Field number for the "framework" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyInfo.Framework">
            <summary>
            Compliance framework that this policy belongs to.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyInfo.TagsFieldNumber">
            <summary>Field number for the "tags" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyInfo.Tags">
            <summary>
            Tags associated with the policy.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyInfo.RemediationStepsFieldNumber">
            <summary>Field number for the "remediation_steps" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyInfo.RemediationSteps">
            <summary>
            A description of the steps to take to remediate a policy violation.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyInfo.UrlFieldNumber">
            <summary>Field number for the "url" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyInfo.Url">
            <summary>
            A URL to more information about the policy.
            </summary>
        </member>
        <member name="T:Pulumirpc.PolicyConfigSchema">
            <summary>
            PolicyConfigSchema provides the schema for a policy's configuration.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyConfigSchema.PropertiesFieldNumber">
            <summary>Field number for the "properties" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyConfigSchema.Properties">
            <summary>
            JSON schema for each property.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyConfigSchema.RequiredFieldNumber">
            <summary>Field number for the "required" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyConfigSchema.Required">
            <summary>
            Required properties.
            </summary>
        </member>
        <member name="T:Pulumirpc.PolicyConfig">
            <summary>
            PolicyConfig provides configuration for a policy.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyConfig.EnforcementLevelFieldNumber">
            <summary>Field number for the "enforcementLevel" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyConfig.EnforcementLevel">
            <summary>
            Enforcement level of the policy.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyConfig.PropertiesFieldNumber">
            <summary>Field number for the "properties" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyConfig.Properties">
            <summary>
            Configuration properties of the policy.
            </summary>
        </member>
        <member name="T:Pulumirpc.ConfigureAnalyzerRequest">
            <summary>
            ConfigureAnalyzerRequest provides configuration information to the analyzer.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConfigureAnalyzerRequest.PolicyConfigFieldNumber">
            <summary>Field number for the "policyConfig" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConfigureAnalyzerRequest.PolicyConfig">
            <summary>
            Map of policy name to config.
            </summary>
        </member>
        <member name="T:Pulumirpc.PolicyComplianceFramework">
            <summary>
            PolicyComplianceFramework provides information about the compliance framework that a policy belongs to.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyComplianceFramework.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyComplianceFramework.Name">
            <summary>
            The compliance framework name.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyComplianceFramework.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyComplianceFramework.Version">
            <summary>
            The compliance framework version.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyComplianceFramework.ReferenceFieldNumber">
            <summary>Field number for the "reference" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyComplianceFramework.Reference">
            <summary>
            The compliance framework reference.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyComplianceFramework.SpecificationFieldNumber">
            <summary>Field number for the "specification" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyComplianceFramework.Specification">
            <summary>
            The compliance framework specification.
            </summary>
        </member>
        <member name="T:Pulumirpc.PolicyNotApplicable">
            <summary>
            PolicyNotApplicable describes a policy that was not applicable, including an optional reason why.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyNotApplicable.PolicyNameFieldNumber">
            <summary>Field number for the "policy_name" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyNotApplicable.PolicyName">
            <summary>
            The name of the policy that was not applicable.
            </summary>
        </member>
        <member name="F:Pulumirpc.PolicyNotApplicable.ReasonFieldNumber">
            <summary>Field number for the "reason" field.</summary>
        </member>
        <member name="P:Pulumirpc.PolicyNotApplicable.Reason">
            <summary>
            An optional reason why the policy was not applicable.
            </summary>
        </member>
        <member name="T:Pulumirpc.Analyzer">
            <summary>
            Analyzer provides a pluggable interface for checking resource definitions against some number of
            resource policies. It is intentionally open-ended, allowing for implementations that check
            everything from raw resource definitions to entire projects/stacks/snapshots for arbitrary
            issues -- style, policy, correctness, security, and so on.
            </summary>
        </member>
        <member name="P:Pulumirpc.Analyzer.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Pulumirpc.Analyzer.AnalyzerBase">
            <summary>Base class for server-side implementations of Analyzer</summary>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerBase.Analyze(Pulumirpc.AnalyzeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Analyze analyzes a single resource object, and returns any errors that it finds.
            Called with the "inputs" to the resource, before it is updated.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerBase.AnalyzeStack(Pulumirpc.AnalyzeStackRequest,Grpc.Core.ServerCallContext)">
            <summary>
            AnalyzeStack analyzes all resources within a stack, at the end of a successful
            preview or update. The provided resources are the "outputs", after any mutations
            have taken place.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerBase.Remediate(Pulumirpc.AnalyzeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Remediate optionally transforms a single resource object. This effectively rewrites
            a single resource object's properties instead of using what was generated by the program.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerBase.GetAnalyzerInfo(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.ServerCallContext)">
            <summary>
            GetAnalyzerInfo returns metadata about the analyzer (e.g., list of policies contained).
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerBase.GetPluginInfo(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.ServerCallContext)">
            <summary>
            GetPluginInfo returns generic information about this plugin, like its version.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerBase.Configure(Pulumirpc.ConfigureAnalyzerRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Configure configures the analyzer, passing configuration properties for each policy.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerBase.Handshake(Pulumirpc.AnalyzerHandshakeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            `Handshake` is the first call made by the engine to an analyzer. It is used to pass the engine's address to the
            analyzer so that it may establish its own connections back, and to establish protocol configuration that will be
            used to communicate between the two parties.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerBase.ConfigureStack(Pulumirpc.AnalyzerStackConfigureRequest,Grpc.Core.ServerCallContext)">
            <summary>
            `ConfigureStack` is always called if the engine is using the analyzer to analyze resources in a specific stack.
            This method is not always called, for example if the engine is just booting the analyzer up to call
            GetAnalyzerInfo.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerBase.Cancel(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.ServerCallContext)">
            <summary>
            Cancel signals the analyzer to gracefully shut down and abort any ongoing analysis operations.
            Operations aborted in this way will return an error. Since Cancel is advisory and non-blocking,
            it is up to the host to decide how long to wait after Cancel is called before (e.g.)
            hard-closing any gRPC connection.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="T:Pulumirpc.Analyzer.AnalyzerClient">
            <summary>Client for Analyzer</summary>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for Analyzer</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for Analyzer that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.Analyze(Pulumirpc.AnalyzeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Analyze analyzes a single resource object, and returns any errors that it finds.
            Called with the "inputs" to the resource, before it is updated.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.Analyze(Pulumirpc.AnalyzeRequest,Grpc.Core.CallOptions)">
            <summary>
            Analyze analyzes a single resource object, and returns any errors that it finds.
            Called with the "inputs" to the resource, before it is updated.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.AnalyzeAsync(Pulumirpc.AnalyzeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Analyze analyzes a single resource object, and returns any errors that it finds.
            Called with the "inputs" to the resource, before it is updated.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.AnalyzeAsync(Pulumirpc.AnalyzeRequest,Grpc.Core.CallOptions)">
            <summary>
            Analyze analyzes a single resource object, and returns any errors that it finds.
            Called with the "inputs" to the resource, before it is updated.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.AnalyzeStack(Pulumirpc.AnalyzeStackRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            AnalyzeStack analyzes all resources within a stack, at the end of a successful
            preview or update. The provided resources are the "outputs", after any mutations
            have taken place.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.AnalyzeStack(Pulumirpc.AnalyzeStackRequest,Grpc.Core.CallOptions)">
            <summary>
            AnalyzeStack analyzes all resources within a stack, at the end of a successful
            preview or update. The provided resources are the "outputs", after any mutations
            have taken place.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.AnalyzeStackAsync(Pulumirpc.AnalyzeStackRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            AnalyzeStack analyzes all resources within a stack, at the end of a successful
            preview or update. The provided resources are the "outputs", after any mutations
            have taken place.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.AnalyzeStackAsync(Pulumirpc.AnalyzeStackRequest,Grpc.Core.CallOptions)">
            <summary>
            AnalyzeStack analyzes all resources within a stack, at the end of a successful
            preview or update. The provided resources are the "outputs", after any mutations
            have taken place.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.Remediate(Pulumirpc.AnalyzeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Remediate optionally transforms a single resource object. This effectively rewrites
            a single resource object's properties instead of using what was generated by the program.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.Remediate(Pulumirpc.AnalyzeRequest,Grpc.Core.CallOptions)">
            <summary>
            Remediate optionally transforms a single resource object. This effectively rewrites
            a single resource object's properties instead of using what was generated by the program.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.RemediateAsync(Pulumirpc.AnalyzeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Remediate optionally transforms a single resource object. This effectively rewrites
            a single resource object's properties instead of using what was generated by the program.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.RemediateAsync(Pulumirpc.AnalyzeRequest,Grpc.Core.CallOptions)">
            <summary>
            Remediate optionally transforms a single resource object. This effectively rewrites
            a single resource object's properties instead of using what was generated by the program.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.GetAnalyzerInfo(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            GetAnalyzerInfo returns metadata about the analyzer (e.g., list of policies contained).
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.GetAnalyzerInfo(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.CallOptions)">
            <summary>
            GetAnalyzerInfo returns metadata about the analyzer (e.g., list of policies contained).
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.GetAnalyzerInfoAsync(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            GetAnalyzerInfo returns metadata about the analyzer (e.g., list of policies contained).
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.GetAnalyzerInfoAsync(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.CallOptions)">
            <summary>
            GetAnalyzerInfo returns metadata about the analyzer (e.g., list of policies contained).
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.GetPluginInfo(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            GetPluginInfo returns generic information about this plugin, like its version.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.GetPluginInfo(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.CallOptions)">
            <summary>
            GetPluginInfo returns generic information about this plugin, like its version.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.GetPluginInfoAsync(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            GetPluginInfo returns generic information about this plugin, like its version.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.GetPluginInfoAsync(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.CallOptions)">
            <summary>
            GetPluginInfo returns generic information about this plugin, like its version.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.Configure(Pulumirpc.ConfigureAnalyzerRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Configure configures the analyzer, passing configuration properties for each policy.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.Configure(Pulumirpc.ConfigureAnalyzerRequest,Grpc.Core.CallOptions)">
            <summary>
            Configure configures the analyzer, passing configuration properties for each policy.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.ConfigureAsync(Pulumirpc.ConfigureAnalyzerRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Configure configures the analyzer, passing configuration properties for each policy.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.ConfigureAsync(Pulumirpc.ConfigureAnalyzerRequest,Grpc.Core.CallOptions)">
            <summary>
            Configure configures the analyzer, passing configuration properties for each policy.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.Handshake(Pulumirpc.AnalyzerHandshakeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `Handshake` is the first call made by the engine to an analyzer. It is used to pass the engine's address to the
            analyzer so that it may establish its own connections back, and to establish protocol configuration that will be
            used to communicate between the two parties.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.Handshake(Pulumirpc.AnalyzerHandshakeRequest,Grpc.Core.CallOptions)">
            <summary>
            `Handshake` is the first call made by the engine to an analyzer. It is used to pass the engine's address to the
            analyzer so that it may establish its own connections back, and to establish protocol configuration that will be
            used to communicate between the two parties.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.HandshakeAsync(Pulumirpc.AnalyzerHandshakeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `Handshake` is the first call made by the engine to an analyzer. It is used to pass the engine's address to the
            analyzer so that it may establish its own connections back, and to establish protocol configuration that will be
            used to communicate between the two parties.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.HandshakeAsync(Pulumirpc.AnalyzerHandshakeRequest,Grpc.Core.CallOptions)">
            <summary>
            `Handshake` is the first call made by the engine to an analyzer. It is used to pass the engine's address to the
            analyzer so that it may establish its own connections back, and to establish protocol configuration that will be
            used to communicate between the two parties.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.ConfigureStack(Pulumirpc.AnalyzerStackConfigureRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `ConfigureStack` is always called if the engine is using the analyzer to analyze resources in a specific stack.
            This method is not always called, for example if the engine is just booting the analyzer up to call
            GetAnalyzerInfo.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.ConfigureStack(Pulumirpc.AnalyzerStackConfigureRequest,Grpc.Core.CallOptions)">
            <summary>
            `ConfigureStack` is always called if the engine is using the analyzer to analyze resources in a specific stack.
            This method is not always called, for example if the engine is just booting the analyzer up to call
            GetAnalyzerInfo.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.ConfigureStackAsync(Pulumirpc.AnalyzerStackConfigureRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `ConfigureStack` is always called if the engine is using the analyzer to analyze resources in a specific stack.
            This method is not always called, for example if the engine is just booting the analyzer up to call
            GetAnalyzerInfo.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.ConfigureStackAsync(Pulumirpc.AnalyzerStackConfigureRequest,Grpc.Core.CallOptions)">
            <summary>
            `ConfigureStack` is always called if the engine is using the analyzer to analyze resources in a specific stack.
            This method is not always called, for example if the engine is just booting the analyzer up to call
            GetAnalyzerInfo.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.Cancel(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Cancel signals the analyzer to gracefully shut down and abort any ongoing analysis operations.
            Operations aborted in this way will return an error. Since Cancel is advisory and non-blocking,
            it is up to the host to decide how long to wait after Cancel is called before (e.g.)
            hard-closing any gRPC connection.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.Cancel(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.CallOptions)">
            <summary>
            Cancel signals the analyzer to gracefully shut down and abort any ongoing analysis operations.
            Operations aborted in this way will return an error. Since Cancel is advisory and non-blocking,
            it is up to the host to decide how long to wait after Cancel is called before (e.g.)
            hard-closing any gRPC connection.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.CancelAsync(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Cancel signals the analyzer to gracefully shut down and abort any ongoing analysis operations.
            Operations aborted in this way will return an error. Since Cancel is advisory and non-blocking,
            it is up to the host to decide how long to wait after Cancel is called before (e.g.)
            hard-closing any gRPC connection.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.CancelAsync(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.CallOptions)">
            <summary>
            Cancel signals the analyzer to gracefully shut down and abort any ongoing analysis operations.
            Operations aborted in this way will return an error. Since Cancel is advisory and non-blocking,
            it is up to the host to decide how long to wait after Cancel is called before (e.g.)
            hard-closing any gRPC connection.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Analyzer.AnalyzerClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:Pulumirpc.Analyzer.BindService(Pulumirpc.Analyzer.AnalyzerBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Pulumirpc.Analyzer.BindService(Grpc.Core.ServiceBinderBase,Pulumirpc.Analyzer.AnalyzerBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="T:Pulumirpc.CallbackReflection">
            <summary>Holder for reflection information generated from pulumi/callback.proto</summary>
        </member>
        <member name="P:Pulumirpc.CallbackReflection.Descriptor">
            <summary>File descriptor for pulumi/callback.proto</summary>
        </member>
        <member name="F:Pulumirpc.Callback.TargetFieldNumber">
            <summary>Field number for the "target" field.</summary>
        </member>
        <member name="P:Pulumirpc.Callback.Target">
            <summary>
            the gRPC target of the callback service.
            </summary>
        </member>
        <member name="F:Pulumirpc.Callback.TokenFieldNumber">
            <summary>Field number for the "token" field.</summary>
        </member>
        <member name="P:Pulumirpc.Callback.Token">
            <summary>
            the service specific unique token for this callback.
            </summary>
        </member>
        <member name="F:Pulumirpc.CallbackInvokeRequest.TokenFieldNumber">
            <summary>Field number for the "token" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallbackInvokeRequest.Token">
            <summary>
            the token for the callback.
            </summary>
        </member>
        <member name="F:Pulumirpc.CallbackInvokeRequest.RequestFieldNumber">
            <summary>Field number for the "request" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallbackInvokeRequest.Request">
            <summary>
            the serialized protobuf message of the arguments for this callback.
            </summary>
        </member>
        <member name="F:Pulumirpc.CallbackInvokeResponse.ResponseFieldNumber">
            <summary>Field number for the "response" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallbackInvokeResponse.Response">
            <summary>
            the serialized protobuf message of the response for this callback.
            </summary>
        </member>
        <member name="T:Pulumirpc.Callbacks">
            <summary>
            Callbacks is a service for invoking functions in one runtime from other processes.
            </summary>
        </member>
        <member name="P:Pulumirpc.Callbacks.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Pulumirpc.Callbacks.CallbacksBase">
            <summary>Base class for server-side implementations of Callbacks</summary>
        </member>
        <member name="M:Pulumirpc.Callbacks.CallbacksBase.Invoke(Pulumirpc.CallbackInvokeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Invoke invokes a given callback, identified by its token.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="T:Pulumirpc.Callbacks.CallbacksClient">
            <summary>Client for Callbacks</summary>
        </member>
        <member name="M:Pulumirpc.Callbacks.CallbacksClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for Callbacks</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Pulumirpc.Callbacks.CallbacksClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for Callbacks that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Pulumirpc.Callbacks.CallbacksClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Pulumirpc.Callbacks.CallbacksClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Pulumirpc.Callbacks.CallbacksClient.Invoke(Pulumirpc.CallbackInvokeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Invoke invokes a given callback, identified by its token.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Callbacks.CallbacksClient.Invoke(Pulumirpc.CallbackInvokeRequest,Grpc.Core.CallOptions)">
            <summary>
            Invoke invokes a given callback, identified by its token.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Callbacks.CallbacksClient.InvokeAsync(Pulumirpc.CallbackInvokeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Invoke invokes a given callback, identified by its token.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Callbacks.CallbacksClient.InvokeAsync(Pulumirpc.CallbackInvokeRequest,Grpc.Core.CallOptions)">
            <summary>
            Invoke invokes a given callback, identified by its token.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Callbacks.CallbacksClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:Pulumirpc.Callbacks.BindService(Pulumirpc.Callbacks.CallbacksBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Pulumirpc.Callbacks.BindService(Grpc.Core.ServiceBinderBase,Pulumirpc.Callbacks.CallbacksBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="T:Pulumirpc.Codegen.HclReflection">
            <summary>Holder for reflection information generated from pulumi/codegen/hcl.proto</summary>
        </member>
        <member name="P:Pulumirpc.Codegen.HclReflection.Descriptor">
            <summary>File descriptor for pulumi/codegen/hcl.proto</summary>
        </member>
        <member name="T:Pulumirpc.Codegen.DiagnosticSeverity">
            <summary>
            DiagnosticSeverity is the severity level of a diagnostic message.
            </summary>
        </member>
        <member name="F:Pulumirpc.Codegen.DiagnosticSeverity.DiagInvalid">
            <summary>
            DIAG_INVALID is the invalid zero value of DiagnosticSeverity
            </summary>
        </member>
        <member name="F:Pulumirpc.Codegen.DiagnosticSeverity.DiagError">
            <summary>
            DIAG_ERROR indicates that the problem reported by a diagnostic prevents
            further progress in parsing and/or evaluating the subject.
            </summary>
        </member>
        <member name="F:Pulumirpc.Codegen.DiagnosticSeverity.DiagWarning">
            <summary>
            DIAG_WARNING indicates that the problem reported by a diagnostic warrants
            user attention but does not prevent further progress. It is most
            commonly used for showing deprecation notices.
            </summary>
        </member>
        <member name="T:Pulumirpc.Codegen.Pos">
            <summary>
            Pos represents a single position in a source file, by addressing the start byte of a unicode character
            encoded in UTF-8.
            </summary>
        </member>
        <member name="F:Pulumirpc.Codegen.Pos.LineFieldNumber">
            <summary>Field number for the "line" field.</summary>
        </member>
        <member name="P:Pulumirpc.Codegen.Pos.Line">
            <summary>
            Line is the source code line where this position points. Lines are counted starting at 1 and
            incremented for each newline character encountered.
            </summary>
        </member>
        <member name="F:Pulumirpc.Codegen.Pos.ColumnFieldNumber">
            <summary>Field number for the "column" field.</summary>
        </member>
        <member name="P:Pulumirpc.Codegen.Pos.Column">
             <summary>
             Column is the source code column where this position points, in unicode characters, with counting
             starting at 1.
            
             Column counts characters as they appear visually, so for example a latin letter with a combining
             diacritic mark counts as one character. This is intended for rendering visual markers against source
             code in contexts where these diacritics would be rendered in a single character cell. Technically
             speaking, Column is counting grapheme clusters as used in unicode normalization.
             </summary>
        </member>
        <member name="F:Pulumirpc.Codegen.Pos.ByteFieldNumber">
            <summary>Field number for the "byte" field.</summary>
        </member>
        <member name="P:Pulumirpc.Codegen.Pos.Byte">
            <summary>
            Byte is the byte offset into the file where the indicated character begins. This is a zero-based offset
            to the first byte of the first UTF-8 codepoint sequence in the character, and thus gives a position
            that can be resolved _without_ awareness of Unicode characters.
            </summary>
        </member>
        <member name="T:Pulumirpc.Codegen.Range">
            <summary>
            Range represents a span of characters between two positions in a source file.
            </summary>
        </member>
        <member name="F:Pulumirpc.Codegen.Range.FilenameFieldNumber">
            <summary>Field number for the "filename" field.</summary>
        </member>
        <member name="P:Pulumirpc.Codegen.Range.Filename">
            <summary>
            Filename is the name of the file into which this range's positions point.
            </summary>
        </member>
        <member name="F:Pulumirpc.Codegen.Range.StartFieldNumber">
            <summary>Field number for the "start" field.</summary>
        </member>
        <member name="P:Pulumirpc.Codegen.Range.Start">
            <summary>
            Start and End represent the bounds of this range. Start is inclusive and End is exclusive.
            </summary>
        </member>
        <member name="F:Pulumirpc.Codegen.Range.EndFieldNumber">
            <summary>Field number for the "end" field.</summary>
        </member>
        <member name="T:Pulumirpc.Codegen.Diagnostic">
            <summary>
            Diagnostic represents information to be presented to a user about an error or anomaly in parsing or evaluating configuration.
            </summary>
        </member>
        <member name="F:Pulumirpc.Codegen.Diagnostic.SeverityFieldNumber">
            <summary>Field number for the "severity" field.</summary>
        </member>
        <member name="F:Pulumirpc.Codegen.Diagnostic.SummaryFieldNumber">
            <summary>Field number for the "summary" field.</summary>
        </member>
        <member name="P:Pulumirpc.Codegen.Diagnostic.Summary">
            <summary>
            Summary and Detail contain the English-language description of the
            problem. Summary is a terse description of the general problem and
            detail is a more elaborate, often-multi-sentence description of
            the problem and what might be done to solve it.
            </summary>
        </member>
        <member name="F:Pulumirpc.Codegen.Diagnostic.DetailFieldNumber">
            <summary>Field number for the "detail" field.</summary>
        </member>
        <member name="F:Pulumirpc.Codegen.Diagnostic.SubjectFieldNumber">
            <summary>Field number for the "subject" field.</summary>
        </member>
        <member name="P:Pulumirpc.Codegen.Diagnostic.Subject">
             <summary>
             Subject and Context are both source ranges relating to the diagnostic.
            
             Subject is a tight range referring to exactly the construct that
             is problematic, while Context is an optional broader range (which should
             fully contain Subject) that ought to be shown around Subject when
             generating isolated source-code snippets in diagnostic messages.
             If Context is nil, the Subject is also the Context.
            
             Some diagnostics have no source ranges at all. If Context is set then
             Subject should always also be set.
             </summary>
        </member>
        <member name="F:Pulumirpc.Codegen.Diagnostic.ContextFieldNumber">
            <summary>Field number for the "context" field.</summary>
        </member>
        <member name="T:Pulumirpc.ConverterReflection">
            <summary>Holder for reflection information generated from pulumi/converter.proto</summary>
        </member>
        <member name="P:Pulumirpc.ConverterReflection.Descriptor">
            <summary>File descriptor for pulumi/converter.proto</summary>
        </member>
        <member name="F:Pulumirpc.ConvertStateRequest.MapperTargetFieldNumber">
            <summary>Field number for the "mapper_target" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConvertStateRequest.MapperTarget">
            <summary>
            the gRPC target of the mapper service.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConvertStateRequest.ArgsFieldNumber">
            <summary>Field number for the "args" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConvertStateRequest.Args">
            <summary>
            the args passed to `pulumi import` for this conversion. Normally used to specifiy a state file to
            import from.
            </summary>
        </member>
        <member name="T:Pulumirpc.ResourceImport">
            <summary>
            A ResourceImport specifies a resource to import.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceImport.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceImport.Type">
            <summary>
            the type token for the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceImport.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceImport.Name">
            <summary>
            the name of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceImport.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceImport.Id">
            <summary>
            the ID of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceImport.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceImport.Version">
            <summary>
            the provider version to use for the resource, if any.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceImport.PluginDownloadURLFieldNumber">
            <summary>Field number for the "pluginDownloadURL" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceImport.PluginDownloadURL">
            <summary>
            the provider PluginDownloadURL to use for the resource, if any.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceImport.LogicalNameFieldNumber">
            <summary>Field number for the "logical_name" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceImport.LogicalName">
            <summary>
            the logical name of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceImport.IsComponentFieldNumber">
            <summary>Field number for the "is_component" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceImport.IsComponent">
            <summary>
            true if this is a component resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceImport.IsRemoteFieldNumber">
            <summary>Field number for the "is_remote" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceImport.IsRemote">
            <summary>
            true if this is a remote resource. Ignored if is_component is false.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConvertStateResponse.ResourcesFieldNumber">
            <summary>Field number for the "resources" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConvertStateResponse.Resources">
            <summary>
            a list of resources to import.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConvertStateResponse.DiagnosticsFieldNumber">
            <summary>Field number for the "diagnostics" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConvertStateResponse.Diagnostics">
            <summary>
            any diagnostics from state conversion.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConvertProgramRequest.SourceDirectoryFieldNumber">
            <summary>Field number for the "source_directory" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConvertProgramRequest.SourceDirectory">
            <summary>
            the source directory containing the program to convert from.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConvertProgramRequest.TargetDirectoryFieldNumber">
            <summary>Field number for the "target_directory" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConvertProgramRequest.TargetDirectory">
            <summary>
            a target directory to write the resulting PCL code and project file to.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConvertProgramRequest.MapperTargetFieldNumber">
            <summary>Field number for the "mapper_target" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConvertProgramRequest.MapperTarget">
            <summary>
            the gRPC target of the mapper service.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConvertProgramRequest.LoaderTargetFieldNumber">
            <summary>Field number for the "loader_target" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConvertProgramRequest.LoaderTarget">
            <summary>
            The target of a codegen.LoaderServer to use for loading schemas.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConvertProgramRequest.ArgsFieldNumber">
            <summary>Field number for the "args" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConvertProgramRequest.Args">
            <summary>
            the args passed to `pulumi convert` for this conversion. Normally used to specifiy a root file, or conversion options.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConvertProgramRequest.GeneratedProjectDirectoryFieldNumber">
            <summary>Field number for the "generated_project_directory" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConvertProgramRequest.GeneratedProjectDirectory">
            <summary>
            the directory where the final generated project for the eventual destination language will be written.
            use to determine relative paths of any asset that will be copied over.
            Do not write files to this directory as these files might be overwritten in 
            the project generation process.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConvertProgramResponse.DiagnosticsFieldNumber">
            <summary>Field number for the "diagnostics" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConvertProgramResponse.Diagnostics">
            <summary>
            any diagnostics from code generation.
            </summary>
        </member>
        <member name="T:Pulumirpc.Converter">
            <summary>
            Converter is a service for converting between other ecosystems and Pulumi.
            This is currently unstable and experimental.
            </summary>
        </member>
        <member name="P:Pulumirpc.Converter.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Pulumirpc.Converter.ConverterBase">
            <summary>Base class for server-side implementations of Converter</summary>
        </member>
        <member name="M:Pulumirpc.Converter.ConverterBase.ConvertState(Pulumirpc.ConvertStateRequest,Grpc.Core.ServerCallContext)">
            <summary>
            ConvertState converts state from the target ecosystem into a form that can be imported into Pulumi.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.Converter.ConverterBase.ConvertProgram(Pulumirpc.ConvertProgramRequest,Grpc.Core.ServerCallContext)">
            <summary>
            ConvertProgram converts a program from the target ecosystem into a form that can be used with Pulumi.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="T:Pulumirpc.Converter.ConverterClient">
            <summary>Client for Converter</summary>
        </member>
        <member name="M:Pulumirpc.Converter.ConverterClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for Converter</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Pulumirpc.Converter.ConverterClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for Converter that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Pulumirpc.Converter.ConverterClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Pulumirpc.Converter.ConverterClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Pulumirpc.Converter.ConverterClient.ConvertState(Pulumirpc.ConvertStateRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            ConvertState converts state from the target ecosystem into a form that can be imported into Pulumi.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Converter.ConverterClient.ConvertState(Pulumirpc.ConvertStateRequest,Grpc.Core.CallOptions)">
            <summary>
            ConvertState converts state from the target ecosystem into a form that can be imported into Pulumi.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Converter.ConverterClient.ConvertStateAsync(Pulumirpc.ConvertStateRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            ConvertState converts state from the target ecosystem into a form that can be imported into Pulumi.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Converter.ConverterClient.ConvertStateAsync(Pulumirpc.ConvertStateRequest,Grpc.Core.CallOptions)">
            <summary>
            ConvertState converts state from the target ecosystem into a form that can be imported into Pulumi.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Converter.ConverterClient.ConvertProgram(Pulumirpc.ConvertProgramRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            ConvertProgram converts a program from the target ecosystem into a form that can be used with Pulumi.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Converter.ConverterClient.ConvertProgram(Pulumirpc.ConvertProgramRequest,Grpc.Core.CallOptions)">
            <summary>
            ConvertProgram converts a program from the target ecosystem into a form that can be used with Pulumi.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Converter.ConverterClient.ConvertProgramAsync(Pulumirpc.ConvertProgramRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            ConvertProgram converts a program from the target ecosystem into a form that can be used with Pulumi.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Converter.ConverterClient.ConvertProgramAsync(Pulumirpc.ConvertProgramRequest,Grpc.Core.CallOptions)">
            <summary>
            ConvertProgram converts a program from the target ecosystem into a form that can be used with Pulumi.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Converter.ConverterClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:Pulumirpc.Converter.BindService(Pulumirpc.Converter.ConverterBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Pulumirpc.Converter.BindService(Grpc.Core.ServiceBinderBase,Pulumirpc.Converter.ConverterBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="T:Pulumirpc.EngineReflection">
            <summary>Holder for reflection information generated from pulumi/engine.proto</summary>
        </member>
        <member name="P:Pulumirpc.EngineReflection.Descriptor">
            <summary>File descriptor for pulumi/engine.proto</summary>
        </member>
        <member name="T:Pulumirpc.LogSeverity">
            <summary>
            LogSeverity is the severity level of a log message.  Errors are fatal; all others are informational.
            </summary>
        </member>
        <member name="F:Pulumirpc.LogSeverity.Debug">
            <summary>
            a debug-level message not displayed to end-users (the default).
            </summary>
        </member>
        <member name="F:Pulumirpc.LogSeverity.Info">
            <summary>
            an informational message printed to output during resource operations.
            </summary>
        </member>
        <member name="F:Pulumirpc.LogSeverity.Warning">
            <summary>
            a warning to indicate that something went wrong.
            </summary>
        </member>
        <member name="F:Pulumirpc.LogSeverity.Error">
            <summary>
            a fatal error indicating that the tool should stop processing subsequent resource operations.
            </summary>
        </member>
        <member name="F:Pulumirpc.LogRequest.SeverityFieldNumber">
            <summary>Field number for the "severity" field.</summary>
        </member>
        <member name="P:Pulumirpc.LogRequest.Severity">
            <summary>
            the logging level of this message.
            </summary>
        </member>
        <member name="F:Pulumirpc.LogRequest.MessageFieldNumber">
            <summary>Field number for the "message" field.</summary>
        </member>
        <member name="P:Pulumirpc.LogRequest.Message">
            <summary>
            the contents of the logged message.
            </summary>
        </member>
        <member name="F:Pulumirpc.LogRequest.UrnFieldNumber">
            <summary>Field number for the "urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.LogRequest.Urn">
            <summary>
            the (optional) resource urn this log is associated with.
            </summary>
        </member>
        <member name="F:Pulumirpc.LogRequest.StreamIdFieldNumber">
            <summary>Field number for the "streamId" field.</summary>
        </member>
        <member name="P:Pulumirpc.LogRequest.StreamId">
             <summary>
             the (optional) stream id that a stream of log messages can be associated with. This allows
             clients to not have to buffer a large set of log messages that they all want to be
             conceptually connected.  Instead the messages can be sent as chunks (with the same stream id)
             and the end display can show the messages as they arrive, while still stitching them together
             into one total log message.
            
             0/not-given means: do not associate with any stream.
             </summary>
        </member>
        <member name="F:Pulumirpc.LogRequest.EphemeralFieldNumber">
            <summary>Field number for the "ephemeral" field.</summary>
        </member>
        <member name="P:Pulumirpc.LogRequest.Ephemeral">
            <summary>
            Optional value indicating whether this is a status message.
            </summary>
        </member>
        <member name="T:Pulumirpc.GetRootResourceRequest">
            <summary>
            empty.
            </summary>
        </member>
        <member name="F:Pulumirpc.GetRootResourceResponse.UrnFieldNumber">
            <summary>Field number for the "urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetRootResourceResponse.Urn">
            <summary>
            the URN of the root resource, or the empty string if one was not set.
            </summary>
        </member>
        <member name="F:Pulumirpc.SetRootResourceRequest.UrnFieldNumber">
            <summary>Field number for the "urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.SetRootResourceRequest.Urn">
            <summary>
            the URN of the root resource, or the empty string.
            </summary>
        </member>
        <member name="T:Pulumirpc.SetRootResourceResponse">
            <summary>
            empty.
            </summary>
        </member>
        <member name="F:Pulumirpc.StartDebuggingRequest.ConfigFieldNumber">
            <summary>Field number for the "config" field.</summary>
        </member>
        <member name="P:Pulumirpc.StartDebuggingRequest.Config">
            <summary>
            the debug configuration parameters.  These are meant to be in the right format for the DAP protocol to consume.
            </summary>
        </member>
        <member name="F:Pulumirpc.StartDebuggingRequest.MessageFieldNumber">
            <summary>Field number for the "message" field.</summary>
        </member>
        <member name="P:Pulumirpc.StartDebuggingRequest.Message">
            <summary>
            the string to display to the user with instructions on how to connect to the debugger.
            </summary>
        </member>
        <member name="T:Pulumirpc.Engine">
            <summary>
            Engine is an auxiliary service offered to language and resource provider plugins. Its main purpose today is
            to serve as a common logging endpoint, but it also serves as a state storage mechanism for language hosts
            that can't store their own global state.
            </summary>
        </member>
        <member name="P:Pulumirpc.Engine.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Pulumirpc.Engine.EngineBase">
            <summary>Base class for server-side implementations of Engine</summary>
        </member>
        <member name="M:Pulumirpc.Engine.EngineBase.Log(Pulumirpc.LogRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Log logs a global message in the engine, including errors and warnings.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.Engine.EngineBase.GetRootResource(Pulumirpc.GetRootResourceRequest,Grpc.Core.ServerCallContext)">
            <summary>
            GetRootResource gets the URN of the root resource, the resource that should be the root of all
            otherwise-unparented resources.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.Engine.EngineBase.SetRootResource(Pulumirpc.SetRootResourceRequest,Grpc.Core.ServerCallContext)">
            <summary>
            SetRootResource sets the URN of the root resource.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.Engine.EngineBase.StartDebugging(Pulumirpc.StartDebuggingRequest,Grpc.Core.ServerCallContext)">
            <summary>
            StartDebugging indicates to the engine that the program has started under a debugger, and the engine
            should notify the user of how to connect to the debugger.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="T:Pulumirpc.Engine.EngineClient">
            <summary>Client for Engine</summary>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for Engine</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for Engine that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.Log(Pulumirpc.LogRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Log logs a global message in the engine, including errors and warnings.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.Log(Pulumirpc.LogRequest,Grpc.Core.CallOptions)">
            <summary>
            Log logs a global message in the engine, including errors and warnings.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.LogAsync(Pulumirpc.LogRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Log logs a global message in the engine, including errors and warnings.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.LogAsync(Pulumirpc.LogRequest,Grpc.Core.CallOptions)">
            <summary>
            Log logs a global message in the engine, including errors and warnings.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.GetRootResource(Pulumirpc.GetRootResourceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            GetRootResource gets the URN of the root resource, the resource that should be the root of all
            otherwise-unparented resources.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.GetRootResource(Pulumirpc.GetRootResourceRequest,Grpc.Core.CallOptions)">
            <summary>
            GetRootResource gets the URN of the root resource, the resource that should be the root of all
            otherwise-unparented resources.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.GetRootResourceAsync(Pulumirpc.GetRootResourceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            GetRootResource gets the URN of the root resource, the resource that should be the root of all
            otherwise-unparented resources.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.GetRootResourceAsync(Pulumirpc.GetRootResourceRequest,Grpc.Core.CallOptions)">
            <summary>
            GetRootResource gets the URN of the root resource, the resource that should be the root of all
            otherwise-unparented resources.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.SetRootResource(Pulumirpc.SetRootResourceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            SetRootResource sets the URN of the root resource.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.SetRootResource(Pulumirpc.SetRootResourceRequest,Grpc.Core.CallOptions)">
            <summary>
            SetRootResource sets the URN of the root resource.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.SetRootResourceAsync(Pulumirpc.SetRootResourceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            SetRootResource sets the URN of the root resource.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.SetRootResourceAsync(Pulumirpc.SetRootResourceRequest,Grpc.Core.CallOptions)">
            <summary>
            SetRootResource sets the URN of the root resource.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.StartDebugging(Pulumirpc.StartDebuggingRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            StartDebugging indicates to the engine that the program has started under a debugger, and the engine
            should notify the user of how to connect to the debugger.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.StartDebugging(Pulumirpc.StartDebuggingRequest,Grpc.Core.CallOptions)">
            <summary>
            StartDebugging indicates to the engine that the program has started under a debugger, and the engine
            should notify the user of how to connect to the debugger.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.StartDebuggingAsync(Pulumirpc.StartDebuggingRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            StartDebugging indicates to the engine that the program has started under a debugger, and the engine
            should notify the user of how to connect to the debugger.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.StartDebuggingAsync(Pulumirpc.StartDebuggingRequest,Grpc.Core.CallOptions)">
            <summary>
            StartDebugging indicates to the engine that the program has started under a debugger, and the engine
            should notify the user of how to connect to the debugger.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Engine.EngineClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:Pulumirpc.Engine.BindService(Pulumirpc.Engine.EngineBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Pulumirpc.Engine.BindService(Grpc.Core.ServiceBinderBase,Pulumirpc.Engine.EngineBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="T:Pulumirpc.ErrorsReflection">
            <summary>Holder for reflection information generated from pulumi/errors.proto</summary>
        </member>
        <member name="P:Pulumirpc.ErrorsReflection.Descriptor">
            <summary>File descriptor for pulumi/errors.proto</summary>
        </member>
        <member name="F:Pulumirpc.ErrorCause.MessageFieldNumber">
            <summary>Field number for the "message" field.</summary>
        </member>
        <member name="F:Pulumirpc.ErrorCause.StackTraceFieldNumber">
            <summary>Field number for the "stackTrace" field.</summary>
        </member>
        <member name="T:Pulumirpc.InputPropertiesError">
            <summary>
            An error that can be returned from a component provider and includes details of the
            error, which can be multiple properties.
            </summary>
        </member>
        <member name="F:Pulumirpc.InputPropertiesError.ErrorsFieldNumber">
            <summary>Field number for the "errors" field.</summary>
        </member>
        <member name="P:Pulumirpc.InputPropertiesError.Errors">
            <summary>
            The list of invalid input properties.
            </summary>
        </member>
        <member name="T:Pulumirpc.InputPropertiesError.Types">
            <summary>Container for nested types declared in the InputPropertiesError message type.</summary>
        </member>
        <member name="T:Pulumirpc.InputPropertiesError.Types.PropertyError">
            <summary>
            A single invalid input property.
            </summary>
        </member>
        <member name="F:Pulumirpc.InputPropertiesError.Types.PropertyError.PropertyPathFieldNumber">
            <summary>Field number for the "property_path" field.</summary>
        </member>
        <member name="P:Pulumirpc.InputPropertiesError.Types.PropertyError.PropertyPath">
            <summary>
            The path to the property that is invalid.
            </summary>
        </member>
        <member name="F:Pulumirpc.InputPropertiesError.Types.PropertyError.ReasonFieldNumber">
            <summary>Field number for the "reason" field.</summary>
        </member>
        <member name="P:Pulumirpc.InputPropertiesError.Types.PropertyError.Reason">
            <summary>
            The reason the property is invalid.
            </summary>
        </member>
        <member name="T:Pulumirpc.LanguageReflection">
            <summary>Holder for reflection information generated from pulumi/language.proto</summary>
        </member>
        <member name="P:Pulumirpc.LanguageReflection.Descriptor">
            <summary>File descriptor for pulumi/language.proto</summary>
        </member>
        <member name="T:Pulumirpc.ProgramInfo">
            <summary>
            A `ProgramInfo` struct specifies a Pulumi program, and is built typically based on the location of a `Pulumi.yaml`
            file and the `runtime`, `main` and other properties within that file.
            </summary>
        </member>
        <member name="F:Pulumirpc.ProgramInfo.RootDirectoryFieldNumber">
            <summary>Field number for the "root_directory" field.</summary>
        </member>
        <member name="P:Pulumirpc.ProgramInfo.RootDirectory">
            <summary>
            The root of the project containing the program, where the `Pulumi.yaml` file is located. This should be an
            absolute path on the filesystem that is accessible to the language host.
            </summary>
        </member>
        <member name="F:Pulumirpc.ProgramInfo.ProgramDirectoryFieldNumber">
            <summary>Field number for the "program_directory" field.</summary>
        </member>
        <member name="P:Pulumirpc.ProgramInfo.ProgramDirectory">
            <summary>
            The directory containing the program to execute (e.g. the location of the `index.ts` for a TypeScript NodeJS
            program). This should be an absolute path on the filesystem that is accessible to the language host. If
            `ProgramInfo` is being built from a `Pulumi.yaml`, this will typically be the directory portion of the `main`
            property in that file.
            </summary>
        </member>
        <member name="F:Pulumirpc.ProgramInfo.EntryPointFieldNumber">
            <summary>Field number for the "entry_point" field.</summary>
        </member>
        <member name="P:Pulumirpc.ProgramInfo.EntryPoint">
            <summary>
            The entry point of the program to execute. This should be a relative path from the `program_directory`, and is
            often just `.` to indicate the program directory itself, but it can also be a filename inside the directory.. If
            `ProgramInfo` is being built from a `Pulumi.yaml`, this will typically be the filename specified `main` property
            in that file if it is present, or the aforementioned `.` if not.
            </summary>
        </member>
        <member name="F:Pulumirpc.ProgramInfo.OptionsFieldNumber">
            <summary>Field number for the "options" field.</summary>
        </member>
        <member name="P:Pulumirpc.ProgramInfo.Options">
            <summary>
            A struct capturing any language-specific options. If `ProgramInfo` is being built from a `Pulumi.yaml`, this will
            contain the `runtime.options` property from that file.
            </summary>
        </member>
        <member name="T:Pulumirpc.AboutRequest">
            <summary>
            `AboutRequest` is the type of requests sent as part of an [](pulumirpc.LanguageRuntime.About) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.AboutRequest.InfoFieldNumber">
            <summary>Field number for the "info" field.</summary>
        </member>
        <member name="P:Pulumirpc.AboutRequest.Info">
            <summary>
            The program to use.
            </summary>
        </member>
        <member name="T:Pulumirpc.AboutResponse">
            <summary>
            `AboutResponse` is the type of responses sent by an [](pulumirpc.LanguageRuntime.About) call. It contains information
            about the language runtime being used.
            </summary>
        </member>
        <member name="F:Pulumirpc.AboutResponse.ExecutableFieldNumber">
            <summary>Field number for the "executable" field.</summary>
        </member>
        <member name="P:Pulumirpc.AboutResponse.Executable">
            <summary>
            The primary executable for the runtime of this language. This should be an absolute path. E.g. for NodeJS on a
            POSIX system, this might be something like `/usr/bin/node`.
            </summary>
        </member>
        <member name="F:Pulumirpc.AboutResponse.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Pulumirpc.AboutResponse.Version">
            <summary>
            The version of the runtime underpinning the language host. E.g. for a NodeJS host, this might be the version of
            `node` being used.
            </summary>
        </member>
        <member name="F:Pulumirpc.AboutResponse.MetadataFieldNumber">
            <summary>Field number for the "metadata" field.</summary>
        </member>
        <member name="P:Pulumirpc.AboutResponse.Metadata">
            <summary>
            Other host-specific metadata about the runtime underpinning the language host.
            </summary>
        </member>
        <member name="T:Pulumirpc.GetProgramDependenciesRequest">
            <summary>
            `GetProgramDependenciesRequest` is the type of requests sent as part of a
            [](pulumirpc.LanguageRuntime.GetProgramDependencies) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.GetProgramDependenciesRequest.ProjectFieldNumber">
            <summary>Field number for the "project" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetProgramDependenciesRequest.Project">
             <summary>
             The project name.
            
             :::{important}
             This is deprecated in favour of passing a [program info](pulumirpc.ProgramInfo) struct as the `info` field. Newer
             versions of the engine will always set this field to the string `"deprecated"`.
             :::
             </summary>
        </member>
        <member name="F:Pulumirpc.GetProgramDependenciesRequest.PwdFieldNumber">
            <summary>Field number for the "pwd" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetProgramDependenciesRequest.Pwd">
             <summary>
             The program's working directory.
            
             :::{important}
             This is deprecated in favour of passing a [program info](pulumirpc.ProgramInfo) struct as the `info` field, with
             the `program_directory` field set to this value.
             :::
             </summary>
        </member>
        <member name="F:Pulumirpc.GetProgramDependenciesRequest.ProgramFieldNumber">
            <summary>Field number for the "program" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetProgramDependenciesRequest.Program">
             <summary>
             The path to the program.
            
             :::{important}
             This is deprecated in favour of passing a [program info](pulumirpc.ProgramInfo) struct as the `info` field, with
             the `entry_point` field set to this value.
             :::
             </summary>
        </member>
        <member name="F:Pulumirpc.GetProgramDependenciesRequest.TransitiveDependenciesFieldNumber">
            <summary>Field number for the "transitiveDependencies" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetProgramDependenciesRequest.TransitiveDependencies">
            <summary>
            True if transitive dependencies should be included in the response.
            </summary>
        </member>
        <member name="F:Pulumirpc.GetProgramDependenciesRequest.InfoFieldNumber">
            <summary>Field number for the "info" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetProgramDependenciesRequest.Info">
            <summary>
            The program to use.
            </summary>
        </member>
        <member name="T:Pulumirpc.DependencyInfo">
            <summary>
            `DependencyInfo` is a struct that captures information about a language-specific dependency required by a program
            (e.g. an NPM package for NodeJS, or a Maven library for Java). It is returned as part of a
            [](pulumirpc.LanguageRuntime.GetProgramDependenciesResponse).
            </summary>
        </member>
        <member name="F:Pulumirpc.DependencyInfo.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.DependencyInfo.Name">
            <summary>
            The name of the dependency.
            </summary>
        </member>
        <member name="F:Pulumirpc.DependencyInfo.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Pulumirpc.DependencyInfo.Version">
            <summary>
            The version of the dependency.
            </summary>
        </member>
        <member name="T:Pulumirpc.GetProgramDependenciesResponse">
            <summary>
            `GetProgramDependenciesResponse` is the type of responses sent by a
            [](pulumirpc.LanguageRuntime.GetProgramDependencies) call. It contains information about the dependencies of a
            program.
            </summary>
        </member>
        <member name="F:Pulumirpc.GetProgramDependenciesResponse.DependenciesFieldNumber">
            <summary>Field number for the "dependencies" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetProgramDependenciesResponse.Dependencies">
            <summary>
            The dependencies of the program specified by the request.
            </summary>
        </member>
        <member name="T:Pulumirpc.GetRequiredPluginsRequest">
            <summary>
            `GetRequiredPluginsRequest` is the type of requests sent as part of a
            [](pulumirpc.LanguageRuntime.GetRequiredPlugins) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.GetRequiredPluginsRequest.ProjectFieldNumber">
            <summary>Field number for the "project" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetRequiredPluginsRequest.Project">
             <summary>
             The project name.
            
             :::{important}
             This is deprecated in favour of passing a [program info](pulumirpc.ProgramInfo) struct as the `info` field. Newer
             versions of the engine will always set this field to the string `"deprecated"`.
             :::
             </summary>
        </member>
        <member name="F:Pulumirpc.GetRequiredPluginsRequest.PwdFieldNumber">
            <summary>Field number for the "pwd" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetRequiredPluginsRequest.Pwd">
             <summary>
             The program's working directory.
            
             :::{important}
             This is deprecated in favour of passing a [program info](pulumirpc.ProgramInfo) struct as the `info` field, with
             the `program_directory` field set to this value.
             :::
             </summary>
        </member>
        <member name="F:Pulumirpc.GetRequiredPluginsRequest.ProgramFieldNumber">
            <summary>Field number for the "program" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetRequiredPluginsRequest.Program">
             <summary>
             The path to the program.
            
             :::{important}
             This is deprecated in favour of passing a [program info](pulumirpc.ProgramInfo) struct as the `info` field, with
             the `entry_point` field set to this value.
             :::
             </summary>
        </member>
        <member name="F:Pulumirpc.GetRequiredPluginsRequest.InfoFieldNumber">
            <summary>Field number for the "info" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetRequiredPluginsRequest.Info">
            <summary>
            The program to use.
            </summary>
        </member>
        <member name="T:Pulumirpc.GetRequiredPluginsResponse">
            <summary>
            `GetRequiredPluginsResponse` is the type of responses sent by a [](pulumirpc.LanguageRuntime.GetRequiredPlugins)
            call. It contains information about the plugins required by a program.
            </summary>
        </member>
        <member name="F:Pulumirpc.GetRequiredPluginsResponse.PluginsFieldNumber">
            <summary>Field number for the "plugins" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetRequiredPluginsResponse.Plugins">
            <summary>
            The plugins required by the program specified by the request.
            </summary>
        </member>
        <member name="T:Pulumirpc.GetRequiredPackagesRequest">
            <summary>
            `GetRequiredPackagesRequest` is the type of requests sent as part of a
            [](pulumirpc.LanguageRuntime.GetRequiredPackages) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.GetRequiredPackagesRequest.InfoFieldNumber">
            <summary>Field number for the "info" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetRequiredPackagesRequest.Info">
            <summary>
            The program to use.
            </summary>
        </member>
        <member name="T:Pulumirpc.GetRequiredPackagesResponse">
            <summary>
            `GetRequiredPackagesResponse` is the type of responses sent by a [](pulumirpc.LanguageRuntime.GetRequiredPackages)
            call. It contains information about the packages required by a program.
            </summary>
        </member>
        <member name="F:Pulumirpc.GetRequiredPackagesResponse.PackagesFieldNumber">
            <summary>Field number for the "packages" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetRequiredPackagesResponse.Packages">
            <summary>
            The packages required by the program specified by the request.
            </summary>
        </member>
        <member name="T:Pulumirpc.RunRequest">
            <summary>
            `RunRequest` is the type of requests sent as part of a [](pulumirpc.LanguageRuntime.Run) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunRequest.ProjectFieldNumber">
            <summary>Field number for the "project" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunRequest.Project">
            <summary>
            The project name.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunRequest.StackFieldNumber">
            <summary>Field number for the "stack" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunRequest.Stack">
            <summary>
            The name of the stack being deployed into.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunRequest.PwdFieldNumber">
            <summary>Field number for the "pwd" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunRequest.Pwd">
            <summary>
            The program's working directory.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunRequest.ProgramFieldNumber">
            <summary>Field number for the "program" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunRequest.Program">
             <summary>
             The path to the program.
            
             :::{important}
             This is deprecated in favour of passing a [program info](pulumirpc.ProgramInfo) struct as the `info` field, with
             the `entry_point` field set to this value.
             :::
             </summary>
        </member>
        <member name="F:Pulumirpc.RunRequest.ArgsFieldNumber">
            <summary>Field number for the "args" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunRequest.Args">
            <summary>
            Any arguments to pass to the program.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunRequest.ConfigFieldNumber">
            <summary>Field number for the "config" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunRequest.Config">
            <summary>
            Configuration variables to apply before running the program.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunRequest.DryRunFieldNumber">
            <summary>Field number for the "dryRun" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunRequest.DryRun">
            <summary>
            True if we are only doing a dry run (preview).
            </summary>
        </member>
        <member name="F:Pulumirpc.RunRequest.ParallelFieldNumber">
            <summary>Field number for the "parallel" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunRequest.Parallel">
            <summary>
            The degree of parallelism that should be used for resource operations. A value less than or equal to 1 indicates
            serial execution.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunRequest.MonitorAddressFieldNumber">
            <summary>Field number for the "monitor_address" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunRequest.MonitorAddress">
            <summary>
            The address of the [](pulumirpc.ResourceMonitor) that the program should connect to send [resource
            registrations](resource-registration) and other calls to.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunRequest.QueryModeFieldNumber">
            <summary>Field number for the "queryMode" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunRequest.QueryMode">
            <summary>
            This is deprecated, query mode is no longer a supported feature. 
            </summary>
        </member>
        <member name="F:Pulumirpc.RunRequest.ConfigSecretKeysFieldNumber">
            <summary>Field number for the "configSecretKeys" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunRequest.ConfigSecretKeys">
            <summary>
            A list of configuration keys whose values should be treated as secrets.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunRequest.OrganizationFieldNumber">
            <summary>Field number for the "organization" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunRequest.Organization">
            <summary>
            The organization of the stack being deployed into.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunRequest.ConfigPropertyMapFieldNumber">
            <summary>Field number for the "configPropertyMap" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunRequest.ConfigPropertyMap">
            <summary>
            This is deprecated, runtimes should look at the string based config as that maintains the full textual data from
            the users config file.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunRequest.InfoFieldNumber">
            <summary>Field number for the "info" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunRequest.Info">
            <summary>
            The program to use.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunRequest.LoaderTargetFieldNumber">
            <summary>Field number for the "loader_target" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunRequest.LoaderTarget">
            <summary>
            The target of a codegen.LoaderServer to use for loading schemas.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunRequest.AttachDebuggerFieldNumber">
            <summary>Field number for the "attach_debugger" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunRequest.AttachDebugger">
            <summary>
            True if and only if the host should start the program under a debugger.
            </summary>
        </member>
        <member name="T:Pulumirpc.RunResponse">
            <summary>
            `RunResponse` is the type of responses sent by a [](pulumirpc.LanguageRuntime.Run) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunResponse.ErrorFieldNumber">
            <summary>Field number for the "error" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunResponse.Error">
            <summary>
            Information about any unhandled error that occurred during the run.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunResponse.BailFieldNumber">
            <summary>Field number for the "bail" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunResponse.Bail">
            <summary>
            True if an error happened, but it was reported to the user. Work should halt immediately, reporting nothing
            further to the user (since this reporting has already happened). This corresponds to a `result.Bail()` value
            being raised in the Go application layer.
            </summary>
        </member>
        <member name="T:Pulumirpc.InstallDependenciesRequest">
            <summary>
            `InstallDependenciesRequest` is the type of requests sent as part of an
            [](pulumirpc.LanguageRuntime.InstallDependencies) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.InstallDependenciesRequest.DirectoryFieldNumber">
            <summary>Field number for the "directory" field.</summary>
        </member>
        <member name="P:Pulumirpc.InstallDependenciesRequest.Directory">
             <summary>
             The program's working directory.
            
             :::{important}
             This is deprecated in favour of passing a [program info](pulumirpc.ProgramInfo) struct as the `info` field, with
             the `program_directory` field set to this value.
             :::
             </summary>
        </member>
        <member name="F:Pulumirpc.InstallDependenciesRequest.IsTerminalFieldNumber">
            <summary>Field number for the "is_terminal" field.</summary>
        </member>
        <member name="P:Pulumirpc.InstallDependenciesRequest.IsTerminal">
            <summary>
            True if we are running in a terminal and may use [ANSI escape
            codes](https://en.wikipedia.org/wiki/ANSI_escape_code) in our output.
            </summary>
        </member>
        <member name="F:Pulumirpc.InstallDependenciesRequest.InfoFieldNumber">
            <summary>Field number for the "info" field.</summary>
        </member>
        <member name="P:Pulumirpc.InstallDependenciesRequest.Info">
            <summary>
            The program to use.
            </summary>
        </member>
        <member name="F:Pulumirpc.InstallDependenciesRequest.UseLanguageVersionToolsFieldNumber">
            <summary>Field number for the "use_language_version_tools" field.</summary>
        </member>
        <member name="P:Pulumirpc.InstallDependenciesRequest.UseLanguageVersionTools">
            <summary>
            True if the host should use language-specific version managers, such as `pyenv` or `nvm`, to set up the version
            of the language toolchain used.
            </summary>
        </member>
        <member name="F:Pulumirpc.InstallDependenciesRequest.IsPluginFieldNumber">
            <summary>Field number for the "is_plugin" field.</summary>
        </member>
        <member name="P:Pulumirpc.InstallDependenciesRequest.IsPlugin">
            <summary>
            True if this install is for a plugin, as opposed to a top level Pulumi program.
            </summary>
        </member>
        <member name="T:Pulumirpc.InstallDependenciesResponse">
            <summary>
            `InstallDependenciesResponse` is the type of responses streamed by an
            [](pulumirpc.LanguageRuntime.InstallDependencies) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.InstallDependenciesResponse.StdoutFieldNumber">
            <summary>Field number for the "stdout" field.</summary>
        </member>
        <member name="P:Pulumirpc.InstallDependenciesResponse.Stdout">
            <summary>
            A line of standard output.
            </summary>
        </member>
        <member name="F:Pulumirpc.InstallDependenciesResponse.StderrFieldNumber">
            <summary>Field number for the "stderr" field.</summary>
        </member>
        <member name="P:Pulumirpc.InstallDependenciesResponse.Stderr">
            <summary>
            A line of standard error.
            </summary>
        </member>
        <member name="T:Pulumirpc.RuntimeOptionsRequest">
            <summary>
            `RuntimeOptionsRequest` is the type of requests sent as part of a [](pulumirpc.LanguageRuntime.RuntimeOptionsPrompts)
            call.
            </summary>
        </member>
        <member name="F:Pulumirpc.RuntimeOptionsRequest.InfoFieldNumber">
            <summary>Field number for the "info" field.</summary>
        </member>
        <member name="P:Pulumirpc.RuntimeOptionsRequest.Info">
            <summary>
            The program to use.
            </summary>
        </member>
        <member name="T:Pulumirpc.RuntimeOptionPrompt">
            <summary>
            `RuntimeOptionPrompt` is a struct that captures information about a runtime option that should be prompted for during
            `pulumi new`.
            </summary>
        </member>
        <member name="F:Pulumirpc.RuntimeOptionPrompt.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="P:Pulumirpc.RuntimeOptionPrompt.Key">
            <summary>
            A unique key that identifies the runtime option.
            </summary>
        </member>
        <member name="F:Pulumirpc.RuntimeOptionPrompt.DescriptionFieldNumber">
            <summary>Field number for the "description" field.</summary>
        </member>
        <member name="P:Pulumirpc.RuntimeOptionPrompt.Description">
            <summary>
            A human-readable description of the runtime option.
            </summary>
        </member>
        <member name="F:Pulumirpc.RuntimeOptionPrompt.PromptTypeFieldNumber">
            <summary>Field number for the "promptType" field.</summary>
        </member>
        <member name="P:Pulumirpc.RuntimeOptionPrompt.PromptType">
            <summary>
            The type of the runtime option.
            </summary>
        </member>
        <member name="F:Pulumirpc.RuntimeOptionPrompt.ChoicesFieldNumber">
            <summary>Field number for the "choices" field.</summary>
        </member>
        <member name="P:Pulumirpc.RuntimeOptionPrompt.Choices">
            <summary>
            A set of choices for the runtime option that may be displayed as part of the prompting process.
            </summary>
        </member>
        <member name="F:Pulumirpc.RuntimeOptionPrompt.DefaultFieldNumber">
            <summary>Field number for the "default" field.</summary>
        </member>
        <member name="P:Pulumirpc.RuntimeOptionPrompt.Default">
            <summary>
            The default value of the runtime option.
            </summary>
        </member>
        <member name="T:Pulumirpc.RuntimeOptionPrompt.Types">
            <summary>Container for nested types declared in the RuntimeOptionPrompt message type.</summary>
        </member>
        <member name="T:Pulumirpc.RuntimeOptionPrompt.Types.RuntimeOptionType">
            <summary>
            `RuntimeOptionType` is an enum that captures the type of a runtime option.
            </summary>
        </member>
        <member name="F:Pulumirpc.RuntimeOptionPrompt.Types.RuntimeOptionType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:Pulumirpc.RuntimeOptionPrompt.Types.RuntimeOptionType.Int32">
            <summary>
            A 32-bit integer value.
            </summary>
        </member>
        <member name="T:Pulumirpc.RuntimeOptionPrompt.Types.RuntimeOptionValue">
            <summary>
            `RuntimeOptionValue` is a struct that captures the value of a runtime option.
            </summary>
        </member>
        <member name="F:Pulumirpc.RuntimeOptionPrompt.Types.RuntimeOptionValue.PromptTypeFieldNumber">
            <summary>Field number for the "promptType" field.</summary>
        </member>
        <member name="P:Pulumirpc.RuntimeOptionPrompt.Types.RuntimeOptionValue.PromptType">
            <summary>
            The type of the runtime option.
            </summary>
        </member>
        <member name="F:Pulumirpc.RuntimeOptionPrompt.Types.RuntimeOptionValue.StringValueFieldNumber">
            <summary>Field number for the "stringValue" field.</summary>
        </member>
        <member name="P:Pulumirpc.RuntimeOptionPrompt.Types.RuntimeOptionValue.StringValue">
            <summary>
            The string value of the runtime option, if and only if the type is `STRING`.
            </summary>
        </member>
        <member name="F:Pulumirpc.RuntimeOptionPrompt.Types.RuntimeOptionValue.Int32ValueFieldNumber">
            <summary>Field number for the "int32Value" field.</summary>
        </member>
        <member name="P:Pulumirpc.RuntimeOptionPrompt.Types.RuntimeOptionValue.Int32Value">
            <summary>
            The 32-bit integer value of the runtime option, if and only if the type is `INT32`.
            </summary>
        </member>
        <member name="F:Pulumirpc.RuntimeOptionPrompt.Types.RuntimeOptionValue.DisplayNameFieldNumber">
            <summary>Field number for the "displayName" field.</summary>
        </member>
        <member name="P:Pulumirpc.RuntimeOptionPrompt.Types.RuntimeOptionValue.DisplayName">
            <summary>
            The display name of the runtime option, to be used in prompts.
            </summary>
        </member>
        <member name="T:Pulumirpc.RuntimeOptionsResponse">
            <summary>
            `RuntimeOptionsResponse` is the type of responses sent by a [](pulumirpc.LanguageRuntime.RuntimeOptionsPrompts) call.
            It contains information about additional prompts to ask during `pulumi new`.
            </summary>
        </member>
        <member name="F:Pulumirpc.RuntimeOptionsResponse.PromptsFieldNumber">
            <summary>Field number for the "prompts" field.</summary>
        </member>
        <member name="P:Pulumirpc.RuntimeOptionsResponse.Prompts">
            <summary>
            Prompts to ask the user.
            </summary>
        </member>
        <member name="T:Pulumirpc.RunPluginRequest">
            <summary>
            `RunPluginRequest` is the type of requests sent as part of a [](pulumirpc.LanguageRuntime.RunPlugin) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunPluginRequest.PwdFieldNumber">
            <summary>Field number for the "pwd" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunPluginRequest.Pwd">
            <summary>
            The plugin program's working directory.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunPluginRequest.ProgramFieldNumber">
            <summary>Field number for the "program" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunPluginRequest.Program">
             <summary>
             The path to the plugin program.
            
             :::{important}
             This is deprecated in favour of passing a [program info](pulumirpc.ProgramInfo) struct as the `info` field, with
             the `entry_point` field set to this value.
             :::
             </summary>
        </member>
        <member name="F:Pulumirpc.RunPluginRequest.ArgsFieldNumber">
            <summary>Field number for the "args" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunPluginRequest.Args">
            <summary>
            Any arguments to pass to the plugin program.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunPluginRequest.EnvFieldNumber">
            <summary>Field number for the "env" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunPluginRequest.Env">
            <summary>
            Any environment variables to set prior to executing the plugin program.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunPluginRequest.InfoFieldNumber">
            <summary>Field number for the "info" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunPluginRequest.Info">
            <summary>
            The [plugin program](pulumirpc.ProgramInfo) to use.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunPluginRequest.KindFieldNumber">
            <summary>Field number for the "kind" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunPluginRequest.Kind">
            <summary>
            The kind of plugin to run (resource/analyzer/etc).
            </summary>
        </member>
        <member name="F:Pulumirpc.RunPluginRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunPluginRequest.Name">
            <summary>
            The name of the plugin (for display purposes)
            </summary>
        </member>
        <member name="F:Pulumirpc.RunPluginRequest.AttachDebuggerFieldNumber">
            <summary>Field number for the "attach_debugger" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunPluginRequest.AttachDebugger">
            <summary>
            True if a plugin should be started under a debugger.
            </summary>
        </member>
        <member name="T:Pulumirpc.RunPluginResponse">
            <summary>
            `RunPluginResponse` is the type of responses streamed by a [](pulumirpc.LanguageRuntime.RunPlugin) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.RunPluginResponse.StdoutFieldNumber">
            <summary>Field number for the "stdout" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunPluginResponse.Stdout">
            <summary>
            A line of standard output.
            </summary>
        </member>
        <member name="P:Pulumirpc.RunPluginResponse.HasStdout">
            <summary>Gets whether the "stdout" field is set</summary>
        </member>
        <member name="M:Pulumirpc.RunPluginResponse.ClearStdout">
            <summary> Clears the value of the oneof if it's currently set to "stdout" </summary>
        </member>
        <member name="F:Pulumirpc.RunPluginResponse.StderrFieldNumber">
            <summary>Field number for the "stderr" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunPluginResponse.Stderr">
            <summary>
            A line of standard error.
            </summary>
        </member>
        <member name="P:Pulumirpc.RunPluginResponse.HasStderr">
            <summary>Gets whether the "stderr" field is set</summary>
        </member>
        <member name="M:Pulumirpc.RunPluginResponse.ClearStderr">
            <summary> Clears the value of the oneof if it's currently set to "stderr" </summary>
        </member>
        <member name="F:Pulumirpc.RunPluginResponse.ExitcodeFieldNumber">
            <summary>Field number for the "exitcode" field.</summary>
        </member>
        <member name="P:Pulumirpc.RunPluginResponse.Exitcode">
            <summary>
            An exit code that the plugin program has terminated with. This should be the last message sent by the host.
            </summary>
        </member>
        <member name="P:Pulumirpc.RunPluginResponse.HasExitcode">
            <summary>Gets whether the "exitcode" field is set</summary>
        </member>
        <member name="M:Pulumirpc.RunPluginResponse.ClearExitcode">
            <summary> Clears the value of the oneof if it's currently set to "exitcode" </summary>
        </member>
        <member name="T:Pulumirpc.RunPluginResponse.OutputOneofCase">
            <summary>Enum of possible cases for the "output" oneof.</summary>
        </member>
        <member name="T:Pulumirpc.GenerateProgramRequest">
            <summary>
            `GenerateProgramRequest` is the type of requests sent as part of a [](pulumirpc.LanguageRuntime.GenerateProgram)
            call.
            </summary>
        </member>
        <member name="F:Pulumirpc.GenerateProgramRequest.SourceFieldNumber">
            <summary>Field number for the "source" field.</summary>
        </member>
        <member name="P:Pulumirpc.GenerateProgramRequest.Source">
            <summary>
            The source of the project, represented as a map of file names to [PCL](pcl) source code.
            </summary>
        </member>
        <member name="F:Pulumirpc.GenerateProgramRequest.LoaderTargetFieldNumber">
            <summary>Field number for the "loader_target" field.</summary>
        </member>
        <member name="P:Pulumirpc.GenerateProgramRequest.LoaderTarget">
            <summary>
            The target of a codegen.LoaderServer to use for loading schemas.
            </summary>
        </member>
        <member name="F:Pulumirpc.GenerateProgramRequest.StrictFieldNumber">
            <summary>Field number for the "strict" field.</summary>
        </member>
        <member name="P:Pulumirpc.GenerateProgramRequest.Strict">
            <summary>
            True if [PCL binding](pcl-binding) should be strict.
            </summary>
        </member>
        <member name="T:Pulumirpc.GenerateProgramResponse">
            <summary>
            `GenerateProgramResponse` is the type of responses sent by a [](pulumirpc.LanguageRuntime.GenerateProgram) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.GenerateProgramResponse.DiagnosticsFieldNumber">
            <summary>Field number for the "diagnostics" field.</summary>
        </member>
        <member name="P:Pulumirpc.GenerateProgramResponse.Diagnostics">
            <summary>
            Any diagnostics raised by code generation.
            </summary>
        </member>
        <member name="F:Pulumirpc.GenerateProgramResponse.SourceFieldNumber">
            <summary>Field number for the "source" field.</summary>
        </member>
        <member name="P:Pulumirpc.GenerateProgramResponse.Source">
            <summary>
            The generated program source code, represented as a map of file names to byte contents.
            </summary>
        </member>
        <member name="T:Pulumirpc.GenerateProjectRequest">
            <summary>
            `GenerateProjectRequest` is the type of requests sent as part of a [](pulumirpc.LanguageRuntime.GenerateProject) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.GenerateProjectRequest.SourceDirectoryFieldNumber">
            <summary>Field number for the "source_directory" field.</summary>
        </member>
        <member name="P:Pulumirpc.GenerateProjectRequest.SourceDirectory">
            <summary>
            The directory containing [PCL](pcl) source code, from which the project should be generated.
            </summary>
        </member>
        <member name="F:Pulumirpc.GenerateProjectRequest.TargetDirectoryFieldNumber">
            <summary>Field number for the "target_directory" field.</summary>
        </member>
        <member name="P:Pulumirpc.GenerateProjectRequest.TargetDirectory">
            <summary>
            The directory in which generated project files should be written. This should be an absolute path on the
            filesystem that is accessible to the language host.
            </summary>
        </member>
        <member name="F:Pulumirpc.GenerateProjectRequest.ProjectFieldNumber">
            <summary>Field number for the "project" field.</summary>
        </member>
        <member name="P:Pulumirpc.GenerateProjectRequest.Project">
            <summary>
            A string containing JSON to be used as the Pulumi project file (that is, as the contents of `Pulumi.yaml`).
            </summary>
        </member>
        <member name="F:Pulumirpc.GenerateProjectRequest.StrictFieldNumber">
            <summary>Field number for the "strict" field.</summary>
        </member>
        <member name="P:Pulumirpc.GenerateProjectRequest.Strict">
            <summary>
            True if [PCL binding](pcl-binding) should be strict.
            </summary>
        </member>
        <member name="F:Pulumirpc.GenerateProjectRequest.LoaderTargetFieldNumber">
            <summary>Field number for the "loader_target" field.</summary>
        </member>
        <member name="P:Pulumirpc.GenerateProjectRequest.LoaderTarget">
            <summary>
            The target of a codegen.LoaderServer to use for loading schemas.
            </summary>
        </member>
        <member name="F:Pulumirpc.GenerateProjectRequest.LocalDependenciesFieldNumber">
            <summary>Field number for the "local_dependencies" field.</summary>
        </member>
        <member name="P:Pulumirpc.GenerateProjectRequest.LocalDependencies">
            <summary>
            Local dependencies that the generated project should reference explicitly, instead of e.g. using the language's
            package system. This is a map of package names to local paths of language-specific artifacts that should be used.
            For instance, in the case of a NodeJS project, this might be a map of NPM package names to local paths to be
            used, such as `{ "@pulumi/aws": "/some/path/to/aws.tgz" }` if a local tarball is to be used instead of the
            published `@pulumi/aws` package.
            </summary>
        </member>
        <member name="T:Pulumirpc.GenerateProjectResponse">
            <summary>
            `GenerateProjectResponse` is the type of responses sent by a [](pulumirpc.LanguageRuntime.GenerateProject) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.GenerateProjectResponse.DiagnosticsFieldNumber">
            <summary>Field number for the "diagnostics" field.</summary>
        </member>
        <member name="P:Pulumirpc.GenerateProjectResponse.Diagnostics">
            <summary>
            Any diagnostics raised by code generation.
            </summary>
        </member>
        <member name="T:Pulumirpc.GeneratePackageRequest">
            <summary>
            `GeneratePackageRequest` is the type of requests sent as part of a [](pulumirpc.LanguageRuntime.GeneratePackage) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.GeneratePackageRequest.DirectoryFieldNumber">
            <summary>Field number for the "directory" field.</summary>
        </member>
        <member name="P:Pulumirpc.GeneratePackageRequest.Directory">
            <summary>
            The directory to generate the package in. This should be an absolute path on the filesystem that is accessible to
            the language host.
            </summary>
        </member>
        <member name="F:Pulumirpc.GeneratePackageRequest.SchemaFieldNumber">
            <summary>Field number for the "schema" field.</summary>
        </member>
        <member name="P:Pulumirpc.GeneratePackageRequest.Schema">
            <summary>
            A JSON-encoded string containing the schema from which the SDK package should be generated.
            </summary>
        </member>
        <member name="F:Pulumirpc.GeneratePackageRequest.ExtraFilesFieldNumber">
            <summary>Field number for the "extra_files" field.</summary>
        </member>
        <member name="P:Pulumirpc.GeneratePackageRequest.ExtraFiles">
            <summary>
            Extra files that should be copied as-is to the generated output.
            </summary>
        </member>
        <member name="F:Pulumirpc.GeneratePackageRequest.LoaderTargetFieldNumber">
            <summary>Field number for the "loader_target" field.</summary>
        </member>
        <member name="P:Pulumirpc.GeneratePackageRequest.LoaderTarget">
            <summary>
            The target of a codegen.LoaderServer to use for loading schemas.
            </summary>
        </member>
        <member name="F:Pulumirpc.GeneratePackageRequest.LocalDependenciesFieldNumber">
            <summary>Field number for the "local_dependencies" field.</summary>
        </member>
        <member name="P:Pulumirpc.GeneratePackageRequest.LocalDependencies">
            <summary>
            Local dependencies that the generated package should reference explicitly, instead of e.g. using the language's
            package system. This is a map of package names to local paths of language-specific artifacts that should be used.
            For instance, in the case of a NodeJS package, this might be a map of NPM package names to local paths to be
            used, such as `{ "@pulumi/aws": "/some/path/to/aws.tgz" }` if a local tarball is to be used instead of the
            published `@pulumi/aws` package.
            </summary>
        </member>
        <member name="F:Pulumirpc.GeneratePackageRequest.LocalFieldNumber">
            <summary>Field number for the "local" field.</summary>
        </member>
        <member name="P:Pulumirpc.GeneratePackageRequest.Local">
            <summary>
            If true, generates an SDK appropriate for local usage. This may differ from a standard publishable SDK depending
            on the language (e.g. for a NodeJS package that is intended to be imported locally, the language host may choose
            not to generate a `package.json`).
            </summary>
        </member>
        <member name="T:Pulumirpc.GeneratePackageResponse">
            <summary>
            `GeneratePackageResponse` is the type of responses sent by a [](pulumirpc.LanguageRuntime.GeneratePackage) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.GeneratePackageResponse.DiagnosticsFieldNumber">
            <summary>Field number for the "diagnostics" field.</summary>
        </member>
        <member name="P:Pulumirpc.GeneratePackageResponse.Diagnostics">
            <summary>
            Any diagnostics raised by code generation.
            </summary>
        </member>
        <member name="T:Pulumirpc.PackRequest">
            <summary>
            `PackRequest` is the type of requests sent as part of a [](pulumirpc.LanguageRuntime.Pack) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.PackRequest.PackageDirectoryFieldNumber">
            <summary>Field number for the "package_directory" field.</summary>
        </member>
        <member name="P:Pulumirpc.PackRequest.PackageDirectory">
            <summary>
            The directory containing the package to pack. This should be an absolute path on the filesystem that is accessible
            to the language host.
            </summary>
        </member>
        <member name="F:Pulumirpc.PackRequest.DestinationDirectoryFieldNumber">
            <summary>Field number for the "destination_directory" field.</summary>
        </member>
        <member name="P:Pulumirpc.PackRequest.DestinationDirectory">
            <summary>
            The directory to write the packed artifact to. This should be an absolute path on the filesystem that is
            accessible to the language host.
            </summary>
        </member>
        <member name="T:Pulumirpc.PackResponse">
            <summary>
            `PackResponse` is the type of responses sent by a [](pulumirpc.LanguageRuntime.Pack) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.PackResponse.ArtifactPathFieldNumber">
            <summary>Field number for the "artifact_path" field.</summary>
        </member>
        <member name="P:Pulumirpc.PackResponse.ArtifactPath">
            <summary>
            The path to the packed artifact. This should be an absolute path on the filesystem that is accessible to the
            language host.
            </summary>
        </member>
        <member name="T:Pulumirpc.LanguageHandshakeRequest">
            <summary>
            `LanguageHandshakeRequest` is the type of requests sent as part of a [](pulumirpc.LanguageRuntime.Handshake) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.LanguageHandshakeRequest.EngineAddressFieldNumber">
            <summary>Field number for the "engine_address" field.</summary>
        </member>
        <member name="P:Pulumirpc.LanguageHandshakeRequest.EngineAddress">
            <summary>
            The gRPC address of the engine calling the language host.
            </summary>
        </member>
        <member name="F:Pulumirpc.LanguageHandshakeRequest.RootDirectoryFieldNumber">
            <summary>Field number for the "root_directory" field.</summary>
        </member>
        <member name="P:Pulumirpc.LanguageHandshakeRequest.RootDirectory">
            <summary>
            The optional root directory, where the `PulumiPlugin.yaml` file or language binary is located. This can't be sent
            when the engine is attaching to a language via a port number.
            </summary>
        </member>
        <member name="P:Pulumirpc.LanguageHandshakeRequest.HasRootDirectory">
            <summary>Gets whether the "root_directory" field is set</summary>
        </member>
        <member name="M:Pulumirpc.LanguageHandshakeRequest.ClearRootDirectory">
            <summary>Clears the value of the "root_directory" field</summary>
        </member>
        <member name="F:Pulumirpc.LanguageHandshakeRequest.ProgramDirectoryFieldNumber">
            <summary>Field number for the "program_directory" field.</summary>
        </member>
        <member name="P:Pulumirpc.LanguageHandshakeRequest.ProgramDirectory">
            <summary>
            The optional absolute path to the directory of the language program to execute. Generally, but not required to
            be, underneath the root directory. This can't be sent when the engine is attaching to a language via a port
            number.
            </summary>
        </member>
        <member name="P:Pulumirpc.LanguageHandshakeRequest.HasProgramDirectory">
            <summary>Gets whether the "program_directory" field is set</summary>
        </member>
        <member name="M:Pulumirpc.LanguageHandshakeRequest.ClearProgramDirectory">
            <summary>Clears the value of the "program_directory" field</summary>
        </member>
        <member name="T:Pulumirpc.LanguageHandshakeResponse">
            <summary>
            `LanguageHandshakeResponse` is the type of responses sent by a [](pulumirpc.LanguageRuntime.Handshake) call.
            </summary>
        </member>
        <member name="T:Pulumirpc.LinkRequest">
            <summary>
            `LinkRequest` is the type of requests sent as part of a [](pulumirpc.LanguageRuntime.Link) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.LinkRequest.InfoFieldNumber">
            <summary>Field number for the "info" field.</summary>
        </member>
        <member name="P:Pulumirpc.LinkRequest.Info">
            <summary>
            The program to use.
            </summary>
        </member>
        <member name="F:Pulumirpc.LinkRequest.LocalDependenciesFieldNumber">
            <summary>Field number for the "local_dependencies" field.</summary>
        </member>
        <member name="P:Pulumirpc.LinkRequest.LocalDependencies">
            <summary>
            Local dependencies that the program should reference explicitly, instead of e.g. using the language's
            package system. This is a map of package names to local paths of language-specific artifacts that
            should be used. For instance, in the case of a NodeJS package, this might be a map of NPM package names
            to local paths to be used, such as `{ "@pulumi/aws": "/some/path/to/aws.tgz" }` if a local tarball is
            to be used instead of the published `@pulumi/aws` package.
            </summary>
        </member>
        <member name="F:Pulumirpc.LinkRequest.LoaderTargetFieldNumber">
            <summary>Field number for the "loader_target" field.</summary>
        </member>
        <member name="P:Pulumirpc.LinkRequest.LoaderTarget">
            <summary>
            The target of a codegen.LoaderServer to use for loading schemas.
            </summary>
        </member>
        <member name="T:Pulumirpc.LinkResponse">
            <summary>
            `LinkResponse` is the type of responses sent by a [](pulumirpc.LanguageRuntime.Link) call.
            </summary>
        </member>
        <member name="T:Pulumirpc.LanguageRuntime">
            <summary>
            The LanguageRuntime service defines a standard interface for [language hosts/runtimes](languages). At a high level, a
            language runtime provides the ability to execute programs, install and query dependencies, and generate code for a
            specific language.
            </summary>
        </member>
        <member name="P:Pulumirpc.LanguageRuntime.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Pulumirpc.LanguageRuntime.LanguageRuntimeBase">
            <summary>Base class for server-side implementations of LanguageRuntime</summary>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeBase.Handshake(Pulumirpc.LanguageHandshakeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            `Handshake` is the first call made by the engine to a language host. It is used to pass the engine's address to
            the language host so that it may establish its own connections back, and to establish protocol configuration that
            will be used to communicate between the two parties.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeBase.GetRequiredPlugins(Pulumirpc.GetRequiredPluginsRequest,Grpc.Core.ServerCallContext)">
             <summary>
             `GetRequiredPlugins` computes the complete set of anticipated [plugins](plugins) required by a Pulumi program.
             Among other things, it is intended to be used to pre-install plugins before running a program with
             [](pulumirpc.LanguageRuntime.Run), to avoid the need to install them on-demand in response to [resource
             registrations](resource-registration) sent back from the running program to the engine.
            
             :::{important}
             The use of `GetRequiredPlugins` is deprecated in favour of [](pulumirpc.LanguageRuntime.GetRequiredPackages),
             which returns more granular information about which plugins are required by which packages.
             :::
             </summary>
             <param name="request">The request received from the client.</param>
             <param name="context">The context of the server-side call handler being invoked.</param>
             <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeBase.GetRequiredPackages(Pulumirpc.GetRequiredPackagesRequest,Grpc.Core.ServerCallContext)">
            <summary>
            `GetRequiredPackages` computes the complete set of anticipated [packages](pulumirpc.PackageDependency) required
            by a program. It is used to pre-install packages before running a program with [](pulumirpc.LanguageRuntime.Run),
            to avoid the need to install them on-demand in response to [resource registrations](resource-registration) sent
            back from the running program to the engine. Moreover, when importing resources into a stack, it is used to
            determine which plugins are required to service the import of a given resource, since given the presence of
            [parameterized providers](parameterized-providers), it is not in general true that a package name corresponds 1:1
            with a plugin name. It replaces [](pulumirpc.LanguageRuntime.GetRequiredPlugins) in the face of [parameterized
            providers](parameterized-providers), which as mentioned above can enable multiple instances of the same plugin to
            provide multiple packages.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeBase.Run(Pulumirpc.RunRequest,Grpc.Core.ServerCallContext)">
            <summary>
            `Run` executes a Pulumi program, returning information about whether or not the program produced an error.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeBase.GetPluginInfo(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.ServerCallContext)">
            <summary>
            `GetPluginInfo` returns information about the [plugin](plugins) implementing this language runtime.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeBase.InstallDependencies(Pulumirpc.InstallDependenciesRequest,Grpc.Core.IServerStreamWriter{Pulumirpc.InstallDependenciesResponse},Grpc.Core.ServerCallContext)">
            <summary>
            `InstallDependencies` accepts a request specifying a Pulumi project and program that can be executed with
            [](pulumirpc.LanguageRuntime.Run) and installs the dependencies for that program (e.g. by running `npm install`
            for NodeJS, or `pip install` for Python). Since dependency installation could take a while, and callers may wish
            to report on its progress, this method returns a stream of [](pulumirpc.InstallDependenciesResponse) messages
            containing information about standard error and output.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="responseStream">Used for sending responses back to the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>A task indicating completion of the handler.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeBase.RuntimeOptionsPrompts(Pulumirpc.RuntimeOptionsRequest,Grpc.Core.ServerCallContext)">
            <summary>
            `RuntimeOptionsPrompts` accepts a request specifying a Pulumi project and returns a list of additional prompts to
            ask during `pulumi new`.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeBase.About(Pulumirpc.AboutRequest,Grpc.Core.ServerCallContext)">
            <summary>
            `About` returns information about the language runtime being used.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeBase.GetProgramDependencies(Pulumirpc.GetProgramDependenciesRequest,Grpc.Core.ServerCallContext)">
            <summary>
            `GetProgramDependencies` computes the set of language-level dependencies (e.g. NPM packages for NodeJS, or Maven
            libraries for Java) required by a program.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeBase.RunPlugin(Pulumirpc.RunPluginRequest,Grpc.Core.IServerStreamWriter{Pulumirpc.RunPluginResponse},Grpc.Core.ServerCallContext)">
            <summary>
            `RunPlugin` is used to execute a program written in this host's language that implements a Pulumi
            [plugin](plugins). It it is plugins what [](pulumirpc.LanguageRuntime.Run) is to programs. Since a plugin is not
            expected to terminate until instructed/for a long time, this method returns a stream of
            [](pulumirpc.RunPluginResponse) messages containing information about standard error and output, as well as the
            exit code of the plugin when it does terminate.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="responseStream">Used for sending responses back to the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>A task indicating completion of the handler.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeBase.GenerateProgram(Pulumirpc.GenerateProgramRequest,Grpc.Core.ServerCallContext)">
            <summary>
            `GenerateProgram` generates code in this host's language that implements the given [PCL](pcl) program. Unlike
            [](pulumirpc.LanguageRuntime.GenerateProject), this method *only* generates program code, and does not e.g.
            generate a `package.json` for a NodeJS project that details how to run that code.
            [](pulumirpc.LanguageRuntime.GenerateProject), this method underpins ["programgen"](programgen) and the main
            functionality powering `pulumi convert`.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeBase.GenerateProject(Pulumirpc.GenerateProjectRequest,Grpc.Core.ServerCallContext)">
            <summary>
            `GenerateProject` generates code in this host's language that implements the given [PCL](pcl) program and wraps
            it in some language-specific notion of a "project", where a project is a buildable or runnable artifact. In this
            sense, `GenerateProject`'s output is a superset of that of [](pulumirpc.LanguageRuntime.GenerateProgram). For
            instance, when generating a NodeJS project, this method might generate a corresponding `package.json` file, as
            well as the relevant NodeJS program code. Along with [](pulumirpc.LanguageRuntime.GenerateProgram), this method
            underpins ["programgen"](programgen) and the main functionality powering `pulumi convert`.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeBase.GeneratePackage(Pulumirpc.GeneratePackageRequest,Grpc.Core.ServerCallContext)">
            <summary>
            `GeneratePackage` generates code in this host's language that implements an [SDK](sdkgen) ("sdkgen") for the
            given Pulumi package, as specified by a [schema](schema).
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeBase.Pack(Pulumirpc.PackRequest,Grpc.Core.ServerCallContext)">
            <summary>
            `Pack` accepts a request specifying a generated SDK package and packs it into a language-specific artifact. For
            instance, in the case of Java, it might produce a JAR file from a list of `.java` sources; in the case of NodeJS,
            a `.tgz` file might be produced from a list of `.js` sources; and so on. Presently, `Pack` is primarily used in
            [language conformance tests](language-conformance-tests), though it is intended to be used more widely in future
            to standardise e.g. provider publishing workflows.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeBase.Link(Pulumirpc.LinkRequest,Grpc.Core.ServerCallContext)">
            <summary>
            `Link` links a local dependency into a project.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeBase.Cancel(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.ServerCallContext)">
            <summary>
            `Cancel` signals the language runtime to gracefully shut down and abort any ongoing operations.
            Operations aborted in this way will return an error.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="T:Pulumirpc.LanguageRuntime.LanguageRuntimeClient">
            <summary>Client for LanguageRuntime</summary>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for LanguageRuntime</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for LanguageRuntime that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.Handshake(Pulumirpc.LanguageHandshakeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `Handshake` is the first call made by the engine to a language host. It is used to pass the engine's address to
            the language host so that it may establish its own connections back, and to establish protocol configuration that
            will be used to communicate between the two parties.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.Handshake(Pulumirpc.LanguageHandshakeRequest,Grpc.Core.CallOptions)">
            <summary>
            `Handshake` is the first call made by the engine to a language host. It is used to pass the engine's address to
            the language host so that it may establish its own connections back, and to establish protocol configuration that
            will be used to communicate between the two parties.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.HandshakeAsync(Pulumirpc.LanguageHandshakeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `Handshake` is the first call made by the engine to a language host. It is used to pass the engine's address to
            the language host so that it may establish its own connections back, and to establish protocol configuration that
            will be used to communicate between the two parties.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.HandshakeAsync(Pulumirpc.LanguageHandshakeRequest,Grpc.Core.CallOptions)">
            <summary>
            `Handshake` is the first call made by the engine to a language host. It is used to pass the engine's address to
            the language host so that it may establish its own connections back, and to establish protocol configuration that
            will be used to communicate between the two parties.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GetRequiredPlugins(Pulumirpc.GetRequiredPluginsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `GetRequiredPlugins` computes the complete set of anticipated [plugins](plugins) required by a Pulumi program.
             Among other things, it is intended to be used to pre-install plugins before running a program with
             [](pulumirpc.LanguageRuntime.Run), to avoid the need to install them on-demand in response to [resource
             registrations](resource-registration) sent back from the running program to the engine.
            
             :::{important}
             The use of `GetRequiredPlugins` is deprecated in favour of [](pulumirpc.LanguageRuntime.GetRequiredPackages),
             which returns more granular information about which plugins are required by which packages.
             :::
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GetRequiredPlugins(Pulumirpc.GetRequiredPluginsRequest,Grpc.Core.CallOptions)">
             <summary>
             `GetRequiredPlugins` computes the complete set of anticipated [plugins](plugins) required by a Pulumi program.
             Among other things, it is intended to be used to pre-install plugins before running a program with
             [](pulumirpc.LanguageRuntime.Run), to avoid the need to install them on-demand in response to [resource
             registrations](resource-registration) sent back from the running program to the engine.
            
             :::{important}
             The use of `GetRequiredPlugins` is deprecated in favour of [](pulumirpc.LanguageRuntime.GetRequiredPackages),
             which returns more granular information about which plugins are required by which packages.
             :::
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GetRequiredPluginsAsync(Pulumirpc.GetRequiredPluginsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `GetRequiredPlugins` computes the complete set of anticipated [plugins](plugins) required by a Pulumi program.
             Among other things, it is intended to be used to pre-install plugins before running a program with
             [](pulumirpc.LanguageRuntime.Run), to avoid the need to install them on-demand in response to [resource
             registrations](resource-registration) sent back from the running program to the engine.
            
             :::{important}
             The use of `GetRequiredPlugins` is deprecated in favour of [](pulumirpc.LanguageRuntime.GetRequiredPackages),
             which returns more granular information about which plugins are required by which packages.
             :::
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GetRequiredPluginsAsync(Pulumirpc.GetRequiredPluginsRequest,Grpc.Core.CallOptions)">
             <summary>
             `GetRequiredPlugins` computes the complete set of anticipated [plugins](plugins) required by a Pulumi program.
             Among other things, it is intended to be used to pre-install plugins before running a program with
             [](pulumirpc.LanguageRuntime.Run), to avoid the need to install them on-demand in response to [resource
             registrations](resource-registration) sent back from the running program to the engine.
            
             :::{important}
             The use of `GetRequiredPlugins` is deprecated in favour of [](pulumirpc.LanguageRuntime.GetRequiredPackages),
             which returns more granular information about which plugins are required by which packages.
             :::
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GetRequiredPackages(Pulumirpc.GetRequiredPackagesRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `GetRequiredPackages` computes the complete set of anticipated [packages](pulumirpc.PackageDependency) required
            by a program. It is used to pre-install packages before running a program with [](pulumirpc.LanguageRuntime.Run),
            to avoid the need to install them on-demand in response to [resource registrations](resource-registration) sent
            back from the running program to the engine. Moreover, when importing resources into a stack, it is used to
            determine which plugins are required to service the import of a given resource, since given the presence of
            [parameterized providers](parameterized-providers), it is not in general true that a package name corresponds 1:1
            with a plugin name. It replaces [](pulumirpc.LanguageRuntime.GetRequiredPlugins) in the face of [parameterized
            providers](parameterized-providers), which as mentioned above can enable multiple instances of the same plugin to
            provide multiple packages.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GetRequiredPackages(Pulumirpc.GetRequiredPackagesRequest,Grpc.Core.CallOptions)">
            <summary>
            `GetRequiredPackages` computes the complete set of anticipated [packages](pulumirpc.PackageDependency) required
            by a program. It is used to pre-install packages before running a program with [](pulumirpc.LanguageRuntime.Run),
            to avoid the need to install them on-demand in response to [resource registrations](resource-registration) sent
            back from the running program to the engine. Moreover, when importing resources into a stack, it is used to
            determine which plugins are required to service the import of a given resource, since given the presence of
            [parameterized providers](parameterized-providers), it is not in general true that a package name corresponds 1:1
            with a plugin name. It replaces [](pulumirpc.LanguageRuntime.GetRequiredPlugins) in the face of [parameterized
            providers](parameterized-providers), which as mentioned above can enable multiple instances of the same plugin to
            provide multiple packages.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GetRequiredPackagesAsync(Pulumirpc.GetRequiredPackagesRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `GetRequiredPackages` computes the complete set of anticipated [packages](pulumirpc.PackageDependency) required
            by a program. It is used to pre-install packages before running a program with [](pulumirpc.LanguageRuntime.Run),
            to avoid the need to install them on-demand in response to [resource registrations](resource-registration) sent
            back from the running program to the engine. Moreover, when importing resources into a stack, it is used to
            determine which plugins are required to service the import of a given resource, since given the presence of
            [parameterized providers](parameterized-providers), it is not in general true that a package name corresponds 1:1
            with a plugin name. It replaces [](pulumirpc.LanguageRuntime.GetRequiredPlugins) in the face of [parameterized
            providers](parameterized-providers), which as mentioned above can enable multiple instances of the same plugin to
            provide multiple packages.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GetRequiredPackagesAsync(Pulumirpc.GetRequiredPackagesRequest,Grpc.Core.CallOptions)">
            <summary>
            `GetRequiredPackages` computes the complete set of anticipated [packages](pulumirpc.PackageDependency) required
            by a program. It is used to pre-install packages before running a program with [](pulumirpc.LanguageRuntime.Run),
            to avoid the need to install them on-demand in response to [resource registrations](resource-registration) sent
            back from the running program to the engine. Moreover, when importing resources into a stack, it is used to
            determine which plugins are required to service the import of a given resource, since given the presence of
            [parameterized providers](parameterized-providers), it is not in general true that a package name corresponds 1:1
            with a plugin name. It replaces [](pulumirpc.LanguageRuntime.GetRequiredPlugins) in the face of [parameterized
            providers](parameterized-providers), which as mentioned above can enable multiple instances of the same plugin to
            provide multiple packages.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.Run(Pulumirpc.RunRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `Run` executes a Pulumi program, returning information about whether or not the program produced an error.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.Run(Pulumirpc.RunRequest,Grpc.Core.CallOptions)">
            <summary>
            `Run` executes a Pulumi program, returning information about whether or not the program produced an error.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.RunAsync(Pulumirpc.RunRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `Run` executes a Pulumi program, returning information about whether or not the program produced an error.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.RunAsync(Pulumirpc.RunRequest,Grpc.Core.CallOptions)">
            <summary>
            `Run` executes a Pulumi program, returning information about whether or not the program produced an error.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GetPluginInfo(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `GetPluginInfo` returns information about the [plugin](plugins) implementing this language runtime.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GetPluginInfo(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.CallOptions)">
            <summary>
            `GetPluginInfo` returns information about the [plugin](plugins) implementing this language runtime.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GetPluginInfoAsync(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `GetPluginInfo` returns information about the [plugin](plugins) implementing this language runtime.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GetPluginInfoAsync(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.CallOptions)">
            <summary>
            `GetPluginInfo` returns information about the [plugin](plugins) implementing this language runtime.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.InstallDependencies(Pulumirpc.InstallDependenciesRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `InstallDependencies` accepts a request specifying a Pulumi project and program that can be executed with
            [](pulumirpc.LanguageRuntime.Run) and installs the dependencies for that program (e.g. by running `npm install`
            for NodeJS, or `pip install` for Python). Since dependency installation could take a while, and callers may wish
            to report on its progress, this method returns a stream of [](pulumirpc.InstallDependenciesResponse) messages
            containing information about standard error and output.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.InstallDependencies(Pulumirpc.InstallDependenciesRequest,Grpc.Core.CallOptions)">
            <summary>
            `InstallDependencies` accepts a request specifying a Pulumi project and program that can be executed with
            [](pulumirpc.LanguageRuntime.Run) and installs the dependencies for that program (e.g. by running `npm install`
            for NodeJS, or `pip install` for Python). Since dependency installation could take a while, and callers may wish
            to report on its progress, this method returns a stream of [](pulumirpc.InstallDependenciesResponse) messages
            containing information about standard error and output.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.RuntimeOptionsPrompts(Pulumirpc.RuntimeOptionsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `RuntimeOptionsPrompts` accepts a request specifying a Pulumi project and returns a list of additional prompts to
            ask during `pulumi new`.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.RuntimeOptionsPrompts(Pulumirpc.RuntimeOptionsRequest,Grpc.Core.CallOptions)">
            <summary>
            `RuntimeOptionsPrompts` accepts a request specifying a Pulumi project and returns a list of additional prompts to
            ask during `pulumi new`.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.RuntimeOptionsPromptsAsync(Pulumirpc.RuntimeOptionsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `RuntimeOptionsPrompts` accepts a request specifying a Pulumi project and returns a list of additional prompts to
            ask during `pulumi new`.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.RuntimeOptionsPromptsAsync(Pulumirpc.RuntimeOptionsRequest,Grpc.Core.CallOptions)">
            <summary>
            `RuntimeOptionsPrompts` accepts a request specifying a Pulumi project and returns a list of additional prompts to
            ask during `pulumi new`.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.About(Pulumirpc.AboutRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `About` returns information about the language runtime being used.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.About(Pulumirpc.AboutRequest,Grpc.Core.CallOptions)">
            <summary>
            `About` returns information about the language runtime being used.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.AboutAsync(Pulumirpc.AboutRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `About` returns information about the language runtime being used.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.AboutAsync(Pulumirpc.AboutRequest,Grpc.Core.CallOptions)">
            <summary>
            `About` returns information about the language runtime being used.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GetProgramDependencies(Pulumirpc.GetProgramDependenciesRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `GetProgramDependencies` computes the set of language-level dependencies (e.g. NPM packages for NodeJS, or Maven
            libraries for Java) required by a program.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GetProgramDependencies(Pulumirpc.GetProgramDependenciesRequest,Grpc.Core.CallOptions)">
            <summary>
            `GetProgramDependencies` computes the set of language-level dependencies (e.g. NPM packages for NodeJS, or Maven
            libraries for Java) required by a program.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GetProgramDependenciesAsync(Pulumirpc.GetProgramDependenciesRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `GetProgramDependencies` computes the set of language-level dependencies (e.g. NPM packages for NodeJS, or Maven
            libraries for Java) required by a program.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GetProgramDependenciesAsync(Pulumirpc.GetProgramDependenciesRequest,Grpc.Core.CallOptions)">
            <summary>
            `GetProgramDependencies` computes the set of language-level dependencies (e.g. NPM packages for NodeJS, or Maven
            libraries for Java) required by a program.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.RunPlugin(Pulumirpc.RunPluginRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `RunPlugin` is used to execute a program written in this host's language that implements a Pulumi
            [plugin](plugins). It it is plugins what [](pulumirpc.LanguageRuntime.Run) is to programs. Since a plugin is not
            expected to terminate until instructed/for a long time, this method returns a stream of
            [](pulumirpc.RunPluginResponse) messages containing information about standard error and output, as well as the
            exit code of the plugin when it does terminate.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.RunPlugin(Pulumirpc.RunPluginRequest,Grpc.Core.CallOptions)">
            <summary>
            `RunPlugin` is used to execute a program written in this host's language that implements a Pulumi
            [plugin](plugins). It it is plugins what [](pulumirpc.LanguageRuntime.Run) is to programs. Since a plugin is not
            expected to terminate until instructed/for a long time, this method returns a stream of
            [](pulumirpc.RunPluginResponse) messages containing information about standard error and output, as well as the
            exit code of the plugin when it does terminate.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GenerateProgram(Pulumirpc.GenerateProgramRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `GenerateProgram` generates code in this host's language that implements the given [PCL](pcl) program. Unlike
            [](pulumirpc.LanguageRuntime.GenerateProject), this method *only* generates program code, and does not e.g.
            generate a `package.json` for a NodeJS project that details how to run that code.
            [](pulumirpc.LanguageRuntime.GenerateProject), this method underpins ["programgen"](programgen) and the main
            functionality powering `pulumi convert`.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GenerateProgram(Pulumirpc.GenerateProgramRequest,Grpc.Core.CallOptions)">
            <summary>
            `GenerateProgram` generates code in this host's language that implements the given [PCL](pcl) program. Unlike
            [](pulumirpc.LanguageRuntime.GenerateProject), this method *only* generates program code, and does not e.g.
            generate a `package.json` for a NodeJS project that details how to run that code.
            [](pulumirpc.LanguageRuntime.GenerateProject), this method underpins ["programgen"](programgen) and the main
            functionality powering `pulumi convert`.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GenerateProgramAsync(Pulumirpc.GenerateProgramRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `GenerateProgram` generates code in this host's language that implements the given [PCL](pcl) program. Unlike
            [](pulumirpc.LanguageRuntime.GenerateProject), this method *only* generates program code, and does not e.g.
            generate a `package.json` for a NodeJS project that details how to run that code.
            [](pulumirpc.LanguageRuntime.GenerateProject), this method underpins ["programgen"](programgen) and the main
            functionality powering `pulumi convert`.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GenerateProgramAsync(Pulumirpc.GenerateProgramRequest,Grpc.Core.CallOptions)">
            <summary>
            `GenerateProgram` generates code in this host's language that implements the given [PCL](pcl) program. Unlike
            [](pulumirpc.LanguageRuntime.GenerateProject), this method *only* generates program code, and does not e.g.
            generate a `package.json` for a NodeJS project that details how to run that code.
            [](pulumirpc.LanguageRuntime.GenerateProject), this method underpins ["programgen"](programgen) and the main
            functionality powering `pulumi convert`.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GenerateProject(Pulumirpc.GenerateProjectRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `GenerateProject` generates code in this host's language that implements the given [PCL](pcl) program and wraps
            it in some language-specific notion of a "project", where a project is a buildable or runnable artifact. In this
            sense, `GenerateProject`'s output is a superset of that of [](pulumirpc.LanguageRuntime.GenerateProgram). For
            instance, when generating a NodeJS project, this method might generate a corresponding `package.json` file, as
            well as the relevant NodeJS program code. Along with [](pulumirpc.LanguageRuntime.GenerateProgram), this method
            underpins ["programgen"](programgen) and the main functionality powering `pulumi convert`.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GenerateProject(Pulumirpc.GenerateProjectRequest,Grpc.Core.CallOptions)">
            <summary>
            `GenerateProject` generates code in this host's language that implements the given [PCL](pcl) program and wraps
            it in some language-specific notion of a "project", where a project is a buildable or runnable artifact. In this
            sense, `GenerateProject`'s output is a superset of that of [](pulumirpc.LanguageRuntime.GenerateProgram). For
            instance, when generating a NodeJS project, this method might generate a corresponding `package.json` file, as
            well as the relevant NodeJS program code. Along with [](pulumirpc.LanguageRuntime.GenerateProgram), this method
            underpins ["programgen"](programgen) and the main functionality powering `pulumi convert`.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GenerateProjectAsync(Pulumirpc.GenerateProjectRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `GenerateProject` generates code in this host's language that implements the given [PCL](pcl) program and wraps
            it in some language-specific notion of a "project", where a project is a buildable or runnable artifact. In this
            sense, `GenerateProject`'s output is a superset of that of [](pulumirpc.LanguageRuntime.GenerateProgram). For
            instance, when generating a NodeJS project, this method might generate a corresponding `package.json` file, as
            well as the relevant NodeJS program code. Along with [](pulumirpc.LanguageRuntime.GenerateProgram), this method
            underpins ["programgen"](programgen) and the main functionality powering `pulumi convert`.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GenerateProjectAsync(Pulumirpc.GenerateProjectRequest,Grpc.Core.CallOptions)">
            <summary>
            `GenerateProject` generates code in this host's language that implements the given [PCL](pcl) program and wraps
            it in some language-specific notion of a "project", where a project is a buildable or runnable artifact. In this
            sense, `GenerateProject`'s output is a superset of that of [](pulumirpc.LanguageRuntime.GenerateProgram). For
            instance, when generating a NodeJS project, this method might generate a corresponding `package.json` file, as
            well as the relevant NodeJS program code. Along with [](pulumirpc.LanguageRuntime.GenerateProgram), this method
            underpins ["programgen"](programgen) and the main functionality powering `pulumi convert`.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GeneratePackage(Pulumirpc.GeneratePackageRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `GeneratePackage` generates code in this host's language that implements an [SDK](sdkgen) ("sdkgen") for the
            given Pulumi package, as specified by a [schema](schema).
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GeneratePackage(Pulumirpc.GeneratePackageRequest,Grpc.Core.CallOptions)">
            <summary>
            `GeneratePackage` generates code in this host's language that implements an [SDK](sdkgen) ("sdkgen") for the
            given Pulumi package, as specified by a [schema](schema).
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GeneratePackageAsync(Pulumirpc.GeneratePackageRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `GeneratePackage` generates code in this host's language that implements an [SDK](sdkgen) ("sdkgen") for the
            given Pulumi package, as specified by a [schema](schema).
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.GeneratePackageAsync(Pulumirpc.GeneratePackageRequest,Grpc.Core.CallOptions)">
            <summary>
            `GeneratePackage` generates code in this host's language that implements an [SDK](sdkgen) ("sdkgen") for the
            given Pulumi package, as specified by a [schema](schema).
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.Pack(Pulumirpc.PackRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `Pack` accepts a request specifying a generated SDK package and packs it into a language-specific artifact. For
            instance, in the case of Java, it might produce a JAR file from a list of `.java` sources; in the case of NodeJS,
            a `.tgz` file might be produced from a list of `.js` sources; and so on. Presently, `Pack` is primarily used in
            [language conformance tests](language-conformance-tests), though it is intended to be used more widely in future
            to standardise e.g. provider publishing workflows.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.Pack(Pulumirpc.PackRequest,Grpc.Core.CallOptions)">
            <summary>
            `Pack` accepts a request specifying a generated SDK package and packs it into a language-specific artifact. For
            instance, in the case of Java, it might produce a JAR file from a list of `.java` sources; in the case of NodeJS,
            a `.tgz` file might be produced from a list of `.js` sources; and so on. Presently, `Pack` is primarily used in
            [language conformance tests](language-conformance-tests), though it is intended to be used more widely in future
            to standardise e.g. provider publishing workflows.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.PackAsync(Pulumirpc.PackRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `Pack` accepts a request specifying a generated SDK package and packs it into a language-specific artifact. For
            instance, in the case of Java, it might produce a JAR file from a list of `.java` sources; in the case of NodeJS,
            a `.tgz` file might be produced from a list of `.js` sources; and so on. Presently, `Pack` is primarily used in
            [language conformance tests](language-conformance-tests), though it is intended to be used more widely in future
            to standardise e.g. provider publishing workflows.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.PackAsync(Pulumirpc.PackRequest,Grpc.Core.CallOptions)">
            <summary>
            `Pack` accepts a request specifying a generated SDK package and packs it into a language-specific artifact. For
            instance, in the case of Java, it might produce a JAR file from a list of `.java` sources; in the case of NodeJS,
            a `.tgz` file might be produced from a list of `.js` sources; and so on. Presently, `Pack` is primarily used in
            [language conformance tests](language-conformance-tests), though it is intended to be used more widely in future
            to standardise e.g. provider publishing workflows.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.Link(Pulumirpc.LinkRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `Link` links a local dependency into a project.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.Link(Pulumirpc.LinkRequest,Grpc.Core.CallOptions)">
            <summary>
            `Link` links a local dependency into a project.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.LinkAsync(Pulumirpc.LinkRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `Link` links a local dependency into a project.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.LinkAsync(Pulumirpc.LinkRequest,Grpc.Core.CallOptions)">
            <summary>
            `Link` links a local dependency into a project.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.Cancel(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `Cancel` signals the language runtime to gracefully shut down and abort any ongoing operations.
            Operations aborted in this way will return an error.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.Cancel(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.CallOptions)">
            <summary>
            `Cancel` signals the language runtime to gracefully shut down and abort any ongoing operations.
            Operations aborted in this way will return an error.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.CancelAsync(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `Cancel` signals the language runtime to gracefully shut down and abort any ongoing operations.
            Operations aborted in this way will return an error.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.CancelAsync(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.CallOptions)">
            <summary>
            `Cancel` signals the language runtime to gracefully shut down and abort any ongoing operations.
            Operations aborted in this way will return an error.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.LanguageRuntimeClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.BindService(Pulumirpc.LanguageRuntime.LanguageRuntimeBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Pulumirpc.LanguageRuntime.BindService(Grpc.Core.ServiceBinderBase,Pulumirpc.LanguageRuntime.LanguageRuntimeBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="T:Pulumirpc.PluginReflection">
            <summary>Holder for reflection information generated from pulumi/plugin.proto</summary>
        </member>
        <member name="P:Pulumirpc.PluginReflection.Descriptor">
            <summary>File descriptor for pulumi/plugin.proto</summary>
        </member>
        <member name="T:Pulumirpc.PluginInfo">
            <summary>
            PluginInfo is meta-information about a plugin that is used by the system.
            </summary>
        </member>
        <member name="F:Pulumirpc.PluginInfo.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Pulumirpc.PluginInfo.Version">
            <summary>
            the semver for this plugin.
            </summary>
        </member>
        <member name="T:Pulumirpc.PluginDependency">
            <summary>
            PluginDependency is information about a plugin that a program may depend upon.
            </summary>
        </member>
        <member name="F:Pulumirpc.PluginDependency.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.PluginDependency.Name">
            <summary>
            the name of the plugin.
            </summary>
        </member>
        <member name="F:Pulumirpc.PluginDependency.KindFieldNumber">
            <summary>Field number for the "kind" field.</summary>
        </member>
        <member name="P:Pulumirpc.PluginDependency.Kind">
            <summary>
            the kind of plugin (e.g., language, etc).
            </summary>
        </member>
        <member name="F:Pulumirpc.PluginDependency.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Pulumirpc.PluginDependency.Version">
            <summary>
            the semver for this plugin.
            </summary>
        </member>
        <member name="F:Pulumirpc.PluginDependency.ServerFieldNumber">
            <summary>Field number for the "server" field.</summary>
        </member>
        <member name="P:Pulumirpc.PluginDependency.Server">
            <summary>
            the URL of a server that can be used to download this plugin, if needed.
            </summary>
        </member>
        <member name="F:Pulumirpc.PluginDependency.ChecksumsFieldNumber">
            <summary>Field number for the "checksums" field.</summary>
        </member>
        <member name="P:Pulumirpc.PluginDependency.Checksums">
            <summary>
            a map of the checksums for the plugin, will be empty from old language runtimes. The keys should match
            the os and architecture names used in pulumi releases, e.g. "darwin-amd64", "windows-arm64".
            </summary>
        </member>
        <member name="T:Pulumirpc.PluginAttach">
             <summary>
             PluginAttach is used to attach an already running plugin to the engine.
            
             Normally the engine starts the plugin process itself and passes the engine address as the first argumnent.
             But when debugging it can be useful to have an already running provider that the engine instead attaches
             to, this message is used so the provider can still be passed the engine address to communicate with.
             </summary>
        </member>
        <member name="F:Pulumirpc.PluginAttach.AddressFieldNumber">
            <summary>Field number for the "address" field.</summary>
        </member>
        <member name="P:Pulumirpc.PluginAttach.Address">
            <summary>
            the grpc address for the engine
            </summary>
        </member>
        <member name="F:Pulumirpc.PackageParameterization.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.PackageParameterization.Name">
            <summary>
            the parameterized package name.
            </summary>
        </member>
        <member name="F:Pulumirpc.PackageParameterization.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Pulumirpc.PackageParameterization.Version">
            <summary>
            the parameterized package version.
            </summary>
        </member>
        <member name="F:Pulumirpc.PackageParameterization.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="P:Pulumirpc.PackageParameterization.Value">
            <summary>
            the parameter value for the parameterized package.
            </summary>
        </member>
        <member name="T:Pulumirpc.PackageDependency">
            <summary>
            PackageDependency is information about a package that a program may depend upon.
            </summary>
        </member>
        <member name="F:Pulumirpc.PackageDependency.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.PackageDependency.Name">
            <summary>
            the name of the plugin.
            </summary>
        </member>
        <member name="F:Pulumirpc.PackageDependency.KindFieldNumber">
            <summary>Field number for the "kind" field.</summary>
        </member>
        <member name="P:Pulumirpc.PackageDependency.Kind">
            <summary>
            the kind of plugin (e.g., language, etc).
            </summary>
        </member>
        <member name="F:Pulumirpc.PackageDependency.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Pulumirpc.PackageDependency.Version">
            <summary>
            the semver for this plugin.
            </summary>
        </member>
        <member name="F:Pulumirpc.PackageDependency.ServerFieldNumber">
            <summary>Field number for the "server" field.</summary>
        </member>
        <member name="P:Pulumirpc.PackageDependency.Server">
            <summary>
            the URL of a server that can be used to download this plugin, if needed.
            </summary>
        </member>
        <member name="F:Pulumirpc.PackageDependency.ChecksumsFieldNumber">
            <summary>Field number for the "checksums" field.</summary>
        </member>
        <member name="P:Pulumirpc.PackageDependency.Checksums">
            <summary>
            a map of the checksums for the plugin, will be empty from old language runtimes. The keys should match
            the os and architecture names used in pulumi releases, e.g. "darwin-amd64", "windows-arm64".
            </summary>
        </member>
        <member name="F:Pulumirpc.PackageDependency.ParameterizationFieldNumber">
            <summary>Field number for the "parameterization" field.</summary>
        </member>
        <member name="P:Pulumirpc.PackageDependency.Parameterization">
            <summary>
            The optional parameterization for this package.
            </summary>
        </member>
        <member name="T:Pulumirpc.ProviderReflection">
            <summary>Holder for reflection information generated from pulumi/provider.proto</summary>
        </member>
        <member name="P:Pulumirpc.ProviderReflection.Descriptor">
            <summary>File descriptor for pulumi/provider.proto</summary>
        </member>
        <member name="T:Pulumirpc.ProviderHandshakeRequest">
            <summary>
            `ProviderHandshakeRequest` is the type of requests sent as part of a [](pulumirpc.ResourceProvider.Handshake) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.ProviderHandshakeRequest.EngineAddressFieldNumber">
            <summary>Field number for the "engine_address" field.</summary>
        </member>
        <member name="P:Pulumirpc.ProviderHandshakeRequest.EngineAddress">
            <summary>
            The gRPC address of the engine handshaking with the provider. At a minimum, this address will expose an instance
            of the [](pulumirpc.Engine) service.
            </summary>
        </member>
        <member name="F:Pulumirpc.ProviderHandshakeRequest.RootDirectoryFieldNumber">
            <summary>Field number for the "root_directory" field.</summary>
        </member>
        <member name="P:Pulumirpc.ProviderHandshakeRequest.RootDirectory">
            <summary>
            A *root directory* where the provider's binary, `PulumiPlugin.yaml`, or other identifying source code is located.
            In the event that the provider is *not* being booted by the engine (e.g. in the case that the engine has been
            asked to attach to an existing running provider instance via a host/port number), this field will be empty.
            </summary>
        </member>
        <member name="P:Pulumirpc.ProviderHandshakeRequest.HasRootDirectory">
            <summary>Gets whether the "root_directory" field is set</summary>
        </member>
        <member name="M:Pulumirpc.ProviderHandshakeRequest.ClearRootDirectory">
            <summary>Clears the value of the "root_directory" field</summary>
        </member>
        <member name="F:Pulumirpc.ProviderHandshakeRequest.ProgramDirectoryFieldNumber">
            <summary>Field number for the "program_directory" field.</summary>
        </member>
        <member name="P:Pulumirpc.ProviderHandshakeRequest.ProgramDirectory">
            <summary>
            A *program directory* in which the provider should execute. This is generally a subdirectory of the root
            directory, though this is not required. In the event that the provider is *not* being booted by the engine (e.g.
            in the case that the engine has been asked to attach to an existing running provider instance via a host/port
            number), this field will be empty.
            </summary>
        </member>
        <member name="P:Pulumirpc.ProviderHandshakeRequest.HasProgramDirectory">
            <summary>Gets whether the "program_directory" field is set</summary>
        </member>
        <member name="M:Pulumirpc.ProviderHandshakeRequest.ClearProgramDirectory">
            <summary>Clears the value of the "program_directory" field</summary>
        </member>
        <member name="F:Pulumirpc.ProviderHandshakeRequest.ConfigureWithUrnFieldNumber">
            <summary>Field number for the "configure_with_urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.ProviderHandshakeRequest.ConfigureWithUrn">
            <summary>
            If true the engine will send URN, Name, Type, and ID to the provider as part of the configuration.
            </summary>
        </member>
        <member name="F:Pulumirpc.ProviderHandshakeRequest.SupportsViewsFieldNumber">
            <summary>Field number for the "supports_views" field.</summary>
        </member>
        <member name="P:Pulumirpc.ProviderHandshakeRequest.SupportsViews">
            <summary>
            If true the engine supports views and can send the address of a [](pulumirpc.ResourceStatus) service which can be
            used to e.g. create or update view resources.
            </summary>
        </member>
        <member name="F:Pulumirpc.ProviderHandshakeRequest.SupportsRefreshBeforeUpdateFieldNumber">
            <summary>Field number for the "supports_refresh_before_update" field.</summary>
        </member>
        <member name="P:Pulumirpc.ProviderHandshakeRequest.SupportsRefreshBeforeUpdate">
            <summary>
            If true the engine supports letting the provider mark resource states as requiring refresh before update.
            </summary>
        </member>
        <member name="T:Pulumirpc.ProviderHandshakeResponse">
            <summary>
            `ProviderHandshakeResponse` is the type of responses sent by a [](pulumirpc.ResourceProvider.Handshake) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.ProviderHandshakeResponse.AcceptSecretsFieldNumber">
            <summary>Field number for the "accept_secrets" field.</summary>
        </member>
        <member name="P:Pulumirpc.ProviderHandshakeResponse.AcceptSecrets">
            <summary>
            True if and only if the provider supports secrets. If true, the caller should pass secrets as strongly typed
            values to the provider. *Must* match the value returned in response to [](pulumirpc.ResourceProvider.Configure).
            </summary>
        </member>
        <member name="F:Pulumirpc.ProviderHandshakeResponse.AcceptResourcesFieldNumber">
            <summary>Field number for the "accept_resources" field.</summary>
        </member>
        <member name="P:Pulumirpc.ProviderHandshakeResponse.AcceptResources">
            <summary>
            True if and only if the provider supports strongly typed resources. If true, the caller should pass resources as
            strongly typed values to the provider. *Must* match the value returned in response to
            [](pulumirpc.ResourceProvider.Configure).
            </summary>
        </member>
        <member name="F:Pulumirpc.ProviderHandshakeResponse.AcceptOutputsFieldNumber">
            <summary>Field number for the "accept_outputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.ProviderHandshakeResponse.AcceptOutputs">
            <summary>
            True if and only if the provider supports output values as inputs. If true, the engine should pass output values
            to the provider where possible. *Must* match the value returned in response to
            [](pulumirpc.ResourceProvider.Configure).
            </summary>
        </member>
        <member name="F:Pulumirpc.ProviderHandshakeResponse.SupportsAutonamingConfigurationFieldNumber">
            <summary>Field number for the "supports_autonaming_configuration" field.</summary>
        </member>
        <member name="P:Pulumirpc.ProviderHandshakeResponse.SupportsAutonamingConfiguration">
            <summary>
            True if the provider accepts and respects autonaming configuration that the engine provides on behalf of the
            user. *Must* match the value returned in response to [](pulumirpc.ResourceProvider.Configure).
            </summary>
        </member>
        <member name="T:Pulumirpc.ParameterizeRequest">
             <summary>
             `ParameterizeRequest` is the type of requests sent as part of a [](pulumirpc.ResourceProvider.Parameterize) call. A
             `ParameterizeRequest` may contain either:
            
             * a string array (`ParametersArgs`), intended to represent a set of command-line arguments so as to support
               instantiating a parameterized provider from a command-line invocation (e.g. to generate an SDK).
             * a byte array accompanied by a name and version (`ParametersValue`), intended to represent a parameter embedded in a
               previously generated SDK.
            
             Embedding parameter values in SDKs allows programs to consume parameterized providers without needing to know the
             details of the parameterization. Allowing the representation embedded into an SDK to differ from that supplied on the
             command-line permits providers to implement optimizations for the common, fast-path case (program execution), such as
             embedding a generated schema as opposed to generating it on-demand for each resource registration.
             </summary>
        </member>
        <member name="F:Pulumirpc.ParameterizeRequest.ArgsFieldNumber">
            <summary>Field number for the "args" field.</summary>
        </member>
        <member name="P:Pulumirpc.ParameterizeRequest.Args">
            <summary>
            Arguments from the command line.
            </summary>
        </member>
        <member name="F:Pulumirpc.ParameterizeRequest.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="P:Pulumirpc.ParameterizeRequest.Value">
            <summary>
            Values from a generated SDK.
            </summary>
        </member>
        <member name="T:Pulumirpc.ParameterizeRequest.ParametersOneofCase">
            <summary>Enum of possible cases for the "parameters" oneof.</summary>
        </member>
        <member name="T:Pulumirpc.ParameterizeRequest.Types">
            <summary>Container for nested types declared in the ParameterizeRequest message type.</summary>
        </member>
        <member name="T:Pulumirpc.ParameterizeRequest.Types.ParametersArgs">
            <summary>
            A parameter value, represented as an array of strings, as might be provided by a command-line invocation, such as
            that used to generate an SDK.
            </summary>
        </member>
        <member name="F:Pulumirpc.ParameterizeRequest.Types.ParametersArgs.ArgsFieldNumber">
            <summary>Field number for the "args" field.</summary>
        </member>
        <member name="T:Pulumirpc.ParameterizeRequest.Types.ParametersValue">
            <summary>
            A parameter value, represented by an arbitrary array of bytes accompanied by a name and version. This is expected
            to be the format used by parameterized provider SDKs.
            </summary>
        </member>
        <member name="F:Pulumirpc.ParameterizeRequest.Types.ParametersValue.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.ParameterizeRequest.Types.ParametersValue.Name">
            <summary>
            The sub-package name for this sub-schema parameterization.
            </summary>
        </member>
        <member name="F:Pulumirpc.ParameterizeRequest.Types.ParametersValue.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Pulumirpc.ParameterizeRequest.Types.ParametersValue.Version">
            <summary>
            The sub-package version for this sub-schema parameterization.
            </summary>
        </member>
        <member name="F:Pulumirpc.ParameterizeRequest.Types.ParametersValue.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="P:Pulumirpc.ParameterizeRequest.Types.ParametersValue.Value">
            <summary>
            The embedded value from the sub-package.
            </summary>
        </member>
        <member name="T:Pulumirpc.ParameterizeResponse">
            <summary>
            `ParameterizeResponse` is the type of responses sent by a [](pulumirpc.ResourceProvider.Parameterize) call. It
            contains a name and version that can be used to identify the sub-package that now exists as a result of
            parameterization.
            </summary>
        </member>
        <member name="F:Pulumirpc.ParameterizeResponse.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.ParameterizeResponse.Name">
            <summary>
            The name of the sub-package parameterized.
            </summary>
        </member>
        <member name="F:Pulumirpc.ParameterizeResponse.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Pulumirpc.ParameterizeResponse.Version">
            <summary>
            The version of the sub-package parameterized.
            </summary>
        </member>
        <member name="F:Pulumirpc.GetSchemaRequest.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetSchemaRequest.Version">
            <summary>
            the schema version.
            </summary>
        </member>
        <member name="F:Pulumirpc.GetSchemaRequest.SubpackageNameFieldNumber">
            <summary>Field number for the "subpackage_name" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetSchemaRequest.SubpackageName">
            <summary>
            the name of the sub-package to lookup
            </summary>
        </member>
        <member name="F:Pulumirpc.GetSchemaRequest.SubpackageVersionFieldNumber">
            <summary>Field number for the "subpackage_version" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetSchemaRequest.SubpackageVersion">
            <summary>
            the version of the sub-package to lookup
            </summary>
        </member>
        <member name="F:Pulumirpc.GetSchemaResponse.SchemaFieldNumber">
            <summary>Field number for the "schema" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetSchemaResponse.Schema">
            <summary>
            the JSON-encoded schema.
            </summary>
        </member>
        <member name="T:Pulumirpc.ConfigureRequest">
            <summary>
            `ConfigureRequest` is the type of requests sent as part of a [](pulumirpc.ResourceProvider.Configure) call. Requests
            include both provider-specific inputs (`variables` or `args`) and provider-agnostic ("protocol") configuration
            (`acceptSecrets`, `acceptResources`, and so on).
            </summary>
        </member>
        <member name="F:Pulumirpc.ConfigureRequest.VariablesFieldNumber">
            <summary>Field number for the "variables" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConfigureRequest.Variables">
             <summary>
             :::{warning}
             `variables` is deprecated; `args` should be used instead wherever possible.
             :::
            
             A map of input properties for the provider. Compound values, such as nested objects, should be JSON encoded so
             that they too can be passed as strings. For instance, the following configuration:
            
             ```
             {
               "a": 42,
               "b": {
                 "c": "hello",
                 "d": true
               }
             }
             ```
            
             should be encoded as:
            
             ```
             {
               "a": "42",
               "b": "{\"c\":\"hello\",\"d\":true}"
             }
             ```
             </summary>
        </member>
        <member name="F:Pulumirpc.ConfigureRequest.ArgsFieldNumber">
            <summary>Field number for the "args" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConfigureRequest.Args">
             <summary>
             A map of input properties for the provider.
            
             :::{warning}
             `args` may include secrets. Because `ConfigureRequest` is sent before [](pulumirpc.ConfigureResponse) can specify
             whether or not the provider accepts secrets in general, providers *must* handle secrets if they appear in `args`.
             :::
             </summary>
        </member>
        <member name="F:Pulumirpc.ConfigureRequest.AcceptSecretsFieldNumber">
            <summary>Field number for the "acceptSecrets" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConfigureRequest.AcceptSecrets">
            <summary>
            True if and only if the caller supports secrets. If true, operations should return strongly typed secrets if the
            provider supports them also. *Must* be true if the caller has previously called
            [](pulumirpc.ResourceProvider.Handshake).
            </summary>
        </member>
        <member name="F:Pulumirpc.ConfigureRequest.AcceptResourcesFieldNumber">
            <summary>Field number for the "acceptResources" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConfigureRequest.AcceptResources">
            <summary>
            True if and only if the caller supports strongly typed resources. If true, operations should return resources as
            strongly typed values if the provider supports them also. *Must* be true if the caller has previously called
            [](pulumirpc.ResourceProvider.Handshake).
            </summary>
        </member>
        <member name="F:Pulumirpc.ConfigureRequest.SendsOldInputsFieldNumber">
            <summary>Field number for the "sends_old_inputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConfigureRequest.SendsOldInputs">
            <summary>
            True if and only if the caller supports sending old inputs as part of [](pulumirpc.ResourceProvider.Diff) and
            [](pulumirpc.ResourceProvider.Update) calls. If true, the provider should expect these fields to be populated in
            these calls. *Must* be true if the caller has previously called [](pulumirpc.ResourceProvider.Handshake).
            </summary>
        </member>
        <member name="F:Pulumirpc.ConfigureRequest.SendsOldInputsToDeleteFieldNumber">
            <summary>Field number for the "sends_old_inputs_to_delete" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConfigureRequest.SendsOldInputsToDelete">
            <summary>
            True if and only if the caller supports sending old inputs and outputs as part of
            [](pulumirpc.ResourceProvider.Delete) calls. If true, the provider should expect these fields to be populated in
            these calls. *Must* be true if the caller has previously called [](pulumirpc.ResourceProvider.Handshake).
            </summary>
        </member>
        <member name="F:Pulumirpc.ConfigureRequest.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConfigureRequest.Id">
            <summary>
            The ID of the provider being configured. N.B. This will be null if configure_with_urn was false in
            Handshake.
            </summary>
        </member>
        <member name="P:Pulumirpc.ConfigureRequest.HasId">
            <summary>Gets whether the "id" field is set</summary>
        </member>
        <member name="M:Pulumirpc.ConfigureRequest.ClearId">
            <summary>Clears the value of the "id" field</summary>
        </member>
        <member name="F:Pulumirpc.ConfigureRequest.UrnFieldNumber">
            <summary>Field number for the "urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConfigureRequest.Urn">
            <summary>
            The URN of the provider being configured. N.B. This will be null if configure_with_urn was false in
            Handshake.
            </summary>
        </member>
        <member name="P:Pulumirpc.ConfigureRequest.HasUrn">
            <summary>Gets whether the "urn" field is set</summary>
        </member>
        <member name="M:Pulumirpc.ConfigureRequest.ClearUrn">
            <summary>Clears the value of the "urn" field</summary>
        </member>
        <member name="F:Pulumirpc.ConfigureRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConfigureRequest.Name">
            <summary>
            The name of the provider being configured. This must match the name specified by the `urn` field, and
            is passed so that providers do not have to implement URN parsing in order to extract the name of the
            provider.  N.B. This will be null if configure_with_urn was false in Handshake.
            </summary>
        </member>
        <member name="P:Pulumirpc.ConfigureRequest.HasName">
            <summary>Gets whether the "name" field is set</summary>
        </member>
        <member name="M:Pulumirpc.ConfigureRequest.ClearName">
            <summary>Clears the value of the "name" field</summary>
        </member>
        <member name="F:Pulumirpc.ConfigureRequest.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConfigureRequest.Type">
            <summary>
            The type of the provider being configured. This must match the type specified by the `urn` field, and
            is passed so that providers do not have to implement URN parsing in order to extract the type of the
            provider. N.B. This will be null if configure_with_urn was false in Handshake.
            </summary>
        </member>
        <member name="P:Pulumirpc.ConfigureRequest.HasType">
            <summary>Gets whether the "type" field is set</summary>
        </member>
        <member name="M:Pulumirpc.ConfigureRequest.ClearType">
            <summary>Clears the value of the "type" field</summary>
        </member>
        <member name="T:Pulumirpc.ConfigureResponse">
            <summary>
            `ConfigureResponse` is the type of responses sent by a [](pulumirpc.ResourceProvider.Configure) call. Its primary
            purpose is to communicate features that the provider supports back to the caller.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConfigureResponse.AcceptSecretsFieldNumber">
            <summary>Field number for the "acceptSecrets" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConfigureResponse.AcceptSecrets">
            <summary>
            True if and only if the provider supports secrets. If true, the caller should pass secrets as strongly typed
            values to the provider. *Must* match the value returned in response to [](pulumirpc.ResourceProvider.Handshake)
            if the provider supports handshaking.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConfigureResponse.SupportsPreviewFieldNumber">
            <summary>Field number for the "supportsPreview" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConfigureResponse.SupportsPreview">
            <summary>
            True if and only if the provider supports the `preview` field on [](pulumirpc.ResourceProvider.Create) and
            [](pulumirpc.ResourceProvider.Update) calls. If true, the engine should invoke these calls with `preview` set to
            `true` during previews. *Must* be true if the provider implements [](pulumirpc.ResourceProvider.Handshake).
            </summary>
        </member>
        <member name="F:Pulumirpc.ConfigureResponse.AcceptResourcesFieldNumber">
            <summary>Field number for the "acceptResources" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConfigureResponse.AcceptResources">
            <summary>
            True if and only if the provider supports strongly typed resources. If true, the caller should pass resources as
            strongly typed values to the provider. *Must* match the value returned in response to
            [](pulumirpc.ResourceProvider.Handshake) if the provider supports handshaking.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConfigureResponse.AcceptOutputsFieldNumber">
            <summary>Field number for the "acceptOutputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConfigureResponse.AcceptOutputs">
            <summary>
            True if and only if the provider supports output values as inputs. If true, the engine should pass output values
            to the provider where possible. *Must* match the value returned in response to
            [](pulumirpc.ResourceProvider.Handshake) if the provider supports handshaking.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConfigureResponse.SupportsAutonamingConfigurationFieldNumber">
            <summary>Field number for the "supports_autonaming_configuration" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConfigureResponse.SupportsAutonamingConfiguration">
            <summary>
            True if the provider accepts and respects autonaming configuration that the engine provides on behalf of the
            user. *Must* match the value returned in response to [](pulumirpc.ResourceProvider.Handshake) if the provider
            supports handshaking.
            </summary>
        </member>
        <member name="T:Pulumirpc.ConfigureErrorMissingKeys">
            <summary>
            `ConfigureErrorMissingKeys` is the type of error details that may be sent in response to a
            [](pulumirpc.ResourceProvider.Configure) call when required configuration keys are missing.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConfigureErrorMissingKeys.MissingKeysFieldNumber">
            <summary>Field number for the "missingKeys" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConfigureErrorMissingKeys.MissingKeys">
            <summary>
            A list of required configuration keys that were not supplied.
            </summary>
        </member>
        <member name="T:Pulumirpc.ConfigureErrorMissingKeys.Types">
            <summary>Container for nested types declared in the ConfigureErrorMissingKeys message type.</summary>
        </member>
        <member name="T:Pulumirpc.ConfigureErrorMissingKeys.Types.MissingKey">
            <summary>
            The type of key-value pairs representing keys that are missing from a [](pulumirpc.ResourceProvider.Configure)
            call.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConfigureErrorMissingKeys.Types.MissingKey.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConfigureErrorMissingKeys.Types.MissingKey.Name">
             <summary>
             The name of the missing configuration key.
            
             :::{note}
             This should be the *Pulumi name* of the missing key, and not any provider-internal or upstream name. Names
             that differ between Pulumi and an upstream provider should be translated prior to being returned.
             :::
             </summary>
        </member>
        <member name="F:Pulumirpc.ConfigureErrorMissingKeys.Types.MissingKey.DescriptionFieldNumber">
            <summary>Field number for the "description" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConfigureErrorMissingKeys.Types.MissingKey.Description">
            <summary>
            A description of the missing config key, as reported by the provider.
            </summary>
        </member>
        <member name="F:Pulumirpc.InvokeRequest.TokFieldNumber">
            <summary>Field number for the "tok" field.</summary>
        </member>
        <member name="P:Pulumirpc.InvokeRequest.Tok">
            <summary>
            the function token to invoke.
            </summary>
        </member>
        <member name="F:Pulumirpc.InvokeRequest.ArgsFieldNumber">
            <summary>Field number for the "args" field.</summary>
        </member>
        <member name="P:Pulumirpc.InvokeRequest.Args">
            <summary>
            the arguments for the function invocation.
            </summary>
        </member>
        <member name="F:Pulumirpc.InvokeResponse.ReturnFieldNumber">
            <summary>Field number for the "return" field.</summary>
        </member>
        <member name="P:Pulumirpc.InvokeResponse.Return">
            <summary>
            the returned values, if invoke was successful.
            </summary>
        </member>
        <member name="F:Pulumirpc.InvokeResponse.FailuresFieldNumber">
            <summary>Field number for the "failures" field.</summary>
        </member>
        <member name="P:Pulumirpc.InvokeResponse.Failures">
            <summary>
            the failures if any arguments didn't pass verification.
            </summary>
        </member>
        <member name="F:Pulumirpc.CallRequest.TokFieldNumber">
            <summary>Field number for the "tok" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallRequest.Tok">
            <summary>
            the function token to invoke.
            </summary>
        </member>
        <member name="F:Pulumirpc.CallRequest.ArgsFieldNumber">
            <summary>Field number for the "args" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallRequest.Args">
            <summary>
            the arguments for the function invocation.
            </summary>
        </member>
        <member name="F:Pulumirpc.CallRequest.ArgDependenciesFieldNumber">
            <summary>Field number for the "argDependencies" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallRequest.ArgDependencies">
            <summary>
            a map from argument keys to the dependencies of the argument.
            </summary>
        </member>
        <member name="F:Pulumirpc.CallRequest.ProjectFieldNumber">
            <summary>Field number for the "project" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallRequest.Project">
            <summary>
            the project name.
            </summary>
        </member>
        <member name="F:Pulumirpc.CallRequest.StackFieldNumber">
            <summary>Field number for the "stack" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallRequest.Stack">
            <summary>
            the name of the stack being deployed into.
            </summary>
        </member>
        <member name="F:Pulumirpc.CallRequest.ConfigFieldNumber">
            <summary>Field number for the "config" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallRequest.Config">
            <summary>
            the configuration variables to apply before running.
            </summary>
        </member>
        <member name="F:Pulumirpc.CallRequest.ConfigSecretKeysFieldNumber">
            <summary>Field number for the "configSecretKeys" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallRequest.ConfigSecretKeys">
            <summary>
            the configuration keys that have secret values.
            </summary>
        </member>
        <member name="F:Pulumirpc.CallRequest.DryRunFieldNumber">
            <summary>Field number for the "dryRun" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallRequest.DryRun">
            <summary>
            true if we're only doing a dryrun (preview).
            </summary>
        </member>
        <member name="F:Pulumirpc.CallRequest.ParallelFieldNumber">
            <summary>Field number for the "parallel" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallRequest.Parallel">
            <summary>
            the degree of parallelism for resource operations (&lt;=1 for serial).
            </summary>
        </member>
        <member name="F:Pulumirpc.CallRequest.MonitorEndpointFieldNumber">
            <summary>Field number for the "monitorEndpoint" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallRequest.MonitorEndpoint">
            <summary>
            the address for communicating back to the resource monitor.
            </summary>
        </member>
        <member name="F:Pulumirpc.CallRequest.OrganizationFieldNumber">
            <summary>Field number for the "organization" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallRequest.Organization">
            <summary>
            the organization of the stack being deployed into.
            </summary>
        </member>
        <member name="F:Pulumirpc.CallRequest.AcceptsOutputValuesFieldNumber">
            <summary>Field number for the "accepts_output_values" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallRequest.AcceptsOutputValues">
            <summary>
            the engine can be passed output values back, returnDependencies can be left blank if returning output values.
            </summary>
        </member>
        <member name="F:Pulumirpc.CallRequest.StackTraceHandleFieldNumber">
            <summary>Field number for the "stack_trace_handle" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallRequest.StackTraceHandle">
            <summary>
            The stack trace handle for the call. Supports stitching stack traces together across plugins.
            </summary>
        </member>
        <member name="T:Pulumirpc.CallRequest.Types">
            <summary>Container for nested types declared in the CallRequest message type.</summary>
        </member>
        <member name="T:Pulumirpc.CallRequest.Types.ArgumentDependencies">
            <summary>
            ArgumentDependencies describes the resources that a particular argument depends on.
            </summary>
        </member>
        <member name="F:Pulumirpc.CallRequest.Types.ArgumentDependencies.UrnsFieldNumber">
            <summary>Field number for the "urns" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallRequest.Types.ArgumentDependencies.Urns">
            <summary>
            A list of URNs this argument depends on.
            </summary>
        </member>
        <member name="F:Pulumirpc.CallResponse.ReturnFieldNumber">
            <summary>Field number for the "return" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallResponse.Return">
            <summary>
            the returned values, if call was successful.
            </summary>
        </member>
        <member name="F:Pulumirpc.CallResponse.FailuresFieldNumber">
            <summary>Field number for the "failures" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallResponse.Failures">
            <summary>
            the failures if any arguments didn't pass verification.
            </summary>
        </member>
        <member name="F:Pulumirpc.CallResponse.ReturnDependenciesFieldNumber">
            <summary>Field number for the "returnDependencies" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallResponse.ReturnDependencies">
             <summary>
             a map from return value keys to the dependencies of the return value.
            
             returnDependencies will be augmented by the set of dependencies specified in return
             via output property values.
             </summary>
        </member>
        <member name="T:Pulumirpc.CallResponse.Types">
            <summary>Container for nested types declared in the CallResponse message type.</summary>
        </member>
        <member name="T:Pulumirpc.CallResponse.Types.ReturnDependencies">
            <summary>
            ReturnDependencies describes the resources that a particular return value depends on.
            </summary>
        </member>
        <member name="F:Pulumirpc.CallResponse.Types.ReturnDependencies.UrnsFieldNumber">
            <summary>Field number for the "urns" field.</summary>
        </member>
        <member name="P:Pulumirpc.CallResponse.Types.ReturnDependencies.Urns">
            <summary>
            A list of URNs this return value depends on.
            </summary>
        </member>
        <member name="T:Pulumirpc.CheckRequest">
            <summary>
            `CheckRequest` is the type of requests sent as part of [](pulumirpc.ResourceProvider.CheckConfig) and
            [](pulumirpc.ResourceProvider.Check) calls. A `CheckRequest` primarily captures the URN and inputs of the resource
            being checked. In the case of [](pulumirpc.ResourceProvider.CheckConfig), the URN will be the URN of the provider
            resource being constructed, which may or may not be a [default provider](default-providers), and the inputs will be
            the provider configuration.
            </summary>
        </member>
        <member name="F:Pulumirpc.CheckRequest.UrnFieldNumber">
            <summary>Field number for the "urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.CheckRequest.Urn">
            <summary>
            The URN of the resource whose inputs are being checked. In the case of
            [](pulumirpc.ResourceProvider.CheckConfig), this will be the URN of the provider resource being constructed,
            which may or may not be a [default provider](default-providers).
            </summary>
        </member>
        <member name="F:Pulumirpc.CheckRequest.OldsFieldNumber">
            <summary>Field number for the "olds" field.</summary>
        </member>
        <member name="P:Pulumirpc.CheckRequest.Olds">
            <summary>
            The old input properties or configuration for the resource, if any.
            </summary>
        </member>
        <member name="F:Pulumirpc.CheckRequest.NewsFieldNumber">
            <summary>Field number for the "news" field.</summary>
        </member>
        <member name="P:Pulumirpc.CheckRequest.News">
             <summary>
             The new input properties or configuration for the resource, if any.
            
             :::{note}
             If this resource has been specified with the
             [`ignoreChanges`](https://www.pulumi.com/docs/concepts/options/ignorechanges/), then the values in `news` may
             differ from those written in the Pulumi program registering this resource. In such cases, the caller (e.g. the
             Pulumi engine) is expected to preprocess the `news` value by replacing every property matched by `ignoreChanges`
             with its corresponding `olds` value (effectively ignoring the change).
             :::
             </summary>
        </member>
        <member name="F:Pulumirpc.CheckRequest.RandomSeedFieldNumber">
            <summary>Field number for the "randomSeed" field.</summary>
        </member>
        <member name="P:Pulumirpc.CheckRequest.RandomSeed">
            <summary>
            A random but deterministically computed hash, intended to be used for generating globally unique names.
            </summary>
        </member>
        <member name="F:Pulumirpc.CheckRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.CheckRequest.Name">
            <summary>
            The name of the resource being checked. This must match the name specified by the `urn` field, and is passed so
            that providers do not have to implement URN parsing in order to extract the name of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.CheckRequest.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="P:Pulumirpc.CheckRequest.Type">
            <summary>
            The type of the resource being checked. This must match the type specified by the `urn` field, and is passed so
            that providers do not have to implement URN parsing in order to extract the type of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.CheckRequest.AutonamingFieldNumber">
            <summary>Field number for the "autonaming" field.</summary>
        </member>
        <member name="T:Pulumirpc.CheckRequest.Types">
            <summary>Container for nested types declared in the CheckRequest message type.</summary>
        </member>
        <member name="T:Pulumirpc.CheckRequest.Types.AutonamingOptions">
            <summary>
            Configuration for automatic resource naming behavior. This structure contains fields that control how the provider
            handles resource names, including proposed names and naming modes.
            </summary>
        </member>
        <member name="F:Pulumirpc.CheckRequest.Types.AutonamingOptions.ProposedNameFieldNumber">
            <summary>Field number for the "proposed_name" field.</summary>
        </member>
        <member name="P:Pulumirpc.CheckRequest.Types.AutonamingOptions.ProposedName">
            <summary>
            The proposed name for the resource being checked. This may be used by the provider as a suggestion
            for the final resource name, depending on the specified mode.
            </summary>
        </member>
        <member name="F:Pulumirpc.CheckRequest.Types.AutonamingOptions.ModeFieldNumber">
            <summary>Field number for the "mode" field.</summary>
        </member>
        <member name="T:Pulumirpc.CheckRequest.Types.AutonamingOptions.Types">
            <summary>Container for nested types declared in the AutonamingOptions message type.</summary>
        </member>
        <member name="T:Pulumirpc.CheckRequest.Types.AutonamingOptions.Types.Mode">
            <summary>
            The mode that controls how the provider handles the proposed name. If not specified, defaults to `PROPOSE`.
            - `PROPOSE`: The provider may use the proposed name as a suggestion but is free to modify it.
            - `ENFORCE`: The provider must use exactly the proposed name or return an error.
            - `DISABLE`: The provider should disable automatic naming and return an error if no explicit name
              is provided by user's program.
            </summary>
        </member>
        <member name="T:Pulumirpc.CheckResponse">
             <summary>
             `CheckResponse` is the type of responses sent by a [](pulumirpc.ResourceProvider.CheckConfig) or
             [](pulumirpc.ResourceProvider.Check) call. A `CheckResponse` may contain either:
            
             * a set of checked, known-valid `inputs`. In the case of [](pulumirpc.ResourceProvider.CheckConfig), these may
               subsequently be passed to [](pulumirpc.ResourceProvider.DiffConfig) and/or
               [](pulumirpc.ResourceProvider.Configure). In the case of [](pulumirpc.ResourceProvider.Check), these may be passed
               to any of the supported lifecycle methods that accept provider inputs.
             * a set of `failures` detailing invalid inputs.
            
             In cases where the supplied set of inputs is valid, a `CheckResponse` may contain default values that should
             persisted to Pulumi state and passed to subsequent calls.
             </summary>
        </member>
        <member name="F:Pulumirpc.CheckResponse.InputsFieldNumber">
            <summary>Field number for the "inputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.CheckResponse.Inputs">
            <summary>
            A valid, checked set of inputs. May contain defaults.
            </summary>
        </member>
        <member name="F:Pulumirpc.CheckResponse.FailuresFieldNumber">
            <summary>Field number for the "failures" field.</summary>
        </member>
        <member name="P:Pulumirpc.CheckResponse.Failures">
            <summary>
            Any validation failures that occurred.
            </summary>
        </member>
        <member name="T:Pulumirpc.CheckFailure">
            <summary>
            A `CheckFailure` describes a single validation error that arose as part of a
            [](pulumirpc.ResourceProvider.CheckConfig) or [](pulumirpc.ResourceProvider.Check) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.CheckFailure.PropertyFieldNumber">
            <summary>Field number for the "property" field.</summary>
        </member>
        <member name="P:Pulumirpc.CheckFailure.Property">
            <summary>
            The input property that failed validation.
            </summary>
        </member>
        <member name="F:Pulumirpc.CheckFailure.ReasonFieldNumber">
            <summary>Field number for the "reason" field.</summary>
        </member>
        <member name="P:Pulumirpc.CheckFailure.Reason">
            <summary>
            The reason that the named property failed validation.
            </summary>
        </member>
        <member name="T:Pulumirpc.DiffRequest">
             <summary>
             `DiffRequest` is the type of requests sent as part of [](pulumirpc.ResourceProvider.DiffConfig) and
             [](pulumirpc.ResourceProvider.Diff) calls. A `DiffRequest` primarily captures:
            
             * the URN of the resource whose properties are being compared;
             * the old and new input properties of the resource; and
             * the old output properties of the resource.
            
             In the case of [](pulumirpc.ResourceProvider.DiffConfig), the URN will be the URN of the provider resource being
             examined, which may or may not be a [default provider](default-providers), and the inputs and outputs will be the
             provider configuration and state. Inputs supplied to a [](pulumirpc.ResourceProvider.DiffConfig) call should have
             been previously checked by a call to [](pulumirpc.ResourceProvider.CheckConfig); inputs supplied to a
             [](pulumirpc.ResourceProvider.Diff) call should have been previously checked by a call to
             [](pulumirpc.ResourceProvider.Check).
             </summary>
        </member>
        <member name="F:Pulumirpc.DiffRequest.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="P:Pulumirpc.DiffRequest.Id">
            <summary>
            The ID of the resource being diffed.
            </summary>
        </member>
        <member name="F:Pulumirpc.DiffRequest.UrnFieldNumber">
            <summary>Field number for the "urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.DiffRequest.Urn">
            <summary>
            The URN of the resource being diffed.
            </summary>
        </member>
        <member name="F:Pulumirpc.DiffRequest.OldsFieldNumber">
            <summary>Field number for the "olds" field.</summary>
        </member>
        <member name="P:Pulumirpc.DiffRequest.Olds">
            <summary>
            The old *output* properties of the resource being diffed.
            </summary>
        </member>
        <member name="F:Pulumirpc.DiffRequest.NewsFieldNumber">
            <summary>Field number for the "news" field.</summary>
        </member>
        <member name="P:Pulumirpc.DiffRequest.News">
            <summary>
            The new *input* properties of the resource being diffed. These should have been validated by an appropriate call
            to [](pulumirpc.ResourceProvider.CheckConfig) or [](pulumirpc.ResourceProvider.Check).
            </summary>
        </member>
        <member name="F:Pulumirpc.DiffRequest.IgnoreChangesFieldNumber">
            <summary>Field number for the "ignoreChanges" field.</summary>
        </member>
        <member name="P:Pulumirpc.DiffRequest.IgnoreChanges">
            <summary>
            A set of [property paths](property-paths) that should be treated as unchanged.
            </summary>
        </member>
        <member name="F:Pulumirpc.DiffRequest.OldInputsFieldNumber">
            <summary>Field number for the "old_inputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.DiffRequest.OldInputs">
            <summary>
            The old *input* properties of the resource being diffed.
            </summary>
        </member>
        <member name="F:Pulumirpc.DiffRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.DiffRequest.Name">
            <summary>
            The name of the resource being diffed. This must match the name specified by the `urn` field, and is passed so
            that providers do not have to implement URN parsing in order to extract the name of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.DiffRequest.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="P:Pulumirpc.DiffRequest.Type">
            <summary>
            The type of the resource being diffed. This must match the type specified by the `urn` field, and is passed so
            that providers do not have to implement URN parsing in order to extract the type of the resource.
            </summary>
        </member>
        <member name="T:Pulumirpc.PropertyDiff">
            <summary>
            `PropertyDiff` describes the kind of change that occurred to a property during a diff operation. A `PropertyDiff` may
            indicate that a property was added, deleted, or updated, and may further indicate that the change requires a
            replacement.
            </summary>
        </member>
        <member name="F:Pulumirpc.PropertyDiff.KindFieldNumber">
            <summary>Field number for the "kind" field.</summary>
        </member>
        <member name="P:Pulumirpc.PropertyDiff.Kind">
            <summary>
            The kind of diff associated with this property.
            </summary>
        </member>
        <member name="F:Pulumirpc.PropertyDiff.InputDiffFieldNumber">
            <summary>Field number for the "inputDiff" field.</summary>
        </member>
        <member name="P:Pulumirpc.PropertyDiff.InputDiff">
            <summary>
            True if and only if this difference represents one between a pair of old and new inputs, as opposed to a pair of
            old and new states.
            </summary>
        </member>
        <member name="T:Pulumirpc.PropertyDiff.Types">
            <summary>Container for nested types declared in the PropertyDiff message type.</summary>
        </member>
        <member name="T:Pulumirpc.PropertyDiff.Types.Kind">
            <summary>
            The type of property diff kinds.
            </summary>
        </member>
        <member name="F:Pulumirpc.PropertyDiff.Types.Kind.Add">
            <summary>
            This property was added.
            </summary>
        </member>
        <member name="F:Pulumirpc.PropertyDiff.Types.Kind.AddReplace">
            <summary>
            This property was added, and this change requires a replace.
            </summary>
        </member>
        <member name="F:Pulumirpc.PropertyDiff.Types.Kind.Delete">
            <summary>
            This property was removed.
            </summary>
        </member>
        <member name="F:Pulumirpc.PropertyDiff.Types.Kind.DeleteReplace">
            <summary>
            This property was removed, and this change requires a replace.
            </summary>
        </member>
        <member name="F:Pulumirpc.PropertyDiff.Types.Kind.Update">
            <summary>
            This property's value was changed.
            </summary>
        </member>
        <member name="F:Pulumirpc.PropertyDiff.Types.Kind.UpdateReplace">
            <summary>
            This property's value was changed, and this change requires a replace.
            </summary>
        </member>
        <member name="T:Pulumirpc.DiffResponse">
             <summary>
             `DiffResponse` is the type of responses sent by a [](pulumirpc.ResourceProvider.DiffConfig) or
             [](pulumirpc.ResourceProvider.Diff) call. A `DiffResponse` indicates whether a resource is unchanged, requires
             updating (that is, can be changed "in place"), or requires replacement (that is, must be destroyed and recreated
             anew). Legacy implementations may also signal that it is unknown whether there are changes or not.
            
             `DiffResponse` has evolved since its inception and there are now a number of ways that providers can signal their
             intent to callers:
            
             * *Simple diffs* utilise the `changes` field to signal which fields are responsible for a change, and the `replaces`
               field to further communicate which changes (if any) require a replacement as opposed to an update.
            
             * *Detailed diffs* are those with `hasDetailedDiff` set, and utilise the `detailedDiff` field to provide a more
               granular view of the changes that have occurred. Detailed diffs are designed to allow providers to control
               precisely which field names are displayed as responsible for a change, and to signal more accurately what kind of
               change occurred (e.g. a field was added, deleted or updated).
            
             The response must satisfy the following invariants:
            
             * For each top-level key in `diff` there is at least one matching property path, starting at that key, in `detailedDiff`.
             * For each entry in `detailedDiff`, its top-level property is in `diff`.
             * `diff` does not contain duplicates.
             * `detailedDiff` does not contain duplicate keys.
             </summary>
        </member>
        <member name="F:Pulumirpc.DiffResponse.ReplacesFieldNumber">
            <summary>Field number for the "replaces" field.</summary>
        </member>
        <member name="P:Pulumirpc.DiffResponse.Replaces">
            <summary>
            A set of properties which have changed and whose changes require the resource being diffed to be replaced. The
            caller should replace the resource if this set is non-empty, or if any of the properties specified in
            `detailedDiff` have a `*_REPLACE` kind.
            </summary>
        </member>
        <member name="F:Pulumirpc.DiffResponse.StablesFieldNumber">
            <summary>Field number for the "stables" field.</summary>
        </member>
        <member name="P:Pulumirpc.DiffResponse.Stables">
            <summary>
            An optional list of properties that will not ever change (are stable).
            </summary>
        </member>
        <member name="F:Pulumirpc.DiffResponse.DeleteBeforeReplaceFieldNumber">
            <summary>Field number for the "deleteBeforeReplace" field.</summary>
        </member>
        <member name="P:Pulumirpc.DiffResponse.DeleteBeforeReplace">
            <summary>
            If true, this resource must be deleted *before* its replacement is created.
            </summary>
        </member>
        <member name="F:Pulumirpc.DiffResponse.ChangesFieldNumber">
            <summary>Field number for the "changes" field.</summary>
        </member>
        <member name="P:Pulumirpc.DiffResponse.Changes">
            <summary>
            The result of the diff. Indicates at a high level whether the resource has changed or not (or, in legacy cases,
            if the provider does not know).
            </summary>
        </member>
        <member name="F:Pulumirpc.DiffResponse.DiffsFieldNumber">
            <summary>Field number for the "diffs" field.</summary>
        </member>
        <member name="P:Pulumirpc.DiffResponse.Diffs">
            <summary>
            The set of properties which have changed. This field only supports top-level properties. It *does not* support
            full [property paths](property-paths); implementations should use `detailedDiff` when this is required.
            </summary>
        </member>
        <member name="F:Pulumirpc.DiffResponse.DetailedDiffFieldNumber">
            <summary>Field number for the "detailedDiff" field.</summary>
        </member>
        <member name="P:Pulumirpc.DiffResponse.DetailedDiff">
            <summary>
            `detailedDiff` can be used to implement more detailed diffs. A detailed diff is a map from [property
            paths](property-paths) to [](pulumirpc.PropertyDiff)s, which describe the kind of change that occurred to the
            property located at that path. If a provider does not implement this, the caller (typically the Pulumi engine)
            will compute a representation based on the simple diff fields (`changes`, `replaces`, and so on).
            </summary>
        </member>
        <member name="F:Pulumirpc.DiffResponse.HasDetailedDiffFieldNumber">
            <summary>Field number for the "hasDetailedDiff" field.</summary>
        </member>
        <member name="P:Pulumirpc.DiffResponse.HasDetailedDiff">
            <summary>
            True if and only if this response contains a `detailedDiff`.
            </summary>
        </member>
        <member name="T:Pulumirpc.DiffResponse.Types">
            <summary>Container for nested types declared in the DiffResponse message type.</summary>
        </member>
        <member name="T:Pulumirpc.DiffResponse.Types.DiffChanges">
            <summary>
            The type of high-level diff results.
            </summary>
        </member>
        <member name="F:Pulumirpc.DiffResponse.Types.DiffChanges.DiffUnknown">
            <summary>
            A diff was performed but it is unknown whether there are changes or not. This exists to support legacy
            behaviour and should be generally avoided wherever possible.
            </summary>
        </member>
        <member name="F:Pulumirpc.DiffResponse.Types.DiffChanges.DiffNone">
            <summary>
            A diff was performed and there were no changes. An update is not required.
            </summary>
        </member>
        <member name="F:Pulumirpc.DiffResponse.Types.DiffChanges.DiffSome">
            <summary>
            A diff was performed, and changes were detected that require an update or replacement.
            </summary>
        </member>
        <member name="T:Pulumirpc.CreateRequest">
            <summary>
            `CreateRequest` is the type of requests sent as part of a [](pulumirpc.ResourceProvider.Create) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.CreateRequest.UrnFieldNumber">
            <summary>Field number for the "urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.CreateRequest.Urn">
            <summary>
            The URN of the resource being created.
            </summary>
        </member>
        <member name="F:Pulumirpc.CreateRequest.PropertiesFieldNumber">
            <summary>Field number for the "properties" field.</summary>
        </member>
        <member name="P:Pulumirpc.CreateRequest.Properties">
            <summary>
            The resource's input properties, to be set during creation. These should have been validated by a call to
            [](pulumirpc.ResourceProvider.Check).
            </summary>
        </member>
        <member name="F:Pulumirpc.CreateRequest.TimeoutFieldNumber">
            <summary>Field number for the "timeout" field.</summary>
        </member>
        <member name="P:Pulumirpc.CreateRequest.Timeout">
            <summary>
            A timeout in seconds that the caller is prepared to wait for the operation to complete.
            </summary>
        </member>
        <member name="F:Pulumirpc.CreateRequest.PreviewFieldNumber">
            <summary>Field number for the "preview" field.</summary>
        </member>
        <member name="P:Pulumirpc.CreateRequest.Preview">
            <summary>
            True if and only if the request is being made as part of a preview/dry run, in which case the provider should not
            actually create the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.CreateRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.CreateRequest.Name">
            <summary>
            The name of the resource being created. This must match the name specified by the `urn` field, and is passed so
            that providers do not have to implement URN parsing in order to extract the name of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.CreateRequest.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="P:Pulumirpc.CreateRequest.Type">
            <summary>
            The type of the resource being created. This must match the type specified by the `urn` field, and is passed so
            that providers do not have to implement URN parsing in order to extract the type of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.CreateRequest.ResourceStatusAddressFieldNumber">
            <summary>Field number for the "resource_status_address" field.</summary>
        </member>
        <member name="P:Pulumirpc.CreateRequest.ResourceStatusAddress">
            <summary>
            The address of a [](pulumirpc.ResourceStatus) service which can be used to e.g. create or update view resources.
            </summary>
        </member>
        <member name="F:Pulumirpc.CreateRequest.ResourceStatusTokenFieldNumber">
            <summary>Field number for the "resource_status_token" field.</summary>
        </member>
        <member name="P:Pulumirpc.CreateRequest.ResourceStatusToken">
            <summary>
            The [](pulumirpc.ResourceStatus) service context token to pass when calling methods on the service.
            </summary>
        </member>
        <member name="T:Pulumirpc.CreateResponse">
            <summary>
            `CreateResponse` is the type of responses sent by a [](pulumirpc.ResourceProvider.Create) call. A `CreateResponse`
            contains the ID of the created resource, as well as any output properties that arose from the creation process.
            </summary>
        </member>
        <member name="F:Pulumirpc.CreateResponse.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="P:Pulumirpc.CreateResponse.Id">
            <summary>
            The ID of the created resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.CreateResponse.PropertiesFieldNumber">
            <summary>Field number for the "properties" field.</summary>
        </member>
        <member name="P:Pulumirpc.CreateResponse.Properties">
            <summary>
            The resource's output properties. Typically this will be a union of the resource's input properties and any
            additional values that were computed or made available during creation.
            </summary>
        </member>
        <member name="F:Pulumirpc.CreateResponse.RefreshBeforeUpdateFieldNumber">
            <summary>Field number for the "refresh_before_update" field.</summary>
        </member>
        <member name="P:Pulumirpc.CreateResponse.RefreshBeforeUpdate">
            <summary>
            Indicates that this resource should always be refreshed prior to updates.
            </summary>
        </member>
        <member name="T:Pulumirpc.ReadRequest">
            <summary>
            `ReadRequest` is the type of requests sent as part of a [](pulumirpc.ResourceProvider.Read) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadRequest.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadRequest.Id">
            <summary>
            The ID of the resource to read.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadRequest.UrnFieldNumber">
            <summary>Field number for the "urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadRequest.Urn">
            <summary>
            The URN of the resource being read.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadRequest.PropertiesFieldNumber">
            <summary>Field number for the "properties" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadRequest.Properties">
            <summary>
            Any current state for the resource being read. This state should be sufficient to uniquely identify the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadRequest.InputsFieldNumber">
            <summary>Field number for the "inputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadRequest.Inputs">
            <summary>
            Any current input properties for the resource being read. These will only be populated when the
            [](pulumirpc.ResourceProvider.Read) call is being made as part of a refresh operation.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadRequest.Name">
            <summary>
            The name of the resource being read. This must match the name specified by the `urn` field, and is passed so that
            providers do not have to implement URN parsing in order to extract the name of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadRequest.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadRequest.Type">
            <summary>
            The type of the resource being read. This must match the type specified by the `urn` field, and is passed so that
            providers do not have to implement URN parsing in order to extract the type of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadRequest.ResourceStatusAddressFieldNumber">
            <summary>Field number for the "resource_status_address" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadRequest.ResourceStatusAddress">
            <summary>
            The address of a [](pulumirpc.ResourceStatus) service which can be used to e.g. create or update view resources.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadRequest.ResourceStatusTokenFieldNumber">
            <summary>Field number for the "resource_status_token" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadRequest.ResourceStatusToken">
            <summary>
            The [](pulumirpc.ResourceStatus) service context token to pass when calling methods on the service.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadRequest.OldViewsFieldNumber">
            <summary>Field number for the "old_views" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadRequest.OldViews">
            <summary>
            The old views for the resource being read. These will only be populated when the
            [](pulumirpc.ResourceProvider.Read) call is being made as part of a refresh operation.
            </summary>
        </member>
        <member name="T:Pulumirpc.ReadResponse">
            <summary>
            `ReadResponse` is the type of responses sent by a [](pulumirpc.ResourceProvider.Read) call. A `ReadResponse` contains
            the ID of the resource being read, as well as any state that was successfully read from the live environment.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResponse.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResponse.Id">
            <summary>
            The ID of the read resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResponse.PropertiesFieldNumber">
            <summary>Field number for the "properties" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResponse.Properties">
            <summary>
            The output properties of the resource read from the live environment.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResponse.InputsFieldNumber">
            <summary>Field number for the "inputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResponse.Inputs">
            <summary>
            Output-derived input properties for the resource. These are returned as they would be returned from a
            [](pulumirpc.ResourceProvider.Check) call with the same values.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResponse.RefreshBeforeUpdateFieldNumber">
            <summary>Field number for the "refresh_before_update" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResponse.RefreshBeforeUpdate">
            <summary>
            Indicates that this resource should always be refreshed prior to updates.
            </summary>
        </member>
        <member name="T:Pulumirpc.UpdateRequest">
            <summary>
            `UpdateRequest` is the type of requests sent as part of a [](pulumirpc.ResourceProvider.Update) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.UpdateRequest.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="P:Pulumirpc.UpdateRequest.Id">
            <summary>
            The ID of the resource being updated.
            </summary>
        </member>
        <member name="F:Pulumirpc.UpdateRequest.UrnFieldNumber">
            <summary>Field number for the "urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.UpdateRequest.Urn">
            <summary>
            The URN of the resource being updated.
            </summary>
        </member>
        <member name="F:Pulumirpc.UpdateRequest.OldsFieldNumber">
            <summary>Field number for the "olds" field.</summary>
        </member>
        <member name="P:Pulumirpc.UpdateRequest.Olds">
            <summary>
            The old *output* properties of the resource being updated.
            </summary>
        </member>
        <member name="F:Pulumirpc.UpdateRequest.NewsFieldNumber">
            <summary>Field number for the "news" field.</summary>
        </member>
        <member name="P:Pulumirpc.UpdateRequest.News">
            <summary>
            The new input properties of the resource being updated. These should have been validated by a call to
            [](pulumirpc.ResourceProvider.Check).
            </summary>
        </member>
        <member name="F:Pulumirpc.UpdateRequest.TimeoutFieldNumber">
            <summary>Field number for the "timeout" field.</summary>
        </member>
        <member name="P:Pulumirpc.UpdateRequest.Timeout">
            <summary>
            A timeout in seconds that the caller is prepared to wait for the operation to complete.
            </summary>
        </member>
        <member name="F:Pulumirpc.UpdateRequest.IgnoreChangesFieldNumber">
            <summary>Field number for the "ignoreChanges" field.</summary>
        </member>
        <member name="P:Pulumirpc.UpdateRequest.IgnoreChanges">
            <summary>
            A set of [property paths](property-paths) that should be treated as unchanged.
            </summary>
        </member>
        <member name="F:Pulumirpc.UpdateRequest.PreviewFieldNumber">
            <summary>Field number for the "preview" field.</summary>
        </member>
        <member name="P:Pulumirpc.UpdateRequest.Preview">
            <summary>
            True if and only if the request is being made as part of a preview/dry run, in which case the provider should not
            actually update the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.UpdateRequest.OldInputsFieldNumber">
            <summary>Field number for the "old_inputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.UpdateRequest.OldInputs">
            <summary>
            The old *input* properties of the resource being updated.
            </summary>
        </member>
        <member name="F:Pulumirpc.UpdateRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.UpdateRequest.Name">
            <summary>
            The name of the resource being updated. This must match the name specified by the `urn` field, and is passed so
            that providers do not have to implement URN parsing in order to extract the name of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.UpdateRequest.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="P:Pulumirpc.UpdateRequest.Type">
            <summary>
            The type of the resource being updated. This must match the type specified by the `urn` field, and is passed so
            that providers do not have to implement URN parsing in order to extract the type of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.UpdateRequest.ResourceStatusAddressFieldNumber">
            <summary>Field number for the "resource_status_address" field.</summary>
        </member>
        <member name="P:Pulumirpc.UpdateRequest.ResourceStatusAddress">
            <summary>
            The address of a [](pulumirpc.ResourceStatus) service which can be used to e.g. create or update view resources.
            </summary>
        </member>
        <member name="F:Pulumirpc.UpdateRequest.ResourceStatusTokenFieldNumber">
            <summary>Field number for the "resource_status_token" field.</summary>
        </member>
        <member name="P:Pulumirpc.UpdateRequest.ResourceStatusToken">
            <summary>
            The [](pulumirpc.ResourceStatus) service context token to pass when calling methods on the service.
            </summary>
        </member>
        <member name="F:Pulumirpc.UpdateRequest.OldViewsFieldNumber">
            <summary>Field number for the "old_views" field.</summary>
        </member>
        <member name="P:Pulumirpc.UpdateRequest.OldViews">
            <summary>
            The old views for the resource being updated.
            </summary>
        </member>
        <member name="T:Pulumirpc.UpdateResponse">
            <summary>
            `UpdateResponse` is the type of responses sent by a [](pulumirpc.ResourceProvider.Update) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.UpdateResponse.PropertiesFieldNumber">
            <summary>Field number for the "properties" field.</summary>
        </member>
        <member name="P:Pulumirpc.UpdateResponse.Properties">
            <summary>
            An updated set of resource output properties. Typically this will be a union of the resource's inputs and any
            additional values that were computed or made available during the update.
            </summary>
        </member>
        <member name="F:Pulumirpc.UpdateResponse.RefreshBeforeUpdateFieldNumber">
            <summary>Field number for the "refresh_before_update" field.</summary>
        </member>
        <member name="P:Pulumirpc.UpdateResponse.RefreshBeforeUpdate">
            <summary>
            Indicates that this resource should always be refreshed prior to updates.
            </summary>
        </member>
        <member name="T:Pulumirpc.DeleteRequest">
            <summary>
            `DeleteRequest` is the type of requests sent as part of a [](pulumirpc.ResourceProvider.Delete) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.DeleteRequest.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="P:Pulumirpc.DeleteRequest.Id">
            <summary>
            The ID of the resource to delete.
            </summary>
        </member>
        <member name="F:Pulumirpc.DeleteRequest.UrnFieldNumber">
            <summary>Field number for the "urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.DeleteRequest.Urn">
            <summary>
            The URN of the resource to delete.
            </summary>
        </member>
        <member name="F:Pulumirpc.DeleteRequest.PropertiesFieldNumber">
            <summary>Field number for the "properties" field.</summary>
        </member>
        <member name="P:Pulumirpc.DeleteRequest.Properties">
            <summary>
            The old *output* properties of the resource being deleted.
            </summary>
        </member>
        <member name="F:Pulumirpc.DeleteRequest.TimeoutFieldNumber">
            <summary>Field number for the "timeout" field.</summary>
        </member>
        <member name="P:Pulumirpc.DeleteRequest.Timeout">
            <summary>
            A timeout in seconds that the caller is prepared to wait for the operation to complete.
            </summary>
        </member>
        <member name="F:Pulumirpc.DeleteRequest.OldInputsFieldNumber">
            <summary>Field number for the "old_inputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.DeleteRequest.OldInputs">
            <summary>
            The old *input* properties of the resource being deleted.
            </summary>
        </member>
        <member name="F:Pulumirpc.DeleteRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.DeleteRequest.Name">
            <summary>
            The name of the resource being deleted. This must match the name specified by the `urn` field, and is passed so
            that providers do not have to implement URN parsing in order to extract the name of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.DeleteRequest.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="P:Pulumirpc.DeleteRequest.Type">
            <summary>
            The type of the resource being deleted. This must match the type specified by the `urn` field, and is passed so
            that providers do not have to implement URN parsing in order to extract the type of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.DeleteRequest.ResourceStatusAddressFieldNumber">
            <summary>Field number for the "resource_status_address" field.</summary>
        </member>
        <member name="P:Pulumirpc.DeleteRequest.ResourceStatusAddress">
            <summary>
            The address of a [](pulumirpc.ResourceStatus) service which can be used to e.g. create or update view resources.
            </summary>
        </member>
        <member name="F:Pulumirpc.DeleteRequest.ResourceStatusTokenFieldNumber">
            <summary>Field number for the "resource_status_token" field.</summary>
        </member>
        <member name="P:Pulumirpc.DeleteRequest.ResourceStatusToken">
            <summary>
            The [](pulumirpc.ResourceStatus) service context token to pass when calling methods on the service.
            </summary>
        </member>
        <member name="F:Pulumirpc.DeleteRequest.OldViewsFieldNumber">
            <summary>Field number for the "old_views" field.</summary>
        </member>
        <member name="P:Pulumirpc.DeleteRequest.OldViews">
            <summary>
            The old views for the resource being read.
            </summary>
        </member>
        <member name="T:Pulumirpc.ConstructRequest">
            <summary>
            `ConstructRequest` is the type of requests sent as part of a [](pulumirpc.ResourceProvider.Construct) call. A
            `ConstructRequest` captures enough data to be able to register nested components against the caller's resource
            monitor.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.ProjectFieldNumber">
            <summary>Field number for the "project" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.Project">
            <summary>
            The project to which this resource and its nested resources will belong.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.StackFieldNumber">
            <summary>Field number for the "stack" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.Stack">
            <summary>
            The name of the stack being deployed into.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.ConfigFieldNumber">
            <summary>Field number for the "config" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.Config">
            <summary>
            Configuration for the specified project and stack.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.DryRunFieldNumber">
            <summary>Field number for the "dryRun" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.DryRun">
            <summary>
            True if and only if the request is being made as part of a preview/dry run, in which case the provider should not
            actually construct the component.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.ParallelFieldNumber">
            <summary>Field number for the "parallel" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.Parallel">
            <summary>
            The degree of parallelism that may be used for resource operations. A value less than or equal to 1 indicates
            that operations should be performed serially.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.MonitorEndpointFieldNumber">
            <summary>Field number for the "monitorEndpoint" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.MonitorEndpoint">
            <summary>
            The address of the [](pulumirpc.ResourceMonitor) that the provider should connect to in order to send [resource
            registrations](resource-registration) for its nested resources.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.Type">
            <summary>
            The type of the component resource being constructed. This must match the type specified by the `urn` field, and
            is passed so that providers do not have to implement URN parsing in order to extract the type of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.Name">
            <summary>
            The name of the component resource being constructed. This must match the name specified by the `urn` field, and
            is passed so that providers do not have to implement URN parsing in order to extract the name of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.ParentFieldNumber">
            <summary>Field number for the "parent" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.Parent">
            <summary>
            An optional parent resource that the component (and by extension, its nested resources) should be children of.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.InputsFieldNumber">
            <summary>Field number for the "inputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.Inputs">
            <summary>
            The component resource's input properties. Unlike the inputs of custom resources, these will *not* have been
            passed to a call to [](pulumirpc.ResourceProvider.Check). By virtue of their being a composition of other
            resources, component resources are able to (and therefore expected) to validate their own inputs. Moreover,
            [](pulumirpc.ResourceProvider.Check) will be called on any inputs passed to nested custom resources as usual.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.InputDependenciesFieldNumber">
            <summary>Field number for the "inputDependencies" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.InputDependencies">
            <summary>
            A map of property dependencies for the component resource and its nested resources.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.ProvidersFieldNumber">
            <summary>Field number for the "providers" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.Providers">
            <summary>
            A map of package names to provider references for the component resource and its nested resources.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.DependenciesFieldNumber">
            <summary>Field number for the "dependencies" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.Dependencies">
            <summary>
            A list of URNs that this resource and its nested resources depend on.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.ConfigSecretKeysFieldNumber">
            <summary>Field number for the "configSecretKeys" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.ConfigSecretKeys">
            <summary>
            A set of configuration keys whose values are [secret](output-secrets).
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.OrganizationFieldNumber">
            <summary>Field number for the "organization" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.Organization">
            <summary>
            The organization to which this resource and its nested resources will belong.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.ProtectFieldNumber">
            <summary>Field number for the "protect" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.Protect">
            <summary>
            True if and only if the resource (and by extension, its nested resources) should be marked as protected.
            Protected resources cannot be deleted without first being unprotected.
            </summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.HasProtect">
            <summary>Gets whether the "protect" field is set</summary>
        </member>
        <member name="M:Pulumirpc.ConstructRequest.ClearProtect">
            <summary>Clears the value of the "protect" field</summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.AliasesFieldNumber">
            <summary>Field number for the "aliases" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.Aliases">
            <summary>
            A list of additional URNs that should be considered the same as this component's URN (and which will therefore be
            used to build aliases for its nested resource URNs). These may be URNs that previously referred to this component
            e.g. if it had its parent (and consequently URN) changed.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.AdditionalSecretOutputsFieldNumber">
            <summary>Field number for the "additionalSecretOutputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.AdditionalSecretOutputs">
            <summary>
            A list of input properties whose values should be treated as [secret](output-secrets).
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.CustomTimeoutsFieldNumber">
            <summary>Field number for the "customTimeouts" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.CustomTimeouts">
            <summary>
            A set of custom timeouts that specify how long the caller is prepared to wait for the various CRUD operations of
            this resource's nested resources.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.DeletedWithFieldNumber">
            <summary>Field number for the "deletedWith" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.DeletedWith">
            <summary>
            The URN of a resource that this resource (and thus its nested resources) will be implicitly deleted with. If the
            resource referred to by this URN is deleted in the same operation that this resource would be deleted, the
            [](pulumirpc.ResourceProvider.Delete) call for this resource will be elided (since this dependency signals that
            it will have already been deleted).
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.DeleteBeforeReplaceFieldNumber">
            <summary>Field number for the "deleteBeforeReplace" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.DeleteBeforeReplace">
            <summary>
            If true, this resource (and its nested resources) must be deleted *before* its replacement is created.
            </summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.HasDeleteBeforeReplace">
            <summary>Gets whether the "deleteBeforeReplace" field is set</summary>
        </member>
        <member name="M:Pulumirpc.ConstructRequest.ClearDeleteBeforeReplace">
            <summary>Clears the value of the "deleteBeforeReplace" field</summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.IgnoreChangesFieldNumber">
            <summary>Field number for the "ignoreChanges" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.IgnoreChanges">
            <summary>
            A set of [property paths](property-paths) that should be treated as unchanged.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.ReplaceOnChangesFieldNumber">
            <summary>Field number for the "replaceOnChanges" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.ReplaceOnChanges">
            <summary>
            A set of properties that, when changed, trigger a replacement.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.RetainOnDeleteFieldNumber">
            <summary>Field number for the "retainOnDelete" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.RetainOnDelete">
            <summary>
            True if [](pulumirpc.ResourceProvider.Delete) should *not* be called when the resource (and by extension, its
            nested resources) are removed from a Pulumi program.
            </summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.HasRetainOnDelete">
            <summary>Gets whether the "retainOnDelete" field is set</summary>
        </member>
        <member name="M:Pulumirpc.ConstructRequest.ClearRetainOnDelete">
            <summary>Clears the value of the "retainOnDelete" field</summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.AcceptsOutputValuesFieldNumber">
            <summary>Field number for the "accepts_output_values" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.AcceptsOutputValues">
            <summary>
            True if the caller is capable of accepting output values in response to the call. If this is set, these outputs
            may be used to communicate dependency information and so there is no need to populate
            [](pulumirpc.ConstructResponse)'s `stateDependencies` field.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.ResourceHooksFieldNumber">
            <summary>Field number for the "resource_hooks" field.</summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.StackTraceHandleFieldNumber">
            <summary>Field number for the "stack_trace_handle" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.StackTraceHandle">
            <summary>
            The stack trace handle for the construct call. Supports stitching stack traces together across plugins.
            </summary>
        </member>
        <member name="T:Pulumirpc.ConstructRequest.Types">
            <summary>Container for nested types declared in the ConstructRequest message type.</summary>
        </member>
        <member name="T:Pulumirpc.ConstructRequest.Types.PropertyDependencies">
            <summary>
            A `PropertyDependencies` list is a set of URNs that a particular property may depend on.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.Types.PropertyDependencies.UrnsFieldNumber">
            <summary>Field number for the "urns" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.Types.PropertyDependencies.Urns">
            <summary>
            A list of URNs that this property depends on.
            </summary>
        </member>
        <member name="T:Pulumirpc.ConstructRequest.Types.CustomTimeouts">
             <summary>
             A `CustomTimeouts` object encapsulates a set of timeouts for the various CRUD operations that might be performed
             on this resource's nested resources. Timeout values are specified as duration strings, such as `"5ms"` (5
             milliseconds), `"40s"` (40 seconds), or `"1m30s"` (1 minute and 30 seconds). The following units of time are
             supported:
            
             * `ns`: nanoseconds
             * `us` or `µs`: microseconds
             * `ms`: milliseconds
             * `s`: seconds
             * `m`: minutes
             * `h`: hours
             </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.Types.CustomTimeouts.CreateFieldNumber">
            <summary>Field number for the "create" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.Types.CustomTimeouts.Create">
            <summary>
            How long a caller is prepared to wait for a nested resource's [](pulumirpc.ResourceProvider.Create) operation
            to complete.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.Types.CustomTimeouts.UpdateFieldNumber">
            <summary>Field number for the "update" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.Types.CustomTimeouts.Update">
            <summary>
            How long a caller is prepared to wait for a nested resource's [](pulumirpc.ResourceProvider.Update) operation
            to complete.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.Types.CustomTimeouts.DeleteFieldNumber">
            <summary>Field number for the "delete" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructRequest.Types.CustomTimeouts.Delete">
            <summary>
            How long a caller is prepared to wait for a nested resource's [](pulumirpc.ResourceProvider.Delete) operation
            to complete.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.Types.ResourceHooksBinding.BeforeCreateFieldNumber">
            <summary>Field number for the "before_create" field.</summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.Types.ResourceHooksBinding.AfterCreateFieldNumber">
            <summary>Field number for the "after_create" field.</summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.Types.ResourceHooksBinding.BeforeUpdateFieldNumber">
            <summary>Field number for the "before_update" field.</summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.Types.ResourceHooksBinding.AfterUpdateFieldNumber">
            <summary>Field number for the "after_update" field.</summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.Types.ResourceHooksBinding.BeforeDeleteFieldNumber">
            <summary>Field number for the "before_delete" field.</summary>
        </member>
        <member name="F:Pulumirpc.ConstructRequest.Types.ResourceHooksBinding.AfterDeleteFieldNumber">
            <summary>Field number for the "after_delete" field.</summary>
        </member>
        <member name="T:Pulumirpc.ConstructResponse">
            <summary>
            `ConstructResponse` is the type of responses sent by a [](pulumirpc.ResourceProvider.Construct) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructResponse.UrnFieldNumber">
            <summary>Field number for the "urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructResponse.Urn">
            <summary>
            The URN of the constructed component resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructResponse.StateFieldNumber">
            <summary>Field number for the "state" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructResponse.State">
            <summary>
            Any output properties that the component registered as part of its construction.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructResponse.StateDependenciesFieldNumber">
            <summary>Field number for the "stateDependencies" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructResponse.StateDependencies">
            <summary>
            A map of property dependencies for the component's outputs. This will be set if the caller indicated that it
            could not receive dependency-communicating [output](outputs) values by setting [](pulumirpc.ConstructRequest)'s
            `accepts_output_values` field to false.
            </summary>
        </member>
        <member name="T:Pulumirpc.ConstructResponse.Types">
            <summary>Container for nested types declared in the ConstructResponse message type.</summary>
        </member>
        <member name="T:Pulumirpc.ConstructResponse.Types.PropertyDependencies">
            <summary>
            A `PropertyDependencies` list is a set of URNs that a particular property may depend on.
            </summary>
        </member>
        <member name="F:Pulumirpc.ConstructResponse.Types.PropertyDependencies.UrnsFieldNumber">
            <summary>Field number for the "urns" field.</summary>
        </member>
        <member name="P:Pulumirpc.ConstructResponse.Types.PropertyDependencies.Urns">
            <summary>
            A list of URNs that this property depends on.
            </summary>
        </member>
        <member name="T:Pulumirpc.ErrorResourceInitFailed">
            <summary>
            ErrorResourceInitFailed is sent as a Detail `ResourceProvider.{Create, Update}` fail because a
            resource was created successfully, but failed to initialize.
            </summary>
        </member>
        <member name="F:Pulumirpc.ErrorResourceInitFailed.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="P:Pulumirpc.ErrorResourceInitFailed.Id">
            <summary>
            the ID of the created resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ErrorResourceInitFailed.PropertiesFieldNumber">
            <summary>Field number for the "properties" field.</summary>
        </member>
        <member name="P:Pulumirpc.ErrorResourceInitFailed.Properties">
            <summary>
            any properties that were computed during updating.
            </summary>
        </member>
        <member name="F:Pulumirpc.ErrorResourceInitFailed.ReasonsFieldNumber">
            <summary>Field number for the "reasons" field.</summary>
        </member>
        <member name="P:Pulumirpc.ErrorResourceInitFailed.Reasons">
            <summary>
            error messages associated with initialization failure.
            </summary>
        </member>
        <member name="F:Pulumirpc.ErrorResourceInitFailed.InputsFieldNumber">
            <summary>Field number for the "inputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.ErrorResourceInitFailed.Inputs">
            <summary>
            the current inputs to this resource (only applicable for Read)
            </summary>
        </member>
        <member name="F:Pulumirpc.ErrorResourceInitFailed.RefreshBeforeUpdateFieldNumber">
            <summary>Field number for the "refresh_before_update" field.</summary>
        </member>
        <member name="P:Pulumirpc.ErrorResourceInitFailed.RefreshBeforeUpdate">
            <summary>
            Indicates that this resource should always be refreshed prior to updates.
            </summary>
        </member>
        <member name="T:Pulumirpc.GetMappingRequest">
            <summary>
            `GetMappingRequest` is the type of requests sent as part of a [](pulumirpc.ResourceProvider.GetMapping) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.GetMappingRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetMappingRequest.Key">
            <summary>
            The conversion key for the mapping being requested. This typically corresponds to the source language, such as
            `terraform` in the case of mapping Terraform names to Pulumi names.
            </summary>
        </member>
        <member name="F:Pulumirpc.GetMappingRequest.ProviderFieldNumber">
            <summary>Field number for the "provider" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetMappingRequest.Provider">
            <summary>
            An optional *source provider key* for the mapping being requested. If this is empty, the provider should assume
            that this request is from an old engine prior to the introduction of [](pulumirpc.ResourceProvider.GetMappings).
            In these cases the request should be answered with the "primary" mapping. If this field is set, the `provider`
            field in the corresponding [](pulumirpc.GetMappingResponse) should contain the same value.
            </summary>
        </member>
        <member name="T:Pulumirpc.GetMappingResponse">
            <summary>
            `GetMappingResponse` is the type of responses sent by a [](pulumirpc.ResourceProvider.GetMapping) call. The data
            within a `GetMappingResponse` will normally be human-readable JSON (e.g. an object mapping names from the source to
            Pulumi), but the engine doesn't mandate any specific format.
            </summary>
        </member>
        <member name="F:Pulumirpc.GetMappingResponse.ProviderFieldNumber">
            <summary>Field number for the "provider" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetMappingResponse.Provider">
            <summary>
            The *source provider key* that this mapping contains data for.
            </summary>
        </member>
        <member name="F:Pulumirpc.GetMappingResponse.DataFieldNumber">
            <summary>Field number for the "data" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetMappingResponse.Data">
            <summary>
            Mapping data in a format specific to the conversion plugin/source language.
            </summary>
        </member>
        <member name="T:Pulumirpc.GetMappingsRequest">
            <summary>
            `GetMappingsRequest` is the type of requests sent as part of a [](pulumirpc.ResourceProvider.GetMappings) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.GetMappingsRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetMappingsRequest.Key">
            <summary>
            The conversion key for the mapping being requested. This typically corresponds to the source language, such as
            `terraform` in the case of mapping Terraform names to Pulumi names.
            </summary>
        </member>
        <member name="T:Pulumirpc.GetMappingsResponse">
            <summary>
            `GetMappingsResponse` is the type of responses sent by a [](pulumirpc.ResourceProvider.GetMappings) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.GetMappingsResponse.ProvidersFieldNumber">
            <summary>Field number for the "providers" field.</summary>
        </member>
        <member name="P:Pulumirpc.GetMappingsResponse.Providers">
            <summary>
            The set of *source provider keys* this provider can supply mappings for. For example the Pulumi provider
            `terraform-template` would return `["template"]` for this.
            </summary>
        </member>
        <member name="T:Pulumirpc.View">
            <summary>
            `View` represents the state of a view resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.View.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="P:Pulumirpc.View.Type">
            <summary>
            The type of the view resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.View.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.View.Name">
            <summary>
            The name of the view resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.View.ParentTypeFieldNumber">
            <summary>Field number for the "parent_type" field.</summary>
        </member>
        <member name="P:Pulumirpc.View.ParentType">
            <summary>
            An optional type of the parent view resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.View.ParentNameFieldNumber">
            <summary>Field number for the "parent_name" field.</summary>
        </member>
        <member name="P:Pulumirpc.View.ParentName">
            <summary>
            An optional name of the parent view resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.View.InputsFieldNumber">
            <summary>Field number for the "inputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.View.Inputs">
            <summary>
            The view resource's inputs.
            </summary>
        </member>
        <member name="F:Pulumirpc.View.OutputsFieldNumber">
            <summary>Field number for the "outputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.View.Outputs">
            <summary>
            The view resource's outputs.
            </summary>
        </member>
        <member name="T:Pulumirpc.ResourceProvider">
            <summary>
            The ResourceProvider service defines a standard interface for [resource providers](providers). A resource provider
            manages a set of configuration, resources, functions and so on in a single package, and offers methods such as CRUD
            operations on resources and invocations of functions. Resource providers are primarily managed by the Pulumi engine
            as part of a deployment in order to interact with the cloud providers underpinning a Pulumi application.
            </summary>
        </member>
        <member name="P:Pulumirpc.ResourceProvider.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Pulumirpc.ResourceProvider.ResourceProviderBase">
            <summary>Base class for server-side implementations of ResourceProvider</summary>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderBase.Handshake(Pulumirpc.ProviderHandshakeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            `Handshake` is the first call made by the engine to a provider. It is used to pass the engine's address to the
            provider so that it may establish its own connections back, and to establish protocol configuration that will be
            used to communicate between the two parties. Providers that support `Handshake` should return responses
            consistent with those returned in response to [](pulumirpc.ResourceProvider.Configure) calls where there is
            overlap due to the use of `Configure` prior to `Handshake`'s introduction.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderBase.Parameterize(Pulumirpc.ParameterizeRequest,Grpc.Core.ServerCallContext)">
             <summary>
             `Parameterize` is the primary means of supporting [parameterized providers](parameterized-providers), which allow
             a caller to change a provider's behavior ahead of its [configuration](pulumirpc.ResourceProvider.Configure) and
             subsequent use. Where a [](pulumirpc.ResourceProvider.Configure) call allows a caller to influence provider
             behaviour at a high level (e.g. by specifying the region in which an AWS provider should operate), a
             `Parameterize` call may change the set of resources and functions that a provider offers (that is, its schema).
             This is useful in any case where some "set" of providers can be captured by a single implementation that may
             power fundamentally different schemata -- dynamically bridging Terraform providers, or managing Kubernetes
             clusters with custom resource definitions, for instance, are good examples. The parameterized package that
             `Parameterize` yields is known as a *sub-package* of the original (unparameterized) package.
            
             `Parameterize` supports two types of parameterization:
            
             * *Replacement parameterization*, whereby a `Parameterize` call results in a schema that completely replaces the
               original provider schema. Bridging a Terraform provider dynamically might be an example of this -- following
               the call to `Parameterize`, the provider's schema will become that of the Terraform provider that was bridged.
               Providers that implement replacement parameterization expect a *single* call to `Parameterize`.
            
             * *Extension parameterization*, in which a `Parameterize` call results in a schema that is a superset of the
               original. This is useful in cases where a provider can be extended with additional resources or functions, such
               as a Kubernetes provider that can be extended with resources representing custom resource definitions.
               Providers that implement extension parameterization should accept multiple calls to `Parameterize`. Extension
               packages may even be called multiple times with the same package name, but with different versions. The CRUD
               operations of extension resources must include the version of which sub-package they correspond to.
            
             `Parameterize` should work the same whether it is provided with `ParametersArgs` or `ParametersValue` input. In
             each case it should return the sub-package name and version (which when a `ParametersValue` is supplied should
             match the given input).
             </summary>
             <param name="request">The request received from the client.</param>
             <param name="context">The context of the server-side call handler being invoked.</param>
             <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderBase.GetSchema(Pulumirpc.GetSchemaRequest,Grpc.Core.ServerCallContext)">
            <summary>
            GetSchema fetches the schema for this resource provider.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderBase.CheckConfig(Pulumirpc.CheckRequest,Grpc.Core.ServerCallContext)">
             <summary>
             `CheckConfig` validates a set of configuration inputs that will be passed to this provider instance.
             `CheckConfig` is to provider resources what [](pulumirpc.ResourceProvider.Check) is to individual resources, and
             is the first stage in configuring (that is, eventually executing a [](pulumirpc.ResourceProvider.Configure) call)
             a provider using user-supplied values. In the case that provider inputs are coming from some source that has been
             checked previously (e.g. a Pulumi state), it is not necessary to call `CheckConfig`.
            
             A `CheckConfig` call returns either a set of checked, known-valid inputs that may subsequently be passed to
             [](pulumirpc.ResourceProvider.DiffConfig) and/or [](pulumirpc.ResourceProvider.Configure), or a set of errors
             explaining why the inputs are invalid. In the case that a set of inputs are successfully validated and returned,
             `CheckConfig` *may also populate default values* for provider configuration, returning them so that they may be
             passed to a subsequent [](pulumirpc.ResourceProvider.Configure) call and persisted in the Pulumi state. In the
             case that `CheckConfig` fails and returns a set of errors, it is expected that the caller (typically the Pulumi
             engine) will fail provider registration.
            
             As a rule, the provider inputs returned by a call to `CheckConfig` should preserve the original representation of
             the properties as present in the program inputs. Though this rule is not required for correctness, violations
             thereof can negatively impact the end-user experience, as the provider inputs are used for detecting and
             rendering diffs.
             </summary>
             <param name="request">The request received from the client.</param>
             <param name="context">The context of the server-side call handler being invoked.</param>
             <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderBase.DiffConfig(Pulumirpc.DiffRequest,Grpc.Core.ServerCallContext)">
             <summary>
             `DiffConfig` compares an existing ("old") provider configuration with a new configuration and computes the
             difference (if any) between them. `DiffConfig` is to provider resources what [](pulumirpc.ResourceProvider.Diff)
             is to individual resources. `DiffConfig` should only be called with values that have at some point been validated
             by a [](pulumirpc.ResourceProvider.CheckConfig) call. The [](pulumirpc.DiffResponse) returned by a `DiffConfig`
             call is used primarily to determine whether or not the newly configured provider is capable of managing resources
             owned by the old provider. If `DiffConfig` indicates that the provider resource needs to be replaced, for
             instance, then all resources owned by that provider will *also* need to be replaced. Replacement semantics should
             thus be reserved for changes to configuration properties that are guaranteed to make old resources unmanageable.
             Changes to an AWS region, for example, will almost certainly require a provider replacement, but changes to an
             AWS access key, should almost certainly not.
            
             Implementations must satisfy the invariants documented on `DiffResponse`.
             </summary>
             <param name="request">The request received from the client.</param>
             <param name="context">The context of the server-side call handler being invoked.</param>
             <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderBase.Configure(Pulumirpc.ConfigureRequest,Grpc.Core.ServerCallContext)">
             <summary>
             `Configure` is the final stage in configuring a provider instance. Callers may supply two sets of data:
            
             * Provider-specific configuration, which is the set of inputs that have been validated by a previous
               [](pulumirpc.ResourceProvider.CheckConfig) call.
             * Provider-agnostic ("protocol") configuration, such as whether or not the caller supports secrets.
            
             The provider is expected to return its own set of protocol configuration, indicating which features it supports
             in turn so that the caller and the provider can interact appropriately.
            
             Providers may expect a *single* call to `Configure`. If a call to `Configure` is missing required configuration,
             the provider may return a set of error details containing [](pulumirpc.ConfigureErrorMissingKeys) values to
             indicate which keys are missing.
            
             :::{important}
             The use of `Configure` to configure protocol features is deprecated in favour of the
             [](pulumirpc.ResourceProvider.Handshake) method, which should be implemented by newer providers. To enable
             compatibility between older engines and providers:
            
             * Callers which call `Handshake` *must* call `Configure` with flags such as `acceptSecrets` and `acceptResources`
               set to `true`, since these features predate the introduction of `Handshake` and thus `Handshake`-aware callers
               must support them. See [](pulumirpc.ConfigureRequest) for more information.
             * Providers which implement `Handshake` *must* support flags such as `acceptSecrets` and `acceptResources`, and
               indicate as such by always returning `true` for these fields in [](pulumirpc.ConfigureResponse). See
               [](pulumirpc.ConfigureResponse) for more information.
             :::
             </summary>
             <param name="request">The request received from the client.</param>
             <param name="context">The context of the server-side call handler being invoked.</param>
             <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderBase.Invoke(Pulumirpc.InvokeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Invoke dynamically executes a built-in function in the provider.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderBase.Call(Pulumirpc.CallRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Call dynamically executes a method in the provider associated with a component resource.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderBase.Check(Pulumirpc.CheckRequest,Grpc.Core.ServerCallContext)">
             <summary>
             `Check` validates a set of input properties against a given resource type. A `Check` call returns either a set of
             checked, known-valid inputs that may subsequently be passed to [](pulumirpc.ResourceProvider.Diff),
             [](pulumirpc.ResourceProvider.Create), or [](pulumirpc.ResourceProvider.Update); or a set of errors explaining
             why the inputs are invalid. In the case that a set of inputs are successfully validated and returned, `Check`
             *may also populate default values* for resource inputs, returning them so that they may be passed to a subsequent
             call and persisted in the Pulumi state. In the case that `Check` fails and returns a set of errors, it is
             expected that the caller (typically the Pulumi engine) will fail resource registration.
            
             As a rule, the provider inputs returned by a call to `Check` should preserve the original representation of the
             properties as present in the program inputs. Though this rule is not required for correctness, violations thereof
             can negatively impact the end-user experience, as the provider inputs are used for detecting and rendering
             diffs.
             </summary>
             <param name="request">The request received from the client.</param>
             <param name="context">The context of the server-side call handler being invoked.</param>
             <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderBase.Diff(Pulumirpc.DiffRequest,Grpc.Core.ServerCallContext)">
             <summary>
             `Diff` compares an existing ("old") set of resource properties with a new set of properties and computes the
             difference (if any) between them. `Diff` should only be called with values that have at some point been validated
             by a [](pulumirpc.ResourceProvider.Check) call.
            
             Implementations must satisfy the invariants documented on `DiffResponse`.
             </summary>
             <param name="request">The request received from the client.</param>
             <param name="context">The context of the server-side call handler being invoked.</param>
             <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderBase.Create(Pulumirpc.CreateRequest,Grpc.Core.ServerCallContext)">
             <summary>
             `Create` provisions a new instance of the specified [(custom) resource](custom-resources). It returns a
             provider-assigned ID for the resource as well as the output properties that arose from the creation properties.
             Output properties are typically the union of the resource's input properties and any additional values that were
             computed or made available during creation.
            
             If creation fails, `Create` may return an [](pulumirpc.ErrorResourceInitFailed) error detail explaining why.
             Moreover, if `Create` does return an error, it must be the case that the resource was *not* created (that is,
             `Create` can be thought of as transactional or atomic).
             </summary>
             <param name="request">The request received from the client.</param>
             <param name="context">The context of the server-side call handler being invoked.</param>
             <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderBase.Read(Pulumirpc.ReadRequest,Grpc.Core.ServerCallContext)">
            <summary>
            `Read` reads the current live state associated with a resource identified by the supplied state. The given state
            must be sufficient to uniquely identify the resource. This is typically just the resource ID, but may also
            include other properties.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderBase.Update(Pulumirpc.UpdateRequest,Grpc.Core.ServerCallContext)">
            <summary>
            `Update` updates an existing resource according to a new set of inputs, returning a new set of output properties.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderBase.Delete(Pulumirpc.DeleteRequest,Grpc.Core.ServerCallContext)">
            <summary>
            `Delete` deprovisions an existing resource as specified by its ID. `Delete` should be transactional/atomic -- if
            a call to `Delete` fails, it must be the case that the resource was *not* deleted and can be assumed to still
            exist.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderBase.Construct(Pulumirpc.ConstructRequest,Grpc.Core.ServerCallContext)">
             <summary>
             `Construct` provisions a new [component resource](component-resources). Providers that implement `Construct` are
             referred to as [component providers](component-providers). `Construct` is to component resources what
             [](pulumirpc.ResourceProvider.Create) is to [custom resources](custom-resources). Components do not have any
             lifecycle of their own, and instead embody the lifecycles of the resources that they are composed of. As such,
             `Construct` is effectively a subprogram whose resources will be persisted in the caller's state. It is
             consequently passed enough information to manage fully these resources. At a high level, this comprises:
            
             * A [](pulumirpc.ResourceMonitor) endpoint which the provider can use to [register](resource-registration) nested
               custom or component resources that belong to the component.
            
             * A set of input properties.
            
             * A full set of [resource options](https://www.pulumi.com/docs/iac/concepts/options/) that the component should
               propagate to resources it registers against the supplied resource monitor.
             </summary>
             <param name="request">The request received from the client.</param>
             <param name="context">The context of the server-side call handler being invoked.</param>
             <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderBase.Cancel(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.ServerCallContext)">
            <summary>
            Cancel signals the provider to gracefully shut down and abort any ongoing resource operations.
            Operations aborted in this way will return an error (e.g., `Update` and `Create` will either return a
            creation error or an initialization error). Since Cancel is advisory and non-blocking, it is up
            to the host to decide how long to wait after Cancel is called before (e.g.)
            hard-closing any gRPC connection.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderBase.GetPluginInfo(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.ServerCallContext)">
            <summary>
            GetPluginInfo returns generic information about this plugin, like its version.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderBase.Attach(Pulumirpc.PluginAttach,Grpc.Core.ServerCallContext)">
            <summary>
            Attach sends the engine address to an already running plugin.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderBase.GetMapping(Pulumirpc.GetMappingRequest,Grpc.Core.ServerCallContext)">
             <summary>
             `GetMapping` returns mappings designed to aid in [converting programs and state from other
             ecosystems](converters). It accepts a "conversion key", which effectively corresponds to a source language, such
             as `terraform`, and a *source provider name*, which is the name of the provider *in the source language*. Given
             these, it returns source-specific mapping data for the provider requested. As an example, the Pulumi AWS
             provider, which is bridged from the Terraform AWS provider and thus capable of mapping names between the two,
             might respond to a call with key `terraform` and source provider name `aws` with mapping data for transforming
             (among other things) Terraform AWS names such as `aws_s3_bucket` into Pulumi AWS types such as
             `aws:s3/bucket:Bucket`. If a provider only supports a single source provider, or has some sensible default, it
             may respond also to a call in which the source provider name is empty (`""`), which will be made when the engine
             does not have sufficient knowledge to work out which provider offers a specific mapping.
            
             In general, it is expected that providers implemented by bridging an equivalent provider from another ecosystem
             (such as bridged Terraform providers built atop the `pulumi-terraform-bridge`, for instance) implement
             `GetMapping` to support conversion from that ecosystem into Pulumi using the same logic that underpins the
             bridging itself.
             </summary>
             <param name="request">The request received from the client.</param>
             <param name="context">The context of the server-side call handler being invoked.</param>
             <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderBase.GetMappings(Pulumirpc.GetMappingsRequest,Grpc.Core.ServerCallContext)">
             <summary>
             `GetMappings` is an optional method designed to aid in [converting programs and state from other
             ecosystems](converters). `GetMappings` accepts a "conversion key". This corresponds to a source language, for
             which we want to retrieve mappings for names etc. from that source language into Pulumi. An example key might
             therefore be `terraform` in the event that we wish to map e.g. Terraform resource names to Pulumi resource types.
             Given a key, `GetMappings` returns a list of *source provider names* for which calls to `GetMapping` will return
             mappings. So, continuing the Terraform example, the Pulumi AWS provider, which is bridged from the Terraform AWS
             provider and thus capable of mapping names between the two, might return the list `["aws"]` in response to a call
             with key `terraform`.
            
             If a provider does not implement `GetMappings`, the engine will fall back to calling `GetMapping` blindly without
             a source provider name (that is, with the value `""`).
             </summary>
             <param name="request">The request received from the client.</param>
             <param name="context">The context of the server-side call handler being invoked.</param>
             <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="T:Pulumirpc.ResourceProvider.ResourceProviderClient">
            <summary>Client for ResourceProvider</summary>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for ResourceProvider</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for ResourceProvider that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Handshake(Pulumirpc.ProviderHandshakeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `Handshake` is the first call made by the engine to a provider. It is used to pass the engine's address to the
            provider so that it may establish its own connections back, and to establish protocol configuration that will be
            used to communicate between the two parties. Providers that support `Handshake` should return responses
            consistent with those returned in response to [](pulumirpc.ResourceProvider.Configure) calls where there is
            overlap due to the use of `Configure` prior to `Handshake`'s introduction.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Handshake(Pulumirpc.ProviderHandshakeRequest,Grpc.Core.CallOptions)">
            <summary>
            `Handshake` is the first call made by the engine to a provider. It is used to pass the engine's address to the
            provider so that it may establish its own connections back, and to establish protocol configuration that will be
            used to communicate between the two parties. Providers that support `Handshake` should return responses
            consistent with those returned in response to [](pulumirpc.ResourceProvider.Configure) calls where there is
            overlap due to the use of `Configure` prior to `Handshake`'s introduction.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.HandshakeAsync(Pulumirpc.ProviderHandshakeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `Handshake` is the first call made by the engine to a provider. It is used to pass the engine's address to the
            provider so that it may establish its own connections back, and to establish protocol configuration that will be
            used to communicate between the two parties. Providers that support `Handshake` should return responses
            consistent with those returned in response to [](pulumirpc.ResourceProvider.Configure) calls where there is
            overlap due to the use of `Configure` prior to `Handshake`'s introduction.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.HandshakeAsync(Pulumirpc.ProviderHandshakeRequest,Grpc.Core.CallOptions)">
            <summary>
            `Handshake` is the first call made by the engine to a provider. It is used to pass the engine's address to the
            provider so that it may establish its own connections back, and to establish protocol configuration that will be
            used to communicate between the two parties. Providers that support `Handshake` should return responses
            consistent with those returned in response to [](pulumirpc.ResourceProvider.Configure) calls where there is
            overlap due to the use of `Configure` prior to `Handshake`'s introduction.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Parameterize(Pulumirpc.ParameterizeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `Parameterize` is the primary means of supporting [parameterized providers](parameterized-providers), which allow
             a caller to change a provider's behavior ahead of its [configuration](pulumirpc.ResourceProvider.Configure) and
             subsequent use. Where a [](pulumirpc.ResourceProvider.Configure) call allows a caller to influence provider
             behaviour at a high level (e.g. by specifying the region in which an AWS provider should operate), a
             `Parameterize` call may change the set of resources and functions that a provider offers (that is, its schema).
             This is useful in any case where some "set" of providers can be captured by a single implementation that may
             power fundamentally different schemata -- dynamically bridging Terraform providers, or managing Kubernetes
             clusters with custom resource definitions, for instance, are good examples. The parameterized package that
             `Parameterize` yields is known as a *sub-package* of the original (unparameterized) package.
            
             `Parameterize` supports two types of parameterization:
            
             * *Replacement parameterization*, whereby a `Parameterize` call results in a schema that completely replaces the
               original provider schema. Bridging a Terraform provider dynamically might be an example of this -- following
               the call to `Parameterize`, the provider's schema will become that of the Terraform provider that was bridged.
               Providers that implement replacement parameterization expect a *single* call to `Parameterize`.
            
             * *Extension parameterization*, in which a `Parameterize` call results in a schema that is a superset of the
               original. This is useful in cases where a provider can be extended with additional resources or functions, such
               as a Kubernetes provider that can be extended with resources representing custom resource definitions.
               Providers that implement extension parameterization should accept multiple calls to `Parameterize`. Extension
               packages may even be called multiple times with the same package name, but with different versions. The CRUD
               operations of extension resources must include the version of which sub-package they correspond to.
            
             `Parameterize` should work the same whether it is provided with `ParametersArgs` or `ParametersValue` input. In
             each case it should return the sub-package name and version (which when a `ParametersValue` is supplied should
             match the given input).
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Parameterize(Pulumirpc.ParameterizeRequest,Grpc.Core.CallOptions)">
             <summary>
             `Parameterize` is the primary means of supporting [parameterized providers](parameterized-providers), which allow
             a caller to change a provider's behavior ahead of its [configuration](pulumirpc.ResourceProvider.Configure) and
             subsequent use. Where a [](pulumirpc.ResourceProvider.Configure) call allows a caller to influence provider
             behaviour at a high level (e.g. by specifying the region in which an AWS provider should operate), a
             `Parameterize` call may change the set of resources and functions that a provider offers (that is, its schema).
             This is useful in any case where some "set" of providers can be captured by a single implementation that may
             power fundamentally different schemata -- dynamically bridging Terraform providers, or managing Kubernetes
             clusters with custom resource definitions, for instance, are good examples. The parameterized package that
             `Parameterize` yields is known as a *sub-package* of the original (unparameterized) package.
            
             `Parameterize` supports two types of parameterization:
            
             * *Replacement parameterization*, whereby a `Parameterize` call results in a schema that completely replaces the
               original provider schema. Bridging a Terraform provider dynamically might be an example of this -- following
               the call to `Parameterize`, the provider's schema will become that of the Terraform provider that was bridged.
               Providers that implement replacement parameterization expect a *single* call to `Parameterize`.
            
             * *Extension parameterization*, in which a `Parameterize` call results in a schema that is a superset of the
               original. This is useful in cases where a provider can be extended with additional resources or functions, such
               as a Kubernetes provider that can be extended with resources representing custom resource definitions.
               Providers that implement extension parameterization should accept multiple calls to `Parameterize`. Extension
               packages may even be called multiple times with the same package name, but with different versions. The CRUD
               operations of extension resources must include the version of which sub-package they correspond to.
            
             `Parameterize` should work the same whether it is provided with `ParametersArgs` or `ParametersValue` input. In
             each case it should return the sub-package name and version (which when a `ParametersValue` is supplied should
             match the given input).
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.ParameterizeAsync(Pulumirpc.ParameterizeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `Parameterize` is the primary means of supporting [parameterized providers](parameterized-providers), which allow
             a caller to change a provider's behavior ahead of its [configuration](pulumirpc.ResourceProvider.Configure) and
             subsequent use. Where a [](pulumirpc.ResourceProvider.Configure) call allows a caller to influence provider
             behaviour at a high level (e.g. by specifying the region in which an AWS provider should operate), a
             `Parameterize` call may change the set of resources and functions that a provider offers (that is, its schema).
             This is useful in any case where some "set" of providers can be captured by a single implementation that may
             power fundamentally different schemata -- dynamically bridging Terraform providers, or managing Kubernetes
             clusters with custom resource definitions, for instance, are good examples. The parameterized package that
             `Parameterize` yields is known as a *sub-package* of the original (unparameterized) package.
            
             `Parameterize` supports two types of parameterization:
            
             * *Replacement parameterization*, whereby a `Parameterize` call results in a schema that completely replaces the
               original provider schema. Bridging a Terraform provider dynamically might be an example of this -- following
               the call to `Parameterize`, the provider's schema will become that of the Terraform provider that was bridged.
               Providers that implement replacement parameterization expect a *single* call to `Parameterize`.
            
             * *Extension parameterization*, in which a `Parameterize` call results in a schema that is a superset of the
               original. This is useful in cases where a provider can be extended with additional resources or functions, such
               as a Kubernetes provider that can be extended with resources representing custom resource definitions.
               Providers that implement extension parameterization should accept multiple calls to `Parameterize`. Extension
               packages may even be called multiple times with the same package name, but with different versions. The CRUD
               operations of extension resources must include the version of which sub-package they correspond to.
            
             `Parameterize` should work the same whether it is provided with `ParametersArgs` or `ParametersValue` input. In
             each case it should return the sub-package name and version (which when a `ParametersValue` is supplied should
             match the given input).
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.ParameterizeAsync(Pulumirpc.ParameterizeRequest,Grpc.Core.CallOptions)">
             <summary>
             `Parameterize` is the primary means of supporting [parameterized providers](parameterized-providers), which allow
             a caller to change a provider's behavior ahead of its [configuration](pulumirpc.ResourceProvider.Configure) and
             subsequent use. Where a [](pulumirpc.ResourceProvider.Configure) call allows a caller to influence provider
             behaviour at a high level (e.g. by specifying the region in which an AWS provider should operate), a
             `Parameterize` call may change the set of resources and functions that a provider offers (that is, its schema).
             This is useful in any case where some "set" of providers can be captured by a single implementation that may
             power fundamentally different schemata -- dynamically bridging Terraform providers, or managing Kubernetes
             clusters with custom resource definitions, for instance, are good examples. The parameterized package that
             `Parameterize` yields is known as a *sub-package* of the original (unparameterized) package.
            
             `Parameterize` supports two types of parameterization:
            
             * *Replacement parameterization*, whereby a `Parameterize` call results in a schema that completely replaces the
               original provider schema. Bridging a Terraform provider dynamically might be an example of this -- following
               the call to `Parameterize`, the provider's schema will become that of the Terraform provider that was bridged.
               Providers that implement replacement parameterization expect a *single* call to `Parameterize`.
            
             * *Extension parameterization*, in which a `Parameterize` call results in a schema that is a superset of the
               original. This is useful in cases where a provider can be extended with additional resources or functions, such
               as a Kubernetes provider that can be extended with resources representing custom resource definitions.
               Providers that implement extension parameterization should accept multiple calls to `Parameterize`. Extension
               packages may even be called multiple times with the same package name, but with different versions. The CRUD
               operations of extension resources must include the version of which sub-package they correspond to.
            
             `Parameterize` should work the same whether it is provided with `ParametersArgs` or `ParametersValue` input. In
             each case it should return the sub-package name and version (which when a `ParametersValue` is supplied should
             match the given input).
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.GetSchema(Pulumirpc.GetSchemaRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            GetSchema fetches the schema for this resource provider.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.GetSchema(Pulumirpc.GetSchemaRequest,Grpc.Core.CallOptions)">
            <summary>
            GetSchema fetches the schema for this resource provider.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.GetSchemaAsync(Pulumirpc.GetSchemaRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            GetSchema fetches the schema for this resource provider.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.GetSchemaAsync(Pulumirpc.GetSchemaRequest,Grpc.Core.CallOptions)">
            <summary>
            GetSchema fetches the schema for this resource provider.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.CheckConfig(Pulumirpc.CheckRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `CheckConfig` validates a set of configuration inputs that will be passed to this provider instance.
             `CheckConfig` is to provider resources what [](pulumirpc.ResourceProvider.Check) is to individual resources, and
             is the first stage in configuring (that is, eventually executing a [](pulumirpc.ResourceProvider.Configure) call)
             a provider using user-supplied values. In the case that provider inputs are coming from some source that has been
             checked previously (e.g. a Pulumi state), it is not necessary to call `CheckConfig`.
            
             A `CheckConfig` call returns either a set of checked, known-valid inputs that may subsequently be passed to
             [](pulumirpc.ResourceProvider.DiffConfig) and/or [](pulumirpc.ResourceProvider.Configure), or a set of errors
             explaining why the inputs are invalid. In the case that a set of inputs are successfully validated and returned,
             `CheckConfig` *may also populate default values* for provider configuration, returning them so that they may be
             passed to a subsequent [](pulumirpc.ResourceProvider.Configure) call and persisted in the Pulumi state. In the
             case that `CheckConfig` fails and returns a set of errors, it is expected that the caller (typically the Pulumi
             engine) will fail provider registration.
            
             As a rule, the provider inputs returned by a call to `CheckConfig` should preserve the original representation of
             the properties as present in the program inputs. Though this rule is not required for correctness, violations
             thereof can negatively impact the end-user experience, as the provider inputs are used for detecting and
             rendering diffs.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.CheckConfig(Pulumirpc.CheckRequest,Grpc.Core.CallOptions)">
             <summary>
             `CheckConfig` validates a set of configuration inputs that will be passed to this provider instance.
             `CheckConfig` is to provider resources what [](pulumirpc.ResourceProvider.Check) is to individual resources, and
             is the first stage in configuring (that is, eventually executing a [](pulumirpc.ResourceProvider.Configure) call)
             a provider using user-supplied values. In the case that provider inputs are coming from some source that has been
             checked previously (e.g. a Pulumi state), it is not necessary to call `CheckConfig`.
            
             A `CheckConfig` call returns either a set of checked, known-valid inputs that may subsequently be passed to
             [](pulumirpc.ResourceProvider.DiffConfig) and/or [](pulumirpc.ResourceProvider.Configure), or a set of errors
             explaining why the inputs are invalid. In the case that a set of inputs are successfully validated and returned,
             `CheckConfig` *may also populate default values* for provider configuration, returning them so that they may be
             passed to a subsequent [](pulumirpc.ResourceProvider.Configure) call and persisted in the Pulumi state. In the
             case that `CheckConfig` fails and returns a set of errors, it is expected that the caller (typically the Pulumi
             engine) will fail provider registration.
            
             As a rule, the provider inputs returned by a call to `CheckConfig` should preserve the original representation of
             the properties as present in the program inputs. Though this rule is not required for correctness, violations
             thereof can negatively impact the end-user experience, as the provider inputs are used for detecting and
             rendering diffs.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.CheckConfigAsync(Pulumirpc.CheckRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `CheckConfig` validates a set of configuration inputs that will be passed to this provider instance.
             `CheckConfig` is to provider resources what [](pulumirpc.ResourceProvider.Check) is to individual resources, and
             is the first stage in configuring (that is, eventually executing a [](pulumirpc.ResourceProvider.Configure) call)
             a provider using user-supplied values. In the case that provider inputs are coming from some source that has been
             checked previously (e.g. a Pulumi state), it is not necessary to call `CheckConfig`.
            
             A `CheckConfig` call returns either a set of checked, known-valid inputs that may subsequently be passed to
             [](pulumirpc.ResourceProvider.DiffConfig) and/or [](pulumirpc.ResourceProvider.Configure), or a set of errors
             explaining why the inputs are invalid. In the case that a set of inputs are successfully validated and returned,
             `CheckConfig` *may also populate default values* for provider configuration, returning them so that they may be
             passed to a subsequent [](pulumirpc.ResourceProvider.Configure) call and persisted in the Pulumi state. In the
             case that `CheckConfig` fails and returns a set of errors, it is expected that the caller (typically the Pulumi
             engine) will fail provider registration.
            
             As a rule, the provider inputs returned by a call to `CheckConfig` should preserve the original representation of
             the properties as present in the program inputs. Though this rule is not required for correctness, violations
             thereof can negatively impact the end-user experience, as the provider inputs are used for detecting and
             rendering diffs.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.CheckConfigAsync(Pulumirpc.CheckRequest,Grpc.Core.CallOptions)">
             <summary>
             `CheckConfig` validates a set of configuration inputs that will be passed to this provider instance.
             `CheckConfig` is to provider resources what [](pulumirpc.ResourceProvider.Check) is to individual resources, and
             is the first stage in configuring (that is, eventually executing a [](pulumirpc.ResourceProvider.Configure) call)
             a provider using user-supplied values. In the case that provider inputs are coming from some source that has been
             checked previously (e.g. a Pulumi state), it is not necessary to call `CheckConfig`.
            
             A `CheckConfig` call returns either a set of checked, known-valid inputs that may subsequently be passed to
             [](pulumirpc.ResourceProvider.DiffConfig) and/or [](pulumirpc.ResourceProvider.Configure), or a set of errors
             explaining why the inputs are invalid. In the case that a set of inputs are successfully validated and returned,
             `CheckConfig` *may also populate default values* for provider configuration, returning them so that they may be
             passed to a subsequent [](pulumirpc.ResourceProvider.Configure) call and persisted in the Pulumi state. In the
             case that `CheckConfig` fails and returns a set of errors, it is expected that the caller (typically the Pulumi
             engine) will fail provider registration.
            
             As a rule, the provider inputs returned by a call to `CheckConfig` should preserve the original representation of
             the properties as present in the program inputs. Though this rule is not required for correctness, violations
             thereof can negatively impact the end-user experience, as the provider inputs are used for detecting and
             rendering diffs.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.DiffConfig(Pulumirpc.DiffRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `DiffConfig` compares an existing ("old") provider configuration with a new configuration and computes the
             difference (if any) between them. `DiffConfig` is to provider resources what [](pulumirpc.ResourceProvider.Diff)
             is to individual resources. `DiffConfig` should only be called with values that have at some point been validated
             by a [](pulumirpc.ResourceProvider.CheckConfig) call. The [](pulumirpc.DiffResponse) returned by a `DiffConfig`
             call is used primarily to determine whether or not the newly configured provider is capable of managing resources
             owned by the old provider. If `DiffConfig` indicates that the provider resource needs to be replaced, for
             instance, then all resources owned by that provider will *also* need to be replaced. Replacement semantics should
             thus be reserved for changes to configuration properties that are guaranteed to make old resources unmanageable.
             Changes to an AWS region, for example, will almost certainly require a provider replacement, but changes to an
             AWS access key, should almost certainly not.
            
             Implementations must satisfy the invariants documented on `DiffResponse`.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.DiffConfig(Pulumirpc.DiffRequest,Grpc.Core.CallOptions)">
             <summary>
             `DiffConfig` compares an existing ("old") provider configuration with a new configuration and computes the
             difference (if any) between them. `DiffConfig` is to provider resources what [](pulumirpc.ResourceProvider.Diff)
             is to individual resources. `DiffConfig` should only be called with values that have at some point been validated
             by a [](pulumirpc.ResourceProvider.CheckConfig) call. The [](pulumirpc.DiffResponse) returned by a `DiffConfig`
             call is used primarily to determine whether or not the newly configured provider is capable of managing resources
             owned by the old provider. If `DiffConfig` indicates that the provider resource needs to be replaced, for
             instance, then all resources owned by that provider will *also* need to be replaced. Replacement semantics should
             thus be reserved for changes to configuration properties that are guaranteed to make old resources unmanageable.
             Changes to an AWS region, for example, will almost certainly require a provider replacement, but changes to an
             AWS access key, should almost certainly not.
            
             Implementations must satisfy the invariants documented on `DiffResponse`.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.DiffConfigAsync(Pulumirpc.DiffRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `DiffConfig` compares an existing ("old") provider configuration with a new configuration and computes the
             difference (if any) between them. `DiffConfig` is to provider resources what [](pulumirpc.ResourceProvider.Diff)
             is to individual resources. `DiffConfig` should only be called with values that have at some point been validated
             by a [](pulumirpc.ResourceProvider.CheckConfig) call. The [](pulumirpc.DiffResponse) returned by a `DiffConfig`
             call is used primarily to determine whether or not the newly configured provider is capable of managing resources
             owned by the old provider. If `DiffConfig` indicates that the provider resource needs to be replaced, for
             instance, then all resources owned by that provider will *also* need to be replaced. Replacement semantics should
             thus be reserved for changes to configuration properties that are guaranteed to make old resources unmanageable.
             Changes to an AWS region, for example, will almost certainly require a provider replacement, but changes to an
             AWS access key, should almost certainly not.
            
             Implementations must satisfy the invariants documented on `DiffResponse`.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.DiffConfigAsync(Pulumirpc.DiffRequest,Grpc.Core.CallOptions)">
             <summary>
             `DiffConfig` compares an existing ("old") provider configuration with a new configuration and computes the
             difference (if any) between them. `DiffConfig` is to provider resources what [](pulumirpc.ResourceProvider.Diff)
             is to individual resources. `DiffConfig` should only be called with values that have at some point been validated
             by a [](pulumirpc.ResourceProvider.CheckConfig) call. The [](pulumirpc.DiffResponse) returned by a `DiffConfig`
             call is used primarily to determine whether or not the newly configured provider is capable of managing resources
             owned by the old provider. If `DiffConfig` indicates that the provider resource needs to be replaced, for
             instance, then all resources owned by that provider will *also* need to be replaced. Replacement semantics should
             thus be reserved for changes to configuration properties that are guaranteed to make old resources unmanageable.
             Changes to an AWS region, for example, will almost certainly require a provider replacement, but changes to an
             AWS access key, should almost certainly not.
            
             Implementations must satisfy the invariants documented on `DiffResponse`.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Configure(Pulumirpc.ConfigureRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `Configure` is the final stage in configuring a provider instance. Callers may supply two sets of data:
            
             * Provider-specific configuration, which is the set of inputs that have been validated by a previous
               [](pulumirpc.ResourceProvider.CheckConfig) call.
             * Provider-agnostic ("protocol") configuration, such as whether or not the caller supports secrets.
            
             The provider is expected to return its own set of protocol configuration, indicating which features it supports
             in turn so that the caller and the provider can interact appropriately.
            
             Providers may expect a *single* call to `Configure`. If a call to `Configure` is missing required configuration,
             the provider may return a set of error details containing [](pulumirpc.ConfigureErrorMissingKeys) values to
             indicate which keys are missing.
            
             :::{important}
             The use of `Configure` to configure protocol features is deprecated in favour of the
             [](pulumirpc.ResourceProvider.Handshake) method, which should be implemented by newer providers. To enable
             compatibility between older engines and providers:
            
             * Callers which call `Handshake` *must* call `Configure` with flags such as `acceptSecrets` and `acceptResources`
               set to `true`, since these features predate the introduction of `Handshake` and thus `Handshake`-aware callers
               must support them. See [](pulumirpc.ConfigureRequest) for more information.
             * Providers which implement `Handshake` *must* support flags such as `acceptSecrets` and `acceptResources`, and
               indicate as such by always returning `true` for these fields in [](pulumirpc.ConfigureResponse). See
               [](pulumirpc.ConfigureResponse) for more information.
             :::
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Configure(Pulumirpc.ConfigureRequest,Grpc.Core.CallOptions)">
             <summary>
             `Configure` is the final stage in configuring a provider instance. Callers may supply two sets of data:
            
             * Provider-specific configuration, which is the set of inputs that have been validated by a previous
               [](pulumirpc.ResourceProvider.CheckConfig) call.
             * Provider-agnostic ("protocol") configuration, such as whether or not the caller supports secrets.
            
             The provider is expected to return its own set of protocol configuration, indicating which features it supports
             in turn so that the caller and the provider can interact appropriately.
            
             Providers may expect a *single* call to `Configure`. If a call to `Configure` is missing required configuration,
             the provider may return a set of error details containing [](pulumirpc.ConfigureErrorMissingKeys) values to
             indicate which keys are missing.
            
             :::{important}
             The use of `Configure` to configure protocol features is deprecated in favour of the
             [](pulumirpc.ResourceProvider.Handshake) method, which should be implemented by newer providers. To enable
             compatibility between older engines and providers:
            
             * Callers which call `Handshake` *must* call `Configure` with flags such as `acceptSecrets` and `acceptResources`
               set to `true`, since these features predate the introduction of `Handshake` and thus `Handshake`-aware callers
               must support them. See [](pulumirpc.ConfigureRequest) for more information.
             * Providers which implement `Handshake` *must* support flags such as `acceptSecrets` and `acceptResources`, and
               indicate as such by always returning `true` for these fields in [](pulumirpc.ConfigureResponse). See
               [](pulumirpc.ConfigureResponse) for more information.
             :::
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.ConfigureAsync(Pulumirpc.ConfigureRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `Configure` is the final stage in configuring a provider instance. Callers may supply two sets of data:
            
             * Provider-specific configuration, which is the set of inputs that have been validated by a previous
               [](pulumirpc.ResourceProvider.CheckConfig) call.
             * Provider-agnostic ("protocol") configuration, such as whether or not the caller supports secrets.
            
             The provider is expected to return its own set of protocol configuration, indicating which features it supports
             in turn so that the caller and the provider can interact appropriately.
            
             Providers may expect a *single* call to `Configure`. If a call to `Configure` is missing required configuration,
             the provider may return a set of error details containing [](pulumirpc.ConfigureErrorMissingKeys) values to
             indicate which keys are missing.
            
             :::{important}
             The use of `Configure` to configure protocol features is deprecated in favour of the
             [](pulumirpc.ResourceProvider.Handshake) method, which should be implemented by newer providers. To enable
             compatibility between older engines and providers:
            
             * Callers which call `Handshake` *must* call `Configure` with flags such as `acceptSecrets` and `acceptResources`
               set to `true`, since these features predate the introduction of `Handshake` and thus `Handshake`-aware callers
               must support them. See [](pulumirpc.ConfigureRequest) for more information.
             * Providers which implement `Handshake` *must* support flags such as `acceptSecrets` and `acceptResources`, and
               indicate as such by always returning `true` for these fields in [](pulumirpc.ConfigureResponse). See
               [](pulumirpc.ConfigureResponse) for more information.
             :::
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.ConfigureAsync(Pulumirpc.ConfigureRequest,Grpc.Core.CallOptions)">
             <summary>
             `Configure` is the final stage in configuring a provider instance. Callers may supply two sets of data:
            
             * Provider-specific configuration, which is the set of inputs that have been validated by a previous
               [](pulumirpc.ResourceProvider.CheckConfig) call.
             * Provider-agnostic ("protocol") configuration, such as whether or not the caller supports secrets.
            
             The provider is expected to return its own set of protocol configuration, indicating which features it supports
             in turn so that the caller and the provider can interact appropriately.
            
             Providers may expect a *single* call to `Configure`. If a call to `Configure` is missing required configuration,
             the provider may return a set of error details containing [](pulumirpc.ConfigureErrorMissingKeys) values to
             indicate which keys are missing.
            
             :::{important}
             The use of `Configure` to configure protocol features is deprecated in favour of the
             [](pulumirpc.ResourceProvider.Handshake) method, which should be implemented by newer providers. To enable
             compatibility between older engines and providers:
            
             * Callers which call `Handshake` *must* call `Configure` with flags such as `acceptSecrets` and `acceptResources`
               set to `true`, since these features predate the introduction of `Handshake` and thus `Handshake`-aware callers
               must support them. See [](pulumirpc.ConfigureRequest) for more information.
             * Providers which implement `Handshake` *must* support flags such as `acceptSecrets` and `acceptResources`, and
               indicate as such by always returning `true` for these fields in [](pulumirpc.ConfigureResponse). See
               [](pulumirpc.ConfigureResponse) for more information.
             :::
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Invoke(Pulumirpc.InvokeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Invoke dynamically executes a built-in function in the provider.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Invoke(Pulumirpc.InvokeRequest,Grpc.Core.CallOptions)">
            <summary>
            Invoke dynamically executes a built-in function in the provider.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.InvokeAsync(Pulumirpc.InvokeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Invoke dynamically executes a built-in function in the provider.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.InvokeAsync(Pulumirpc.InvokeRequest,Grpc.Core.CallOptions)">
            <summary>
            Invoke dynamically executes a built-in function in the provider.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Call(Pulumirpc.CallRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Call dynamically executes a method in the provider associated with a component resource.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Call(Pulumirpc.CallRequest,Grpc.Core.CallOptions)">
            <summary>
            Call dynamically executes a method in the provider associated with a component resource.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.CallAsync(Pulumirpc.CallRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Call dynamically executes a method in the provider associated with a component resource.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.CallAsync(Pulumirpc.CallRequest,Grpc.Core.CallOptions)">
            <summary>
            Call dynamically executes a method in the provider associated with a component resource.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Check(Pulumirpc.CheckRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `Check` validates a set of input properties against a given resource type. A `Check` call returns either a set of
             checked, known-valid inputs that may subsequently be passed to [](pulumirpc.ResourceProvider.Diff),
             [](pulumirpc.ResourceProvider.Create), or [](pulumirpc.ResourceProvider.Update); or a set of errors explaining
             why the inputs are invalid. In the case that a set of inputs are successfully validated and returned, `Check`
             *may also populate default values* for resource inputs, returning them so that they may be passed to a subsequent
             call and persisted in the Pulumi state. In the case that `Check` fails and returns a set of errors, it is
             expected that the caller (typically the Pulumi engine) will fail resource registration.
            
             As a rule, the provider inputs returned by a call to `Check` should preserve the original representation of the
             properties as present in the program inputs. Though this rule is not required for correctness, violations thereof
             can negatively impact the end-user experience, as the provider inputs are used for detecting and rendering
             diffs.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Check(Pulumirpc.CheckRequest,Grpc.Core.CallOptions)">
             <summary>
             `Check` validates a set of input properties against a given resource type. A `Check` call returns either a set of
             checked, known-valid inputs that may subsequently be passed to [](pulumirpc.ResourceProvider.Diff),
             [](pulumirpc.ResourceProvider.Create), or [](pulumirpc.ResourceProvider.Update); or a set of errors explaining
             why the inputs are invalid. In the case that a set of inputs are successfully validated and returned, `Check`
             *may also populate default values* for resource inputs, returning them so that they may be passed to a subsequent
             call and persisted in the Pulumi state. In the case that `Check` fails and returns a set of errors, it is
             expected that the caller (typically the Pulumi engine) will fail resource registration.
            
             As a rule, the provider inputs returned by a call to `Check` should preserve the original representation of the
             properties as present in the program inputs. Though this rule is not required for correctness, violations thereof
             can negatively impact the end-user experience, as the provider inputs are used for detecting and rendering
             diffs.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.CheckAsync(Pulumirpc.CheckRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `Check` validates a set of input properties against a given resource type. A `Check` call returns either a set of
             checked, known-valid inputs that may subsequently be passed to [](pulumirpc.ResourceProvider.Diff),
             [](pulumirpc.ResourceProvider.Create), or [](pulumirpc.ResourceProvider.Update); or a set of errors explaining
             why the inputs are invalid. In the case that a set of inputs are successfully validated and returned, `Check`
             *may also populate default values* for resource inputs, returning them so that they may be passed to a subsequent
             call and persisted in the Pulumi state. In the case that `Check` fails and returns a set of errors, it is
             expected that the caller (typically the Pulumi engine) will fail resource registration.
            
             As a rule, the provider inputs returned by a call to `Check` should preserve the original representation of the
             properties as present in the program inputs. Though this rule is not required for correctness, violations thereof
             can negatively impact the end-user experience, as the provider inputs are used for detecting and rendering
             diffs.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.CheckAsync(Pulumirpc.CheckRequest,Grpc.Core.CallOptions)">
             <summary>
             `Check` validates a set of input properties against a given resource type. A `Check` call returns either a set of
             checked, known-valid inputs that may subsequently be passed to [](pulumirpc.ResourceProvider.Diff),
             [](pulumirpc.ResourceProvider.Create), or [](pulumirpc.ResourceProvider.Update); or a set of errors explaining
             why the inputs are invalid. In the case that a set of inputs are successfully validated and returned, `Check`
             *may also populate default values* for resource inputs, returning them so that they may be passed to a subsequent
             call and persisted in the Pulumi state. In the case that `Check` fails and returns a set of errors, it is
             expected that the caller (typically the Pulumi engine) will fail resource registration.
            
             As a rule, the provider inputs returned by a call to `Check` should preserve the original representation of the
             properties as present in the program inputs. Though this rule is not required for correctness, violations thereof
             can negatively impact the end-user experience, as the provider inputs are used for detecting and rendering
             diffs.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Diff(Pulumirpc.DiffRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `Diff` compares an existing ("old") set of resource properties with a new set of properties and computes the
             difference (if any) between them. `Diff` should only be called with values that have at some point been validated
             by a [](pulumirpc.ResourceProvider.Check) call.
            
             Implementations must satisfy the invariants documented on `DiffResponse`.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Diff(Pulumirpc.DiffRequest,Grpc.Core.CallOptions)">
             <summary>
             `Diff` compares an existing ("old") set of resource properties with a new set of properties and computes the
             difference (if any) between them. `Diff` should only be called with values that have at some point been validated
             by a [](pulumirpc.ResourceProvider.Check) call.
            
             Implementations must satisfy the invariants documented on `DiffResponse`.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.DiffAsync(Pulumirpc.DiffRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `Diff` compares an existing ("old") set of resource properties with a new set of properties and computes the
             difference (if any) between them. `Diff` should only be called with values that have at some point been validated
             by a [](pulumirpc.ResourceProvider.Check) call.
            
             Implementations must satisfy the invariants documented on `DiffResponse`.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.DiffAsync(Pulumirpc.DiffRequest,Grpc.Core.CallOptions)">
             <summary>
             `Diff` compares an existing ("old") set of resource properties with a new set of properties and computes the
             difference (if any) between them. `Diff` should only be called with values that have at some point been validated
             by a [](pulumirpc.ResourceProvider.Check) call.
            
             Implementations must satisfy the invariants documented on `DiffResponse`.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Create(Pulumirpc.CreateRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `Create` provisions a new instance of the specified [(custom) resource](custom-resources). It returns a
             provider-assigned ID for the resource as well as the output properties that arose from the creation properties.
             Output properties are typically the union of the resource's input properties and any additional values that were
             computed or made available during creation.
            
             If creation fails, `Create` may return an [](pulumirpc.ErrorResourceInitFailed) error detail explaining why.
             Moreover, if `Create` does return an error, it must be the case that the resource was *not* created (that is,
             `Create` can be thought of as transactional or atomic).
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Create(Pulumirpc.CreateRequest,Grpc.Core.CallOptions)">
             <summary>
             `Create` provisions a new instance of the specified [(custom) resource](custom-resources). It returns a
             provider-assigned ID for the resource as well as the output properties that arose from the creation properties.
             Output properties are typically the union of the resource's input properties and any additional values that were
             computed or made available during creation.
            
             If creation fails, `Create` may return an [](pulumirpc.ErrorResourceInitFailed) error detail explaining why.
             Moreover, if `Create` does return an error, it must be the case that the resource was *not* created (that is,
             `Create` can be thought of as transactional or atomic).
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.CreateAsync(Pulumirpc.CreateRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `Create` provisions a new instance of the specified [(custom) resource](custom-resources). It returns a
             provider-assigned ID for the resource as well as the output properties that arose from the creation properties.
             Output properties are typically the union of the resource's input properties and any additional values that were
             computed or made available during creation.
            
             If creation fails, `Create` may return an [](pulumirpc.ErrorResourceInitFailed) error detail explaining why.
             Moreover, if `Create` does return an error, it must be the case that the resource was *not* created (that is,
             `Create` can be thought of as transactional or atomic).
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.CreateAsync(Pulumirpc.CreateRequest,Grpc.Core.CallOptions)">
             <summary>
             `Create` provisions a new instance of the specified [(custom) resource](custom-resources). It returns a
             provider-assigned ID for the resource as well as the output properties that arose from the creation properties.
             Output properties are typically the union of the resource's input properties and any additional values that were
             computed or made available during creation.
            
             If creation fails, `Create` may return an [](pulumirpc.ErrorResourceInitFailed) error detail explaining why.
             Moreover, if `Create` does return an error, it must be the case that the resource was *not* created (that is,
             `Create` can be thought of as transactional or atomic).
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Read(Pulumirpc.ReadRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `Read` reads the current live state associated with a resource identified by the supplied state. The given state
            must be sufficient to uniquely identify the resource. This is typically just the resource ID, but may also
            include other properties.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Read(Pulumirpc.ReadRequest,Grpc.Core.CallOptions)">
            <summary>
            `Read` reads the current live state associated with a resource identified by the supplied state. The given state
            must be sufficient to uniquely identify the resource. This is typically just the resource ID, but may also
            include other properties.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.ReadAsync(Pulumirpc.ReadRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `Read` reads the current live state associated with a resource identified by the supplied state. The given state
            must be sufficient to uniquely identify the resource. This is typically just the resource ID, but may also
            include other properties.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.ReadAsync(Pulumirpc.ReadRequest,Grpc.Core.CallOptions)">
            <summary>
            `Read` reads the current live state associated with a resource identified by the supplied state. The given state
            must be sufficient to uniquely identify the resource. This is typically just the resource ID, but may also
            include other properties.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Update(Pulumirpc.UpdateRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `Update` updates an existing resource according to a new set of inputs, returning a new set of output properties.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Update(Pulumirpc.UpdateRequest,Grpc.Core.CallOptions)">
            <summary>
            `Update` updates an existing resource according to a new set of inputs, returning a new set of output properties.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.UpdateAsync(Pulumirpc.UpdateRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `Update` updates an existing resource according to a new set of inputs, returning a new set of output properties.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.UpdateAsync(Pulumirpc.UpdateRequest,Grpc.Core.CallOptions)">
            <summary>
            `Update` updates an existing resource according to a new set of inputs, returning a new set of output properties.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Delete(Pulumirpc.DeleteRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `Delete` deprovisions an existing resource as specified by its ID. `Delete` should be transactional/atomic -- if
            a call to `Delete` fails, it must be the case that the resource was *not* deleted and can be assumed to still
            exist.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Delete(Pulumirpc.DeleteRequest,Grpc.Core.CallOptions)">
            <summary>
            `Delete` deprovisions an existing resource as specified by its ID. `Delete` should be transactional/atomic -- if
            a call to `Delete` fails, it must be the case that the resource was *not* deleted and can be assumed to still
            exist.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.DeleteAsync(Pulumirpc.DeleteRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `Delete` deprovisions an existing resource as specified by its ID. `Delete` should be transactional/atomic -- if
            a call to `Delete` fails, it must be the case that the resource was *not* deleted and can be assumed to still
            exist.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.DeleteAsync(Pulumirpc.DeleteRequest,Grpc.Core.CallOptions)">
            <summary>
            `Delete` deprovisions an existing resource as specified by its ID. `Delete` should be transactional/atomic -- if
            a call to `Delete` fails, it must be the case that the resource was *not* deleted and can be assumed to still
            exist.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Construct(Pulumirpc.ConstructRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `Construct` provisions a new [component resource](component-resources). Providers that implement `Construct` are
             referred to as [component providers](component-providers). `Construct` is to component resources what
             [](pulumirpc.ResourceProvider.Create) is to [custom resources](custom-resources). Components do not have any
             lifecycle of their own, and instead embody the lifecycles of the resources that they are composed of. As such,
             `Construct` is effectively a subprogram whose resources will be persisted in the caller's state. It is
             consequently passed enough information to manage fully these resources. At a high level, this comprises:
            
             * A [](pulumirpc.ResourceMonitor) endpoint which the provider can use to [register](resource-registration) nested
               custom or component resources that belong to the component.
            
             * A set of input properties.
            
             * A full set of [resource options](https://www.pulumi.com/docs/iac/concepts/options/) that the component should
               propagate to resources it registers against the supplied resource monitor.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Construct(Pulumirpc.ConstructRequest,Grpc.Core.CallOptions)">
             <summary>
             `Construct` provisions a new [component resource](component-resources). Providers that implement `Construct` are
             referred to as [component providers](component-providers). `Construct` is to component resources what
             [](pulumirpc.ResourceProvider.Create) is to [custom resources](custom-resources). Components do not have any
             lifecycle of their own, and instead embody the lifecycles of the resources that they are composed of. As such,
             `Construct` is effectively a subprogram whose resources will be persisted in the caller's state. It is
             consequently passed enough information to manage fully these resources. At a high level, this comprises:
            
             * A [](pulumirpc.ResourceMonitor) endpoint which the provider can use to [register](resource-registration) nested
               custom or component resources that belong to the component.
            
             * A set of input properties.
            
             * A full set of [resource options](https://www.pulumi.com/docs/iac/concepts/options/) that the component should
               propagate to resources it registers against the supplied resource monitor.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.ConstructAsync(Pulumirpc.ConstructRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `Construct` provisions a new [component resource](component-resources). Providers that implement `Construct` are
             referred to as [component providers](component-providers). `Construct` is to component resources what
             [](pulumirpc.ResourceProvider.Create) is to [custom resources](custom-resources). Components do not have any
             lifecycle of their own, and instead embody the lifecycles of the resources that they are composed of. As such,
             `Construct` is effectively a subprogram whose resources will be persisted in the caller's state. It is
             consequently passed enough information to manage fully these resources. At a high level, this comprises:
            
             * A [](pulumirpc.ResourceMonitor) endpoint which the provider can use to [register](resource-registration) nested
               custom or component resources that belong to the component.
            
             * A set of input properties.
            
             * A full set of [resource options](https://www.pulumi.com/docs/iac/concepts/options/) that the component should
               propagate to resources it registers against the supplied resource monitor.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.ConstructAsync(Pulumirpc.ConstructRequest,Grpc.Core.CallOptions)">
             <summary>
             `Construct` provisions a new [component resource](component-resources). Providers that implement `Construct` are
             referred to as [component providers](component-providers). `Construct` is to component resources what
             [](pulumirpc.ResourceProvider.Create) is to [custom resources](custom-resources). Components do not have any
             lifecycle of their own, and instead embody the lifecycles of the resources that they are composed of. As such,
             `Construct` is effectively a subprogram whose resources will be persisted in the caller's state. It is
             consequently passed enough information to manage fully these resources. At a high level, this comprises:
            
             * A [](pulumirpc.ResourceMonitor) endpoint which the provider can use to [register](resource-registration) nested
               custom or component resources that belong to the component.
            
             * A set of input properties.
            
             * A full set of [resource options](https://www.pulumi.com/docs/iac/concepts/options/) that the component should
               propagate to resources it registers against the supplied resource monitor.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Cancel(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Cancel signals the provider to gracefully shut down and abort any ongoing resource operations.
            Operations aborted in this way will return an error (e.g., `Update` and `Create` will either return a
            creation error or an initialization error). Since Cancel is advisory and non-blocking, it is up
            to the host to decide how long to wait after Cancel is called before (e.g.)
            hard-closing any gRPC connection.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Cancel(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.CallOptions)">
            <summary>
            Cancel signals the provider to gracefully shut down and abort any ongoing resource operations.
            Operations aborted in this way will return an error (e.g., `Update` and `Create` will either return a
            creation error or an initialization error). Since Cancel is advisory and non-blocking, it is up
            to the host to decide how long to wait after Cancel is called before (e.g.)
            hard-closing any gRPC connection.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.CancelAsync(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Cancel signals the provider to gracefully shut down and abort any ongoing resource operations.
            Operations aborted in this way will return an error (e.g., `Update` and `Create` will either return a
            creation error or an initialization error). Since Cancel is advisory and non-blocking, it is up
            to the host to decide how long to wait after Cancel is called before (e.g.)
            hard-closing any gRPC connection.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.CancelAsync(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.CallOptions)">
            <summary>
            Cancel signals the provider to gracefully shut down and abort any ongoing resource operations.
            Operations aborted in this way will return an error (e.g., `Update` and `Create` will either return a
            creation error or an initialization error). Since Cancel is advisory and non-blocking, it is up
            to the host to decide how long to wait after Cancel is called before (e.g.)
            hard-closing any gRPC connection.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.GetPluginInfo(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            GetPluginInfo returns generic information about this plugin, like its version.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.GetPluginInfo(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.CallOptions)">
            <summary>
            GetPluginInfo returns generic information about this plugin, like its version.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.GetPluginInfoAsync(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            GetPluginInfo returns generic information about this plugin, like its version.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.GetPluginInfoAsync(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.CallOptions)">
            <summary>
            GetPluginInfo returns generic information about this plugin, like its version.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Attach(Pulumirpc.PluginAttach,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Attach sends the engine address to an already running plugin.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.Attach(Pulumirpc.PluginAttach,Grpc.Core.CallOptions)">
            <summary>
            Attach sends the engine address to an already running plugin.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.AttachAsync(Pulumirpc.PluginAttach,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Attach sends the engine address to an already running plugin.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.AttachAsync(Pulumirpc.PluginAttach,Grpc.Core.CallOptions)">
            <summary>
            Attach sends the engine address to an already running plugin.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.GetMapping(Pulumirpc.GetMappingRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `GetMapping` returns mappings designed to aid in [converting programs and state from other
             ecosystems](converters). It accepts a "conversion key", which effectively corresponds to a source language, such
             as `terraform`, and a *source provider name*, which is the name of the provider *in the source language*. Given
             these, it returns source-specific mapping data for the provider requested. As an example, the Pulumi AWS
             provider, which is bridged from the Terraform AWS provider and thus capable of mapping names between the two,
             might respond to a call with key `terraform` and source provider name `aws` with mapping data for transforming
             (among other things) Terraform AWS names such as `aws_s3_bucket` into Pulumi AWS types such as
             `aws:s3/bucket:Bucket`. If a provider only supports a single source provider, or has some sensible default, it
             may respond also to a call in which the source provider name is empty (`""`), which will be made when the engine
             does not have sufficient knowledge to work out which provider offers a specific mapping.
            
             In general, it is expected that providers implemented by bridging an equivalent provider from another ecosystem
             (such as bridged Terraform providers built atop the `pulumi-terraform-bridge`, for instance) implement
             `GetMapping` to support conversion from that ecosystem into Pulumi using the same logic that underpins the
             bridging itself.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.GetMapping(Pulumirpc.GetMappingRequest,Grpc.Core.CallOptions)">
             <summary>
             `GetMapping` returns mappings designed to aid in [converting programs and state from other
             ecosystems](converters). It accepts a "conversion key", which effectively corresponds to a source language, such
             as `terraform`, and a *source provider name*, which is the name of the provider *in the source language*. Given
             these, it returns source-specific mapping data for the provider requested. As an example, the Pulumi AWS
             provider, which is bridged from the Terraform AWS provider and thus capable of mapping names between the two,
             might respond to a call with key `terraform` and source provider name `aws` with mapping data for transforming
             (among other things) Terraform AWS names such as `aws_s3_bucket` into Pulumi AWS types such as
             `aws:s3/bucket:Bucket`. If a provider only supports a single source provider, or has some sensible default, it
             may respond also to a call in which the source provider name is empty (`""`), which will be made when the engine
             does not have sufficient knowledge to work out which provider offers a specific mapping.
            
             In general, it is expected that providers implemented by bridging an equivalent provider from another ecosystem
             (such as bridged Terraform providers built atop the `pulumi-terraform-bridge`, for instance) implement
             `GetMapping` to support conversion from that ecosystem into Pulumi using the same logic that underpins the
             bridging itself.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.GetMappingAsync(Pulumirpc.GetMappingRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `GetMapping` returns mappings designed to aid in [converting programs and state from other
             ecosystems](converters). It accepts a "conversion key", which effectively corresponds to a source language, such
             as `terraform`, and a *source provider name*, which is the name of the provider *in the source language*. Given
             these, it returns source-specific mapping data for the provider requested. As an example, the Pulumi AWS
             provider, which is bridged from the Terraform AWS provider and thus capable of mapping names between the two,
             might respond to a call with key `terraform` and source provider name `aws` with mapping data for transforming
             (among other things) Terraform AWS names such as `aws_s3_bucket` into Pulumi AWS types such as
             `aws:s3/bucket:Bucket`. If a provider only supports a single source provider, or has some sensible default, it
             may respond also to a call in which the source provider name is empty (`""`), which will be made when the engine
             does not have sufficient knowledge to work out which provider offers a specific mapping.
            
             In general, it is expected that providers implemented by bridging an equivalent provider from another ecosystem
             (such as bridged Terraform providers built atop the `pulumi-terraform-bridge`, for instance) implement
             `GetMapping` to support conversion from that ecosystem into Pulumi using the same logic that underpins the
             bridging itself.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.GetMappingAsync(Pulumirpc.GetMappingRequest,Grpc.Core.CallOptions)">
             <summary>
             `GetMapping` returns mappings designed to aid in [converting programs and state from other
             ecosystems](converters). It accepts a "conversion key", which effectively corresponds to a source language, such
             as `terraform`, and a *source provider name*, which is the name of the provider *in the source language*. Given
             these, it returns source-specific mapping data for the provider requested. As an example, the Pulumi AWS
             provider, which is bridged from the Terraform AWS provider and thus capable of mapping names between the two,
             might respond to a call with key `terraform` and source provider name `aws` with mapping data for transforming
             (among other things) Terraform AWS names such as `aws_s3_bucket` into Pulumi AWS types such as
             `aws:s3/bucket:Bucket`. If a provider only supports a single source provider, or has some sensible default, it
             may respond also to a call in which the source provider name is empty (`""`), which will be made when the engine
             does not have sufficient knowledge to work out which provider offers a specific mapping.
            
             In general, it is expected that providers implemented by bridging an equivalent provider from another ecosystem
             (such as bridged Terraform providers built atop the `pulumi-terraform-bridge`, for instance) implement
             `GetMapping` to support conversion from that ecosystem into Pulumi using the same logic that underpins the
             bridging itself.
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.GetMappings(Pulumirpc.GetMappingsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `GetMappings` is an optional method designed to aid in [converting programs and state from other
             ecosystems](converters). `GetMappings` accepts a "conversion key". This corresponds to a source language, for
             which we want to retrieve mappings for names etc. from that source language into Pulumi. An example key might
             therefore be `terraform` in the event that we wish to map e.g. Terraform resource names to Pulumi resource types.
             Given a key, `GetMappings` returns a list of *source provider names* for which calls to `GetMapping` will return
             mappings. So, continuing the Terraform example, the Pulumi AWS provider, which is bridged from the Terraform AWS
             provider and thus capable of mapping names between the two, might return the list `["aws"]` in response to a call
             with key `terraform`.
            
             If a provider does not implement `GetMappings`, the engine will fall back to calling `GetMapping` blindly without
             a source provider name (that is, with the value `""`).
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.GetMappings(Pulumirpc.GetMappingsRequest,Grpc.Core.CallOptions)">
             <summary>
             `GetMappings` is an optional method designed to aid in [converting programs and state from other
             ecosystems](converters). `GetMappings` accepts a "conversion key". This corresponds to a source language, for
             which we want to retrieve mappings for names etc. from that source language into Pulumi. An example key might
             therefore be `terraform` in the event that we wish to map e.g. Terraform resource names to Pulumi resource types.
             Given a key, `GetMappings` returns a list of *source provider names* for which calls to `GetMapping` will return
             mappings. So, continuing the Terraform example, the Pulumi AWS provider, which is bridged from the Terraform AWS
             provider and thus capable of mapping names between the two, might return the list `["aws"]` in response to a call
             with key `terraform`.
            
             If a provider does not implement `GetMappings`, the engine will fall back to calling `GetMapping` blindly without
             a source provider name (that is, with the value `""`).
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.GetMappingsAsync(Pulumirpc.GetMappingsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             `GetMappings` is an optional method designed to aid in [converting programs and state from other
             ecosystems](converters). `GetMappings` accepts a "conversion key". This corresponds to a source language, for
             which we want to retrieve mappings for names etc. from that source language into Pulumi. An example key might
             therefore be `terraform` in the event that we wish to map e.g. Terraform resource names to Pulumi resource types.
             Given a key, `GetMappings` returns a list of *source provider names* for which calls to `GetMapping` will return
             mappings. So, continuing the Terraform example, the Pulumi AWS provider, which is bridged from the Terraform AWS
             provider and thus capable of mapping names between the two, might return the list `["aws"]` in response to a call
             with key `terraform`.
            
             If a provider does not implement `GetMappings`, the engine will fall back to calling `GetMapping` blindly without
             a source provider name (that is, with the value `""`).
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
             <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
             <param name="cancellationToken">An optional token for canceling the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.GetMappingsAsync(Pulumirpc.GetMappingsRequest,Grpc.Core.CallOptions)">
             <summary>
             `GetMappings` is an optional method designed to aid in [converting programs and state from other
             ecosystems](converters). `GetMappings` accepts a "conversion key". This corresponds to a source language, for
             which we want to retrieve mappings for names etc. from that source language into Pulumi. An example key might
             therefore be `terraform` in the event that we wish to map e.g. Terraform resource names to Pulumi resource types.
             Given a key, `GetMappings` returns a list of *source provider names* for which calls to `GetMapping` will return
             mappings. So, continuing the Terraform example, the Pulumi AWS provider, which is bridged from the Terraform AWS
             provider and thus capable of mapping names between the two, might return the list `["aws"]` in response to a call
             with key `terraform`.
            
             If a provider does not implement `GetMappings`, the engine will fall back to calling `GetMapping` blindly without
             a source provider name (that is, with the value `""`).
             </summary>
             <param name="request">The request to send to the server.</param>
             <param name="options">The options for the call.</param>
             <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.ResourceProviderClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.BindService(Pulumirpc.ResourceProvider.ResourceProviderBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Pulumirpc.ResourceProvider.BindService(Grpc.Core.ServiceBinderBase,Pulumirpc.ResourceProvider.ResourceProviderBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="T:Pulumirpc.ResourceReflection">
            <summary>Holder for reflection information generated from pulumi/resource.proto</summary>
        </member>
        <member name="P:Pulumirpc.ResourceReflection.Descriptor">
            <summary>File descriptor for pulumi/resource.proto</summary>
        </member>
        <member name="T:Pulumirpc.SupportsFeatureRequest">
            <summary>
            SupportsFeatureRequest allows a client to test if the resource monitor supports a certain feature, which it may use
            to control the format or types of messages it sends.
            </summary>
        </member>
        <member name="F:Pulumirpc.SupportsFeatureRequest.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="P:Pulumirpc.SupportsFeatureRequest.Id">
            <summary>
            the ID of the feature to test support for.
            </summary>
        </member>
        <member name="F:Pulumirpc.SupportsFeatureResponse.HasSupportFieldNumber">
            <summary>Field number for the "hasSupport" field.</summary>
        </member>
        <member name="P:Pulumirpc.SupportsFeatureResponse.HasSupport">
            <summary>
            true when the resource monitor supports this feature.
            </summary>
        </member>
        <member name="T:Pulumirpc.ReadResourceRequest">
            <summary>
            ReadResourceRequest contains enough information to uniquely qualify and read a resource's state.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResourceRequest.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResourceRequest.Id">
            <summary>
            the ID of the resource to read.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResourceRequest.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResourceRequest.Type">
            <summary>
            the type of the resource object.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResourceRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResourceRequest.Name">
            <summary>
            the name, for URN purposes, of the object.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResourceRequest.ParentFieldNumber">
            <summary>Field number for the "parent" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResourceRequest.Parent">
            <summary>
            an optional parent URN that this child resource belongs to.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResourceRequest.PropertiesFieldNumber">
            <summary>Field number for the "properties" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResourceRequest.Properties">
            <summary>
            optional state sufficient to uniquely identify the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResourceRequest.DependenciesFieldNumber">
            <summary>Field number for the "dependencies" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResourceRequest.Dependencies">
            <summary>
            a list of URNs that this read depends on, as observed by the language host.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResourceRequest.ProviderFieldNumber">
            <summary>Field number for the "provider" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResourceRequest.Provider">
            <summary>
            an optional reference to the provider to use for this read.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResourceRequest.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResourceRequest.Version">
            <summary>
            the version of the provider to use when servicing this request.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResourceRequest.AcceptSecretsFieldNumber">
            <summary>Field number for the "acceptSecrets" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResourceRequest.AcceptSecrets">
            <summary>
            when true operations should return secrets as strongly typed.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResourceRequest.AdditionalSecretOutputsFieldNumber">
            <summary>Field number for the "additionalSecretOutputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResourceRequest.AdditionalSecretOutputs">
            <summary>
            a list of output properties that should also be treated as secret, in addition to ones we detect.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResourceRequest.AcceptResourcesFieldNumber">
            <summary>Field number for the "acceptResources" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResourceRequest.AcceptResources">
            <summary>
            when true operations should return resource references as strongly typed.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResourceRequest.PluginDownloadURLFieldNumber">
            <summary>Field number for the "pluginDownloadURL" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResourceRequest.PluginDownloadURL">
            <summary>
            the server url of the provider to use when servicing this request.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResourceRequest.PluginChecksumsFieldNumber">
            <summary>Field number for the "pluginChecksums" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResourceRequest.PluginChecksums">
            <summary>
            a map of checksums of the provider to use when servicing this request.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResourceRequest.SourcePositionFieldNumber">
            <summary>Field number for the "sourcePosition" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResourceRequest.SourcePosition">
            <summary>
            the optional source position of the user code that initiated the read.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResourceRequest.StackTraceFieldNumber">
            <summary>Field number for the "stackTrace" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResourceRequest.StackTrace">
            <summary>
            the optional stack trace at the time of the request.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResourceRequest.ParentStackTraceHandleFieldNumber">
            <summary>Field number for the "parentStackTraceHandle" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResourceRequest.ParentStackTraceHandle">
            <summary>
            the optional parent stack trace handle for the request. Supports stitching stack traces across plugins.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResourceRequest.PackageRefFieldNumber">
            <summary>Field number for the "packageRef" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResourceRequest.PackageRef">
            <summary>
            a reference from RegisterPackageRequest.
            </summary>
        </member>
        <member name="T:Pulumirpc.ReadResourceResponse">
            <summary>
            ReadResourceResponse contains the result of reading a resource's state.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResourceResponse.UrnFieldNumber">
            <summary>Field number for the "urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResourceResponse.Urn">
            <summary>
            the URN for this resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ReadResourceResponse.PropertiesFieldNumber">
            <summary>Field number for the "properties" field.</summary>
        </member>
        <member name="P:Pulumirpc.ReadResourceResponse.Properties">
            <summary>
            the state of the resource read from the live environment.
            </summary>
        </member>
        <member name="T:Pulumirpc.RegisterResourceRequest">
            <summary>
            RegisterResourceRequest contains information about a resource object that was newly allocated.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.Type">
            <summary>
            the type of the object allocated.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.Name">
            <summary>
            the name, for URN purposes, of the object.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.ParentFieldNumber">
            <summary>Field number for the "parent" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.Parent">
            <summary>
            an optional parent URN that this child resource belongs to.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.CustomFieldNumber">
            <summary>Field number for the "custom" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.Custom">
            <summary>
            true if the resource is a custom, managed by a plugin's CRUD operations.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.ObjectFieldNumber">
            <summary>Field number for the "object" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.Object">
            <summary>
            an object produced by the interpreter/source.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.ProtectFieldNumber">
            <summary>Field number for the "protect" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.Protect">
            <summary>
            true if the resource should be marked protected.
            </summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.HasProtect">
            <summary>Gets whether the "protect" field is set</summary>
        </member>
        <member name="M:Pulumirpc.RegisterResourceRequest.ClearProtect">
            <summary>Clears the value of the "protect" field</summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.DependenciesFieldNumber">
            <summary>Field number for the "dependencies" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.Dependencies">
            <summary>
            a list of URNs that this resource depends on, as observed by the language host.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.ProviderFieldNumber">
            <summary>Field number for the "provider" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.Provider">
            <summary>
            an optional reference to the provider to manage this resource's CRUD operations.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.PropertyDependenciesFieldNumber">
            <summary>Field number for the "propertyDependencies" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.PropertyDependencies">
            <summary>
            a map from property keys to the dependencies of the property.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.DeleteBeforeReplaceFieldNumber">
            <summary>Field number for the "deleteBeforeReplace" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.DeleteBeforeReplace">
            <summary>
            true if this resource should be deleted before replacement.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.Version">
            <summary>
            the version of the provider to use when servicing this request.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.IgnoreChangesFieldNumber">
            <summary>Field number for the "ignoreChanges" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.IgnoreChanges">
            <summary>
            a list of property selectors to ignore during updates.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.AcceptSecretsFieldNumber">
            <summary>Field number for the "acceptSecrets" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.AcceptSecrets">
            <summary>
            when true operations should return secrets as strongly typed.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.AdditionalSecretOutputsFieldNumber">
            <summary>Field number for the "additionalSecretOutputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.AdditionalSecretOutputs">
            <summary>
            a list of output properties that should also be treated as secret, in addition to ones we detect.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.AliasURNsFieldNumber">
            <summary>Field number for the "aliasURNs" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.AliasURNs">
            <summary>
            a list of additional URNs that should be considered the same.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.ImportIdFieldNumber">
            <summary>Field number for the "importId" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.ImportId">
            <summary>
            if set, this resource's state should be imported from the given ID.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.CustomTimeoutsFieldNumber">
            <summary>Field number for the "customTimeouts" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.CustomTimeouts">
            <summary>
            ability to pass a custom Timeout block.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.DeleteBeforeReplaceDefinedFieldNumber">
            <summary>Field number for the "deleteBeforeReplaceDefined" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.DeleteBeforeReplaceDefined">
            <summary>
            true if the deleteBeforeReplace property should be treated as defined even if it is false.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.SupportsPartialValuesFieldNumber">
            <summary>Field number for the "supportsPartialValues" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.SupportsPartialValues">
            <summary>
            true if the request is from an SDK that supports partially-known properties during preview.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.RemoteFieldNumber">
            <summary>Field number for the "remote" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.Remote">
            <summary>
            true if the resource is a plugin-managed component resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.AcceptResourcesFieldNumber">
            <summary>Field number for the "acceptResources" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.AcceptResources">
            <summary>
            when true operations should return resource references as strongly typed.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.ProvidersFieldNumber">
            <summary>Field number for the "providers" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.Providers">
            <summary>
            an optional reference to the provider map to manage this resource's CRUD operations.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.ReplaceOnChangesFieldNumber">
            <summary>Field number for the "replaceOnChanges" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.ReplaceOnChanges">
            <summary>
            a list of properties that if changed should force a replacement.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.PluginDownloadURLFieldNumber">
            <summary>Field number for the "pluginDownloadURL" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.PluginDownloadURL">
            <summary>
            the server URL of the provider to use when servicing this request.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.PluginChecksumsFieldNumber">
            <summary>Field number for the "pluginChecksums" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.PluginChecksums">
            <summary>
            a map of checksums expected for the provider plugin.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.RetainOnDeleteFieldNumber">
            <summary>Field number for the "retainOnDelete" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.RetainOnDelete">
            <summary>
            if true the engine will not call the resource providers delete method for this resource.
            </summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.HasRetainOnDelete">
            <summary>Gets whether the "retainOnDelete" field is set</summary>
        </member>
        <member name="M:Pulumirpc.RegisterResourceRequest.ClearRetainOnDelete">
            <summary>Clears the value of the "retainOnDelete" field</summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.AliasesFieldNumber">
            <summary>Field number for the "aliases" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.Aliases">
            <summary>
            a list of additional aliases that should be considered the same.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.DeletedWithFieldNumber">
            <summary>Field number for the "deletedWith" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.DeletedWith">
            <summary>
            if set the engine will not call the resource providers delete method for this resource when specified resource is deleted.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.AliasSpecsFieldNumber">
            <summary>Field number for the "aliasSpecs" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.AliasSpecs">
            <summary>
            Indicates that alias specs are specified correctly according to the spec.
            Older versions of the Node.js SDK did not send alias specs correctly.
            If this is not set to true and the engine detects the request is from the
            Node.js runtime, the engine will transform incorrect alias specs into
            correct ones.
            Other SDKs that are correctly specifying alias specs could set this to
            true, but it's not necessary.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.SourcePositionFieldNumber">
            <summary>Field number for the "sourcePosition" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.SourcePosition">
            <summary>
            the optional source position of the user code that initiated the register.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.StackTraceFieldNumber">
            <summary>Field number for the "stackTrace" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.StackTrace">
            <summary>
            the optional stack trace at the time of the request.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.ParentStackTraceHandleFieldNumber">
            <summary>Field number for the "parentStackTraceHandle" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.ParentStackTraceHandle">
            <summary>
            the optional parent stack trace handle for the request. Supports stitching stack traces across plugins.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.TransformsFieldNumber">
            <summary>Field number for the "transforms" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.Transforms">
            <summary>
            a list of transforms to apply to the resource before registering it.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.SupportsResultReportingFieldNumber">
            <summary>Field number for the "supportsResultReporting" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.SupportsResultReporting">
            <summary>
            true if the request is from an SDK that supports the result field in the response.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.PackageRefFieldNumber">
            <summary>Field number for the "packageRef" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.PackageRef">
            <summary>
            a reference from RegisterPackageRequest.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.HooksFieldNumber">
            <summary>Field number for the "hooks" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.Hooks">
            <summary>
            The resource hooks that should run at certain points in the resource's lifecycle.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.HideDiffsFieldNumber">
            <summary>Field number for the "hideDiffs" field.</summary>
        </member>
        <member name="T:Pulumirpc.RegisterResourceRequest.Types">
            <summary>Container for nested types declared in the RegisterResourceRequest message type.</summary>
        </member>
        <member name="T:Pulumirpc.RegisterResourceRequest.Types.PropertyDependencies">
            <summary>
            PropertyDependencies describes the resources that a particular property depends on.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.Types.PropertyDependencies.UrnsFieldNumber">
            <summary>Field number for the "urns" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.Types.PropertyDependencies.Urns">
            <summary>
            A list of URNs this property depends on.
            </summary>
        </member>
        <member name="T:Pulumirpc.RegisterResourceRequest.Types.CustomTimeouts">
            <summary>
            CustomTimeouts allows a user to be able to create a set of custom timeout parameters.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.Types.CustomTimeouts.CreateFieldNumber">
            <summary>Field number for the "create" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.Types.CustomTimeouts.Create">
            <summary>
            The create resource timeout represented as a string e.g. 5m.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.Types.CustomTimeouts.UpdateFieldNumber">
            <summary>Field number for the "update" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.Types.CustomTimeouts.Update">
            <summary>
            The update resource timeout represented as a string e.g. 5m.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.Types.CustomTimeouts.DeleteFieldNumber">
            <summary>Field number for the "delete" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceRequest.Types.CustomTimeouts.Delete">
            <summary>
            The delete resource timeout represented as a string e.g. 5m.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.Types.ResourceHooksBinding.BeforeCreateFieldNumber">
            <summary>Field number for the "before_create" field.</summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.Types.ResourceHooksBinding.AfterCreateFieldNumber">
            <summary>Field number for the "after_create" field.</summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.Types.ResourceHooksBinding.BeforeUpdateFieldNumber">
            <summary>Field number for the "before_update" field.</summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.Types.ResourceHooksBinding.AfterUpdateFieldNumber">
            <summary>Field number for the "after_update" field.</summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.Types.ResourceHooksBinding.BeforeDeleteFieldNumber">
            <summary>Field number for the "before_delete" field.</summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceRequest.Types.ResourceHooksBinding.AfterDeleteFieldNumber">
            <summary>Field number for the "after_delete" field.</summary>
        </member>
        <member name="T:Pulumirpc.RegisterResourceResponse">
            <summary>
            RegisterResourceResponse is returned by the engine after a resource has finished being initialized.  It includes the
            auto-assigned URN, the provider-assigned ID, and any other properties initialized by the engine.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceResponse.UrnFieldNumber">
            <summary>Field number for the "urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceResponse.Urn">
            <summary>
            the URN assigned by the engine.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceResponse.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceResponse.Id">
            <summary>
            the unique ID assigned by the provider.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceResponse.ObjectFieldNumber">
            <summary>Field number for the "object" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceResponse.Object">
            <summary>
            the resulting object properties, including provider defaults.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceResponse.StableFieldNumber">
            <summary>Field number for the "stable" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceResponse.Stable">
            <summary>
            if true, the object's state is stable and may be trusted not to change.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceResponse.StablesFieldNumber">
            <summary>Field number for the "stables" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceResponse.Stables">
            <summary>
            an optional list of guaranteed-stable properties.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceResponse.PropertyDependenciesFieldNumber">
            <summary>Field number for the "propertyDependencies" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceResponse.PropertyDependencies">
            <summary>
            a map from property keys to the dependencies of the property.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceResponse.Result">
            <summary>
            the reason, whether the resource registration was successful, failed, or skipped.
            </summary>
        </member>
        <member name="T:Pulumirpc.RegisterResourceResponse.Types">
            <summary>Container for nested types declared in the RegisterResourceResponse message type.</summary>
        </member>
        <member name="T:Pulumirpc.RegisterResourceResponse.Types.PropertyDependencies">
            <summary>
            PropertyDependencies describes the resources that a particular property depends on.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceResponse.Types.PropertyDependencies.UrnsFieldNumber">
            <summary>Field number for the "urns" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceResponse.Types.PropertyDependencies.Urns">
            <summary>
            A list of URNs this property depends on.
            </summary>
        </member>
        <member name="T:Pulumirpc.RegisterResourceOutputsRequest">
            <summary>
            RegisterResourceOutputsRequest adds extra resource outputs created by the program after registration has occurred.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceOutputsRequest.UrnFieldNumber">
            <summary>Field number for the "urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceOutputsRequest.Urn">
            <summary>
            the URN for the resource to attach output properties to.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceOutputsRequest.OutputsFieldNumber">
            <summary>Field number for the "outputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceOutputsRequest.Outputs">
            <summary>
            additional output properties to add to the existing resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceInvokeRequest.TokFieldNumber">
            <summary>Field number for the "tok" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceInvokeRequest.Tok">
            <summary>
            the function token to invoke.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceInvokeRequest.ArgsFieldNumber">
            <summary>Field number for the "args" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceInvokeRequest.Args">
            <summary>
            the arguments for the function invocation.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceInvokeRequest.ProviderFieldNumber">
            <summary>Field number for the "provider" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceInvokeRequest.Provider">
            <summary>
            an optional reference to the provider version to use for this invoke.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceInvokeRequest.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceInvokeRequest.Version">
            <summary>
            the version of the provider to use when servicing this request.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceInvokeRequest.AcceptResourcesFieldNumber">
            <summary>Field number for the "acceptResources" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceInvokeRequest.AcceptResources">
            <summary>
            when true operations should return resource references as strongly typed.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceInvokeRequest.PluginDownloadURLFieldNumber">
            <summary>Field number for the "pluginDownloadURL" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceInvokeRequest.PluginDownloadURL">
            <summary>
            an optional reference to the provider url to use for this invoke.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceInvokeRequest.PluginChecksumsFieldNumber">
            <summary>Field number for the "pluginChecksums" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceInvokeRequest.PluginChecksums">
            <summary>
            a map of checksums expected for the provider plugin.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceInvokeRequest.SourcePositionFieldNumber">
            <summary>Field number for the "sourcePosition" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceInvokeRequest.SourcePosition">
            <summary>
            the optional source position of the user code that initiated the invoke.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceInvokeRequest.StackTraceFieldNumber">
            <summary>Field number for the "stackTrace" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceInvokeRequest.StackTrace">
            <summary>
            the optional stack trace at the time of the request.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceInvokeRequest.ParentStackTraceHandleFieldNumber">
            <summary>Field number for the "parentStackTraceHandle" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceInvokeRequest.ParentStackTraceHandle">
            <summary>
            the optional parent stack trace handle for the request. Supports stitching stack traces across plugins.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceInvokeRequest.PackageRefFieldNumber">
            <summary>Field number for the "packageRef" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceInvokeRequest.PackageRef">
            <summary>
            a reference from RegisterPackageRequest.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceCallRequest.TokFieldNumber">
            <summary>Field number for the "tok" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceCallRequest.Tok">
            <summary>
            the function token to invoke.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceCallRequest.ArgsFieldNumber">
            <summary>Field number for the "args" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceCallRequest.Args">
            <summary>
            the arguments for the function invocation.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceCallRequest.ArgDependenciesFieldNumber">
            <summary>Field number for the "argDependencies" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceCallRequest.ArgDependencies">
            <summary>
            a map from argument keys to the dependencies of the argument.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceCallRequest.ProviderFieldNumber">
            <summary>Field number for the "provider" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceCallRequest.Provider">
            <summary>
            an optional reference to the provider to use for this invoke.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceCallRequest.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceCallRequest.Version">
            <summary>
            the version of the provider to use when servicing this request.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceCallRequest.PluginDownloadURLFieldNumber">
            <summary>Field number for the "pluginDownloadURL" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceCallRequest.PluginDownloadURL">
            <summary>
            the pluginDownloadURL of the provider to use when servicing this request.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceCallRequest.PluginChecksumsFieldNumber">
            <summary>Field number for the "pluginChecksums" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceCallRequest.PluginChecksums">
            <summary>
            a map of checksums of the provider to use when servicing this request.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceCallRequest.SourcePositionFieldNumber">
            <summary>Field number for the "sourcePosition" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceCallRequest.SourcePosition">
            <summary>
            the optional source position of the user code that initiated the call.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceCallRequest.StackTraceFieldNumber">
            <summary>Field number for the "stackTrace" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceCallRequest.StackTrace">
            <summary>
            the optional stack trace at the time of the request.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceCallRequest.ParentStackTraceHandleFieldNumber">
            <summary>Field number for the "parentStackTraceHandle" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceCallRequest.ParentStackTraceHandle">
            <summary>
            the optional parent stack trace handle for the request. Supports stitching stack traces across plugins.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceCallRequest.PackageRefFieldNumber">
            <summary>Field number for the "packageRef" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceCallRequest.PackageRef">
            <summary>
            a reference from RegisterPackageRequest.
            </summary>
        </member>
        <member name="T:Pulumirpc.ResourceCallRequest.Types">
            <summary>Container for nested types declared in the ResourceCallRequest message type.</summary>
        </member>
        <member name="T:Pulumirpc.ResourceCallRequest.Types.ArgumentDependencies">
            <summary>
            ArgumentDependencies describes the resources that a particular argument depends on.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceCallRequest.Types.ArgumentDependencies.UrnsFieldNumber">
            <summary>Field number for the "urns" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceCallRequest.Types.ArgumentDependencies.Urns">
            <summary>
            A list of URNs this argument depends on.
            </summary>
        </member>
        <member name="T:Pulumirpc.TransformResourceOptions">
            <summary>
            TransformResourceOptions is a subset of all resource options that are relevant to transforms.
            </summary>
        </member>
        <member name="F:Pulumirpc.TransformResourceOptions.DependsOnFieldNumber">
            <summary>Field number for the "depends_on" field.</summary>
        </member>
        <member name="F:Pulumirpc.TransformResourceOptions.ProtectFieldNumber">
            <summary>Field number for the "protect" field.</summary>
        </member>
        <member name="P:Pulumirpc.TransformResourceOptions.HasProtect">
            <summary>Gets whether the "protect" field is set</summary>
        </member>
        <member name="M:Pulumirpc.TransformResourceOptions.ClearProtect">
            <summary>Clears the value of the "protect" field</summary>
        </member>
        <member name="F:Pulumirpc.TransformResourceOptions.IgnoreChangesFieldNumber">
            <summary>Field number for the "ignore_changes" field.</summary>
        </member>
        <member name="F:Pulumirpc.TransformResourceOptions.ReplaceOnChangesFieldNumber">
            <summary>Field number for the "replace_on_changes" field.</summary>
        </member>
        <member name="F:Pulumirpc.TransformResourceOptions.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="F:Pulumirpc.TransformResourceOptions.AliasesFieldNumber">
            <summary>Field number for the "aliases" field.</summary>
        </member>
        <member name="F:Pulumirpc.TransformResourceOptions.ProviderFieldNumber">
            <summary>Field number for the "provider" field.</summary>
        </member>
        <member name="F:Pulumirpc.TransformResourceOptions.CustomTimeoutsFieldNumber">
            <summary>Field number for the "custom_timeouts" field.</summary>
        </member>
        <member name="F:Pulumirpc.TransformResourceOptions.PluginDownloadUrlFieldNumber">
            <summary>Field number for the "plugin_download_url" field.</summary>
        </member>
        <member name="F:Pulumirpc.TransformResourceOptions.RetainOnDeleteFieldNumber">
            <summary>Field number for the "retain_on_delete" field.</summary>
        </member>
        <member name="P:Pulumirpc.TransformResourceOptions.HasRetainOnDelete">
            <summary>Gets whether the "retain_on_delete" field is set</summary>
        </member>
        <member name="M:Pulumirpc.TransformResourceOptions.ClearRetainOnDelete">
            <summary>Clears the value of the "retain_on_delete" field</summary>
        </member>
        <member name="F:Pulumirpc.TransformResourceOptions.DeletedWithFieldNumber">
            <summary>Field number for the "deleted_with" field.</summary>
        </member>
        <member name="F:Pulumirpc.TransformResourceOptions.DeleteBeforeReplaceFieldNumber">
            <summary>Field number for the "delete_before_replace" field.</summary>
        </member>
        <member name="P:Pulumirpc.TransformResourceOptions.HasDeleteBeforeReplace">
            <summary>Gets whether the "delete_before_replace" field is set</summary>
        </member>
        <member name="M:Pulumirpc.TransformResourceOptions.ClearDeleteBeforeReplace">
            <summary>Clears the value of the "delete_before_replace" field</summary>
        </member>
        <member name="F:Pulumirpc.TransformResourceOptions.AdditionalSecretOutputsFieldNumber">
            <summary>Field number for the "additional_secret_outputs" field.</summary>
        </member>
        <member name="F:Pulumirpc.TransformResourceOptions.ProvidersFieldNumber">
            <summary>Field number for the "providers" field.</summary>
        </member>
        <member name="F:Pulumirpc.TransformResourceOptions.PluginChecksumsFieldNumber">
            <summary>Field number for the "plugin_checksums" field.</summary>
        </member>
        <member name="F:Pulumirpc.TransformResourceOptions.HooksFieldNumber">
            <summary>Field number for the "hooks" field.</summary>
        </member>
        <member name="F:Pulumirpc.TransformResourceOptions.ImportFieldNumber">
            <summary>Field number for the "import" field.</summary>
        </member>
        <member name="F:Pulumirpc.TransformResourceOptions.HideDiffFieldNumber">
            <summary>Field number for the "hide_diff" field.</summary>
        </member>
        <member name="F:Pulumirpc.TransformRequest.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="P:Pulumirpc.TransformRequest.Type">
            <summary>
            the type of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.TransformRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.TransformRequest.Name">
            <summary>
            the name of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.TransformRequest.CustomFieldNumber">
            <summary>Field number for the "custom" field.</summary>
        </member>
        <member name="P:Pulumirpc.TransformRequest.Custom">
            <summary>
            true if the resource is a custom resource, else it's a component resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.TransformRequest.ParentFieldNumber">
            <summary>Field number for the "parent" field.</summary>
        </member>
        <member name="P:Pulumirpc.TransformRequest.Parent">
            <summary>
            the parent of the resource, this can't be changed by the transform.
            </summary>
        </member>
        <member name="F:Pulumirpc.TransformRequest.PropertiesFieldNumber">
            <summary>Field number for the "properties" field.</summary>
        </member>
        <member name="P:Pulumirpc.TransformRequest.Properties">
            <summary>
            the input properties of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.TransformRequest.OptionsFieldNumber">
            <summary>Field number for the "options" field.</summary>
        </member>
        <member name="P:Pulumirpc.TransformRequest.Options">
            <summary>
            the options for the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.TransformResponse.PropertiesFieldNumber">
            <summary>Field number for the "properties" field.</summary>
        </member>
        <member name="P:Pulumirpc.TransformResponse.Properties">
            <summary>
            the transformed input properties.
            </summary>
        </member>
        <member name="F:Pulumirpc.TransformResponse.OptionsFieldNumber">
            <summary>Field number for the "options" field.</summary>
        </member>
        <member name="P:Pulumirpc.TransformResponse.Options">
            <summary>
            the options for the resource.
            </summary>
        </member>
        <member name="T:Pulumirpc.TransformInvokeRequest">
            <summary>
            TransformInvokeRequest is the request object for the TransformInvoke RPC.
            </summary>
        </member>
        <member name="F:Pulumirpc.TransformInvokeRequest.TokenFieldNumber">
            <summary>Field number for the "token" field.</summary>
        </member>
        <member name="P:Pulumirpc.TransformInvokeRequest.Token">
            <summary>
            the token for the invoke request.
            </summary>
        </member>
        <member name="F:Pulumirpc.TransformInvokeRequest.ArgsFieldNumber">
            <summary>Field number for the "args" field.</summary>
        </member>
        <member name="P:Pulumirpc.TransformInvokeRequest.Args">
            <summary>
            the input args of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.TransformInvokeRequest.OptionsFieldNumber">
            <summary>Field number for the "options" field.</summary>
        </member>
        <member name="P:Pulumirpc.TransformInvokeRequest.Options">
            <summary>
            the options for the resource.
            </summary>
        </member>
        <member name="T:Pulumirpc.TransformInvokeResponse">
            <summary>
            TransformInvokeResponse is the response object for the TransformInvoke RPC.
            </summary>
        </member>
        <member name="F:Pulumirpc.TransformInvokeResponse.ArgsFieldNumber">
            <summary>Field number for the "args" field.</summary>
        </member>
        <member name="P:Pulumirpc.TransformInvokeResponse.Args">
            <summary>
            the transformed input args.
            </summary>
        </member>
        <member name="F:Pulumirpc.TransformInvokeResponse.OptionsFieldNumber">
            <summary>Field number for the "options" field.</summary>
        </member>
        <member name="P:Pulumirpc.TransformInvokeResponse.Options">
            <summary>
            the options for the resource.
            </summary>
        </member>
        <member name="T:Pulumirpc.TransformInvokeOptions">
            <summary>
            TransformInvokeOptions is a subset of all invoke options that are relevant to transforms.
            </summary>
        </member>
        <member name="F:Pulumirpc.TransformInvokeOptions.ProviderFieldNumber">
            <summary>Field number for the "provider" field.</summary>
        </member>
        <member name="F:Pulumirpc.TransformInvokeOptions.PluginDownloadUrlFieldNumber">
            <summary>Field number for the "plugin_download_url" field.</summary>
        </member>
        <member name="F:Pulumirpc.TransformInvokeOptions.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="F:Pulumirpc.TransformInvokeOptions.PluginChecksumsFieldNumber">
            <summary>Field number for the "plugin_checksums" field.</summary>
        </member>
        <member name="T:Pulumirpc.ResourceHookRequest">
            <summary>
            ResourceHookRequest is the request object for resource hook callbacks in CallbackInvokeRequest.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceHookRequest.UrnFieldNumber">
            <summary>Field number for the "urn" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceHookRequest.Urn">
            <summary>
            the urn of the resource for which the hook is called.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceHookRequest.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceHookRequest.Id">
            <summary>
            the optional urn of the resource for which the hook is called.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceHookRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceHookRequest.Name">
            <summary>
            the name of the resource for which the hook is called.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceHookRequest.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceHookRequest.Type">
            <summary>
            the type of the resource for which the hook is called.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceHookRequest.NewInputsFieldNumber">
            <summary>Field number for the "new_inputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceHookRequest.NewInputs">
            <summary>
            the optional checked new inputs of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceHookRequest.OldInputsFieldNumber">
            <summary>Field number for the "old_inputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceHookRequest.OldInputs">
            <summary>
            the optional checked old inputs of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceHookRequest.NewOutputsFieldNumber">
            <summary>Field number for the "new_outputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceHookRequest.NewOutputs">
            <summary>
            the optional new outputs of the resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceHookRequest.OldOutputsFieldNumber">
            <summary>Field number for the "old_outputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceHookRequest.OldOutputs">
            <summary>
            the optional old outputs of the resource.
            </summary>
        </member>
        <member name="T:Pulumirpc.ResourceHookResponse">
            <summary>
            ResourceHookResponse is the response object for resource hook callbacks in CallbackInvokeResponse.
            </summary>
        </member>
        <member name="F:Pulumirpc.ResourceHookResponse.ErrorFieldNumber">
            <summary>Field number for the "error" field.</summary>
        </member>
        <member name="P:Pulumirpc.ResourceHookResponse.Error">
            <summary>
            an optional error message to return from the hook.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterPackageRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterPackageRequest.Name">
            <summary>
            the plugin name.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterPackageRequest.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterPackageRequest.Version">
            <summary>
            the plugin version.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterPackageRequest.DownloadUrlFieldNumber">
            <summary>Field number for the "download_url" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterPackageRequest.DownloadUrl">
            <summary>
            the optional plugin download url.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterPackageRequest.ChecksumsFieldNumber">
            <summary>Field number for the "checksums" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterPackageRequest.Checksums">
            <summary>
            the optional plugin checksums.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterPackageRequest.ParameterizationFieldNumber">
            <summary>Field number for the "parameterization" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterPackageRequest.Parameterization">
            <summary>
            the optional parameterization for this package.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterPackageResponse.RefFieldNumber">
            <summary>Field number for the "ref" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterPackageResponse.Ref">
             <summary>
             The UUID package reference for this registered package.
            
             Lifecycle methods accept this reference in the 'packageRef' field.
             </summary>
        </member>
        <member name="F:Pulumirpc.Parameterization.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.Parameterization.Name">
            <summary>
            the parameterized package name.
            </summary>
        </member>
        <member name="F:Pulumirpc.Parameterization.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Pulumirpc.Parameterization.Version">
            <summary>
            the parameterized package version.
            </summary>
        </member>
        <member name="F:Pulumirpc.Parameterization.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="P:Pulumirpc.Parameterization.Value">
            <summary>
            the parameter value for the parameterized package.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceHookRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceHookRequest.Name">
            <summary>
            The name of the hook. Must be unique within a program, registering the
            same name twice is an error.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceHookRequest.CallbackFieldNumber">
            <summary>Field number for the "callback" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceHookRequest.Callback">
            <summary>
            the callback that the engine can call to run the hook.
            </summary>
        </member>
        <member name="F:Pulumirpc.RegisterResourceHookRequest.OnDryRunFieldNumber">
            <summary>Field number for the "on_dry_run" field.</summary>
        </member>
        <member name="P:Pulumirpc.RegisterResourceHookRequest.OnDryRun">
            <summary>
            whether to run the hook on dry runs.
            </summary>
        </member>
        <member name="T:Pulumirpc.ResourceMonitor">
            <summary>
            ResourceMonitor is the interface a source uses to talk back to the planning monitor orchestrating the execution.
            </summary>
        </member>
        <member name="P:Pulumirpc.ResourceMonitor.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Pulumirpc.ResourceMonitor.ResourceMonitorBase">
            <summary>Base class for server-side implementations of ResourceMonitor</summary>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorBase.RegisterStackTransform(Pulumirpc.Callback,Grpc.Core.ServerCallContext)">
            <summary>
            Register a resource transform for the stack
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorBase.RegisterStackInvokeTransform(Pulumirpc.Callback,Grpc.Core.ServerCallContext)">
            <summary>
            Register an invoke transform for the stack
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorBase.RegisterResourceHook(Pulumirpc.RegisterResourceHookRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Register a resource hook that can be called by the engine during certain
            steps of a resource's lifecycle.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorBase.RegisterPackage(Pulumirpc.RegisterPackageRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Registers a package and allocates a packageRef. The same package can be registered multiple times in Pulumi.
            Multiple requests are idempotent and guaranteed to return the same result.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorBase.SignalAndWaitForShutdown(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.ServerCallContext)">
            <summary>
            SignalAndWaitForShutdown lets the resource monitor know that no more
            events will be generated. This call blocks until the resource monitor is
            finished, which will happen once all the steps have executed. This allows
            the language runtime to stay running and handle callback requests, even
            after the user program has completed. Runtime SDKs should call this after
            executing the user's program. This can only be called once.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="T:Pulumirpc.ResourceMonitor.ResourceMonitorClient">
            <summary>Client for ResourceMonitor</summary>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for ResourceMonitor</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for ResourceMonitor that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.RegisterStackTransform(Pulumirpc.Callback,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Register a resource transform for the stack
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.RegisterStackTransform(Pulumirpc.Callback,Grpc.Core.CallOptions)">
            <summary>
            Register a resource transform for the stack
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.RegisterStackTransformAsync(Pulumirpc.Callback,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Register a resource transform for the stack
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.RegisterStackTransformAsync(Pulumirpc.Callback,Grpc.Core.CallOptions)">
            <summary>
            Register a resource transform for the stack
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.RegisterStackInvokeTransform(Pulumirpc.Callback,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Register an invoke transform for the stack
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.RegisterStackInvokeTransform(Pulumirpc.Callback,Grpc.Core.CallOptions)">
            <summary>
            Register an invoke transform for the stack
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.RegisterStackInvokeTransformAsync(Pulumirpc.Callback,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Register an invoke transform for the stack
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.RegisterStackInvokeTransformAsync(Pulumirpc.Callback,Grpc.Core.CallOptions)">
            <summary>
            Register an invoke transform for the stack
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.RegisterResourceHook(Pulumirpc.RegisterResourceHookRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Register a resource hook that can be called by the engine during certain
            steps of a resource's lifecycle.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.RegisterResourceHook(Pulumirpc.RegisterResourceHookRequest,Grpc.Core.CallOptions)">
            <summary>
            Register a resource hook that can be called by the engine during certain
            steps of a resource's lifecycle.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.RegisterResourceHookAsync(Pulumirpc.RegisterResourceHookRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Register a resource hook that can be called by the engine during certain
            steps of a resource's lifecycle.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.RegisterResourceHookAsync(Pulumirpc.RegisterResourceHookRequest,Grpc.Core.CallOptions)">
            <summary>
            Register a resource hook that can be called by the engine during certain
            steps of a resource's lifecycle.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.RegisterPackage(Pulumirpc.RegisterPackageRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Registers a package and allocates a packageRef. The same package can be registered multiple times in Pulumi.
            Multiple requests are idempotent and guaranteed to return the same result.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.RegisterPackage(Pulumirpc.RegisterPackageRequest,Grpc.Core.CallOptions)">
            <summary>
            Registers a package and allocates a packageRef. The same package can be registered multiple times in Pulumi.
            Multiple requests are idempotent and guaranteed to return the same result.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.RegisterPackageAsync(Pulumirpc.RegisterPackageRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Registers a package and allocates a packageRef. The same package can be registered multiple times in Pulumi.
            Multiple requests are idempotent and guaranteed to return the same result.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.RegisterPackageAsync(Pulumirpc.RegisterPackageRequest,Grpc.Core.CallOptions)">
            <summary>
            Registers a package and allocates a packageRef. The same package can be registered multiple times in Pulumi.
            Multiple requests are idempotent and guaranteed to return the same result.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.SignalAndWaitForShutdown(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            SignalAndWaitForShutdown lets the resource monitor know that no more
            events will be generated. This call blocks until the resource monitor is
            finished, which will happen once all the steps have executed. This allows
            the language runtime to stay running and handle callback requests, even
            after the user program has completed. Runtime SDKs should call this after
            executing the user's program. This can only be called once.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.SignalAndWaitForShutdown(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.CallOptions)">
            <summary>
            SignalAndWaitForShutdown lets the resource monitor know that no more
            events will be generated. This call blocks until the resource monitor is
            finished, which will happen once all the steps have executed. This allows
            the language runtime to stay running and handle callback requests, even
            after the user program has completed. Runtime SDKs should call this after
            executing the user's program. This can only be called once.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.SignalAndWaitForShutdownAsync(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            SignalAndWaitForShutdown lets the resource monitor know that no more
            events will be generated. This call blocks until the resource monitor is
            finished, which will happen once all the steps have executed. This allows
            the language runtime to stay running and handle callback requests, even
            after the user program has completed. Runtime SDKs should call this after
            executing the user's program. This can only be called once.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.SignalAndWaitForShutdownAsync(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.CallOptions)">
            <summary>
            SignalAndWaitForShutdown lets the resource monitor know that no more
            events will be generated. This call blocks until the resource monitor is
            finished, which will happen once all the steps have executed. This allows
            the language runtime to stay running and handle callback requests, even
            after the user program has completed. Runtime SDKs should call this after
            executing the user's program. This can only be called once.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.ResourceMonitorClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.BindService(Pulumirpc.ResourceMonitor.ResourceMonitorBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Pulumirpc.ResourceMonitor.BindService(Grpc.Core.ServiceBinderBase,Pulumirpc.ResourceMonitor.ResourceMonitorBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="T:Pulumirpc.ResourceStatusReflection">
            <summary>Holder for reflection information generated from pulumi/resource_status.proto</summary>
        </member>
        <member name="P:Pulumirpc.ResourceStatusReflection.Descriptor">
            <summary>File descriptor for pulumi/resource_status.proto</summary>
        </member>
        <member name="T:Pulumirpc.PublishViewStepsRequest">
            <summary>
            `PublishViewStepsRequest` is the type of requests sent as part of a
            [](pulumirpc.ResourceStatus.PublishViewSteps) call.
            </summary>
        </member>
        <member name="F:Pulumirpc.PublishViewStepsRequest.TokenFieldNumber">
            <summary>Field number for the "token" field.</summary>
        </member>
        <member name="P:Pulumirpc.PublishViewStepsRequest.Token">
            <summary>
            The service context token.
            </summary>
        </member>
        <member name="F:Pulumirpc.PublishViewStepsRequest.StepsFieldNumber">
            <summary>Field number for the "steps" field.</summary>
        </member>
        <member name="P:Pulumirpc.PublishViewStepsRequest.Steps">
            <summary>
            The steps to publish.
            </summary>
        </member>
        <member name="T:Pulumirpc.PublishViewStepsResponse">
            <summary>
            `PublishViewStepsResponse` is the type of responses sent as part of a
            [](pulumirpc.ResourceStatus.PublishViewSteps) call.
            </summary>
        </member>
        <member name="T:Pulumirpc.ViewStep">
            <summary>
            `ViewStep` represents a deployment operation step for a view resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="P:Pulumirpc.ViewStep.Status">
            <summary>
            The status of the operation.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.ErrorFieldNumber">
            <summary>Field number for the "error" field.</summary>
        </member>
        <member name="P:Pulumirpc.ViewStep.Error">
            <summary>
            An optional error message indicating the operation failed.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.OpFieldNumber">
            <summary>Field number for the "op" field.</summary>
        </member>
        <member name="P:Pulumirpc.ViewStep.Op">
            <summary>
            The operation being performed.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="P:Pulumirpc.ViewStep.Type">
            <summary>
            The type of the view resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.ViewStep.Name">
            <summary>
            The name of the view resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.OldFieldNumber">
            <summary>Field number for the "old" field.</summary>
        </member>
        <member name="P:Pulumirpc.ViewStep.Old">
            <summary>
            The state of the view resource before performing the step.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.NewFieldNumber">
            <summary>Field number for the "new" field.</summary>
        </member>
        <member name="P:Pulumirpc.ViewStep.New">
            <summary>
            The state of the view resource after performing the step.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.KeysFieldNumber">
            <summary>Field number for the "keys" field.</summary>
        </member>
        <member name="P:Pulumirpc.ViewStep.Keys">
            <summary>
            The keys causing a replacement (only applicable for "create" and "replace" ops).
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.DiffsFieldNumber">
            <summary>Field number for the "diffs" field.</summary>
        </member>
        <member name="P:Pulumirpc.ViewStep.Diffs">
            <summary>
            The keys that changed with this step.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.DetailedDiffFieldNumber">
            <summary>Field number for the "detailed_diff" field.</summary>
        </member>
        <member name="P:Pulumirpc.ViewStep.DetailedDiff">
            <summary>
            A detailed diff is a map from [property paths](property-paths) to [](pulumirpc.PropertyDiff)s,
            which describe the kind of change that occurred to the property located at that path.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.HasDetailedDiffFieldNumber">
            <summary>Field number for the "has_detailed_diff" field.</summary>
        </member>
        <member name="P:Pulumirpc.ViewStep.HasDetailedDiff">
            <summary>
            Whether the detailed diff is present.
            </summary>
        </member>
        <member name="T:Pulumirpc.ViewStep.Types">
            <summary>Container for nested types declared in the ViewStep message type.</summary>
        </member>
        <member name="T:Pulumirpc.ViewStep.Types.Op">
            <summary>
            Represents the kind of operation performed by a step.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.Types.Op.Unspecified">
            <summary>
            An unspecified operation.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.Types.Op.Same">
            <summary>
            Nothing to do.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.Types.Op.Create">
            <summary>
            Creating a new resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.Types.Op.Update">
            <summary>
            Updating an existing resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.Types.Op.Delete">
            <summary>
            Deleting an existing resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.Types.Op.Replace">
            <summary>
            Replacing a resource with a new one.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.Types.Op.CreateReplacement">
            <summary>
            Creating a new resource for a replacement.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.Types.Op.DeleteReplaced">
            <summary>
            Deleting an existing resource after replacement.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.Types.Op.Read">
            <summary>
            Reading an existing resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.Types.Op.ReadReplacement">
            <summary>
            Reading an existing resource for a replacement.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.Types.Op.Refresh">
            <summary>
            Refreshing an existing resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.Types.Op.ReadDiscard">
            <summary>
            Removing a resource that was read.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.Types.Op.DiscardReplaced">
            <summary>
            Discarding a read resource that was replaced.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.Types.Op.RemovePendingReplace">
            <summary>
            Removing a pending replace resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.Types.Op.Import">
            <summary>
            Import an existing resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStep.Types.Op.ImportReplacement">
            <summary>
            Replace an existing resource.
            </summary>
        </member>
        <member name="T:Pulumirpc.ViewStep.Types.Status">
            <summary>
            Status is returned when an error has occurred during a resource provider operation.
            It indicates whether the operation could be rolled back cleanly (OK). If not, it
            means the resource was left in an indeterminate state.
            </summary>
        </member>
        <member name="T:Pulumirpc.ViewStepState">
            <summary>
            `ViewStepState` represents the state of a view resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStepState.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="P:Pulumirpc.ViewStepState.Type">
            <summary>
            The type of the view resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStepState.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Pulumirpc.ViewStepState.Name">
            <summary>
            The name of the view resource.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStepState.ParentTypeFieldNumber">
            <summary>Field number for the "parent_type" field.</summary>
        </member>
        <member name="P:Pulumirpc.ViewStepState.ParentType">
            <summary>
            An optional type of the parent view resource. By default, a view resource will
            be a child of the owning resource, but views can be nested within other views,
            as long as they're all under the same owner. Both parent_type and parent_name
            must be set together.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStepState.ParentNameFieldNumber">
            <summary>Field number for the "parent_name" field.</summary>
        </member>
        <member name="P:Pulumirpc.ViewStepState.ParentName">
            <summary>
            An optional name of the parent view resource. By default, a view resource will
            be a child of the owning resource, but views can be nested within other views,
            as long as they're all under the same owner. Both parent_type and parent_name
            must be set together.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStepState.InputsFieldNumber">
            <summary>Field number for the "inputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.ViewStepState.Inputs">
            <summary>
            The view resource's inputs.
            </summary>
        </member>
        <member name="F:Pulumirpc.ViewStepState.OutputsFieldNumber">
            <summary>Field number for the "outputs" field.</summary>
        </member>
        <member name="P:Pulumirpc.ViewStepState.Outputs">
            <summary>
            The view resource's outputs.
            </summary>
        </member>
        <member name="T:Pulumirpc.ResourceStatus">
            <summary>
            ResourceStatus is an interface that can be called from a resource provider to update status about a resource.
            </summary>
        </member>
        <member name="P:Pulumirpc.ResourceStatus.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Pulumirpc.ResourceStatus.ResourceStatusBase">
            <summary>Base class for server-side implementations of ResourceStatus</summary>
        </member>
        <member name="M:Pulumirpc.ResourceStatus.ResourceStatusBase.PublishViewSteps(Pulumirpc.PublishViewStepsRequest,Grpc.Core.ServerCallContext)">
            <summary>
            `PublishViewSteps` is used to publish a series of steps for a view resource.
            Views can be materialized via create and update steps, and more complex
            changes, such as replacements, can be modeled as a series of steps.
            The engine does not actually apply these steps, but rather flows them through
            the engine such that the view resources are written to state and the view
            resources are displayed in the UI.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="T:Pulumirpc.ResourceStatus.ResourceStatusClient">
            <summary>Client for ResourceStatus</summary>
        </member>
        <member name="M:Pulumirpc.ResourceStatus.ResourceStatusClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for ResourceStatus</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Pulumirpc.ResourceStatus.ResourceStatusClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for ResourceStatus that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Pulumirpc.ResourceStatus.ResourceStatusClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Pulumirpc.ResourceStatus.ResourceStatusClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Pulumirpc.ResourceStatus.ResourceStatusClient.PublishViewSteps(Pulumirpc.PublishViewStepsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `PublishViewSteps` is used to publish a series of steps for a view resource.
            Views can be materialized via create and update steps, and more complex
            changes, such as replacements, can be modeled as a series of steps.
            The engine does not actually apply these steps, but rather flows them through
            the engine such that the view resources are written to state and the view
            resources are displayed in the UI.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceStatus.ResourceStatusClient.PublishViewSteps(Pulumirpc.PublishViewStepsRequest,Grpc.Core.CallOptions)">
            <summary>
            `PublishViewSteps` is used to publish a series of steps for a view resource.
            Views can be materialized via create and update steps, and more complex
            changes, such as replacements, can be modeled as a series of steps.
            The engine does not actually apply these steps, but rather flows them through
            the engine such that the view resources are written to state and the view
            resources are displayed in the UI.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceStatus.ResourceStatusClient.PublishViewStepsAsync(Pulumirpc.PublishViewStepsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `PublishViewSteps` is used to publish a series of steps for a view resource.
            Views can be materialized via create and update steps, and more complex
            changes, such as replacements, can be modeled as a series of steps.
            The engine does not actually apply these steps, but rather flows them through
            the engine such that the view resources are written to state and the view
            resources are displayed in the UI.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceStatus.ResourceStatusClient.PublishViewStepsAsync(Pulumirpc.PublishViewStepsRequest,Grpc.Core.CallOptions)">
            <summary>
            `PublishViewSteps` is used to publish a series of steps for a view resource.
            Views can be materialized via create and update steps, and more complex
            changes, such as replacements, can be modeled as a series of steps.
            The engine does not actually apply these steps, but rather flows them through
            the engine such that the view resources are written to state and the view
            resources are displayed in the UI.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.ResourceStatus.ResourceStatusClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:Pulumirpc.ResourceStatus.BindService(Pulumirpc.ResourceStatus.ResourceStatusBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Pulumirpc.ResourceStatus.BindService(Grpc.Core.ServiceBinderBase,Pulumirpc.ResourceStatus.ResourceStatusBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="T:Pulumirpc.SourceReflection">
            <summary>Holder for reflection information generated from pulumi/source.proto</summary>
        </member>
        <member name="P:Pulumirpc.SourceReflection.Descriptor">
            <summary>File descriptor for pulumi/source.proto</summary>
        </member>
        <member name="T:Pulumirpc.SourcePosition">
            <summary>
            A SourcePosition represents a position in a source file.
            </summary>
        </member>
        <member name="F:Pulumirpc.SourcePosition.UriFieldNumber">
            <summary>Field number for the "uri" field.</summary>
        </member>
        <member name="P:Pulumirpc.SourcePosition.Uri">
            <summary>
            The URI of the file. Currently only the file scheme with an absolute path is supported.
            </summary>
        </member>
        <member name="F:Pulumirpc.SourcePosition.LineFieldNumber">
            <summary>Field number for the "line" field.</summary>
        </member>
        <member name="P:Pulumirpc.SourcePosition.Line">
            <summary>
            The line in the file
            </summary>
        </member>
        <member name="F:Pulumirpc.SourcePosition.ColumnFieldNumber">
            <summary>Field number for the "column" field.</summary>
        </member>
        <member name="P:Pulumirpc.SourcePosition.Column">
            <summary>
            The column in the line
            </summary>
        </member>
        <member name="T:Pulumirpc.StackFrame">
            <summary>
            A StackFrame represents a single stack frame.
            </summary>
        </member>
        <member name="F:Pulumirpc.StackFrame.PcFieldNumber">
            <summary>Field number for the "pc" field.</summary>
        </member>
        <member name="P:Pulumirpc.StackFrame.Pc">
            <summary>
            The position of the frame's program counter. Optional.
            </summary>
        </member>
        <member name="T:Pulumirpc.StackTrace">
            <summary>
            A StackTrace represents the frames on the stack at the point of an RPC call.
            </summary>
        </member>
        <member name="F:Pulumirpc.StackTrace.FramesFieldNumber">
            <summary>Field number for the "frames" field.</summary>
        </member>
        <member name="P:Pulumirpc.StackTrace.Frames">
            <summary>
            The frames on the stack.
            </summary>
        </member>
        <member name="T:Pulumirpc.Testing.LanguageReflection">
            <summary>Holder for reflection information generated from pulumi/testing/language.proto</summary>
        </member>
        <member name="P:Pulumirpc.Testing.LanguageReflection.Descriptor">
            <summary>File descriptor for pulumi/testing/language.proto</summary>
        </member>
        <member name="F:Pulumirpc.Testing.GetLanguageTestsResponse.TestsFieldNumber">
            <summary>Field number for the "tests" field.</summary>
        </member>
        <member name="F:Pulumirpc.Testing.PrepareLanguageTestsRequest.LanguagePluginNameFieldNumber">
            <summary>Field number for the "language_plugin_name" field.</summary>
        </member>
        <member name="F:Pulumirpc.Testing.PrepareLanguageTestsRequest.LanguagePluginTargetFieldNumber">
            <summary>Field number for the "language_plugin_target" field.</summary>
        </member>
        <member name="F:Pulumirpc.Testing.PrepareLanguageTestsRequest.SnapshotDirectoryFieldNumber">
            <summary>Field number for the "snapshot_directory" field.</summary>
        </member>
        <member name="F:Pulumirpc.Testing.PrepareLanguageTestsRequest.TemporaryDirectoryFieldNumber">
            <summary>Field number for the "temporary_directory" field.</summary>
        </member>
        <member name="F:Pulumirpc.Testing.PrepareLanguageTestsRequest.CoreSdkDirectoryFieldNumber">
            <summary>Field number for the "core_sdk_directory" field.</summary>
        </member>
        <member name="F:Pulumirpc.Testing.PrepareLanguageTestsRequest.CoreSdkVersionFieldNumber">
            <summary>Field number for the "core_sdk_version" field.</summary>
        </member>
        <member name="F:Pulumirpc.Testing.PrepareLanguageTestsRequest.SnapshotEditsFieldNumber">
            <summary>Field number for the "snapshot_edits" field.</summary>
        </member>
        <member name="F:Pulumirpc.Testing.PrepareLanguageTestsRequest.LanguageInfoFieldNumber">
            <summary>Field number for the "language_info" field.</summary>
        </member>
        <member name="P:Pulumirpc.Testing.PrepareLanguageTestsRequest.LanguageInfo">
            <summary>
            a JSON string that will be inserted into every schema loaded (for both GeneratePackage and GenerateProject) in
            the "Languages[language_plugin_name]" field. This can be used to test language specific options such as
            inputTypes in python.
            </summary>
        </member>
        <member name="F:Pulumirpc.Testing.PrepareLanguageTestsRequest.ProgramOverridesFieldNumber">
            <summary>Field number for the "program_overrides" field.</summary>
        </member>
        <member name="P:Pulumirpc.Testing.PrepareLanguageTestsRequest.ProgramOverrides">
            <summary>
            A map of test names to program overrides. This may be used to specify tests for which program generation should
            not be run (e.g. because it does not support the necessary features), but where the test can still execute and
            pass. This is useful in cases where e.g. a language's code SDK is relatively feature complete (and thus it's
            desirable to test that feature set) but where program code generation is not yet complete enough to support
            generating programs which exercise that functionality.
            </summary>
        </member>
        <member name="F:Pulumirpc.Testing.PrepareLanguageTestsRequest.PolicyPackDirectoryFieldNumber">
            <summary>Field number for the "policy_pack_directory" field.</summary>
        </member>
        <member name="P:Pulumirpc.Testing.PrepareLanguageTestsRequest.PolicyPackDirectory">
            <summary>
            A folder pointing to policy packs to use for the tests. This is used to test the language plugin's policy pack
            support. These must be manually written.
            </summary>
        </member>
        <member name="T:Pulumirpc.Testing.PrepareLanguageTestsRequest.Types">
            <summary>Container for nested types declared in the PrepareLanguageTestsRequest message type.</summary>
        </member>
        <member name="F:Pulumirpc.Testing.PrepareLanguageTestsRequest.Types.Replacement.PathFieldNumber">
            <summary>Field number for the "path" field.</summary>
        </member>
        <member name="F:Pulumirpc.Testing.PrepareLanguageTestsRequest.Types.Replacement.PatternFieldNumber">
            <summary>Field number for the "pattern" field.</summary>
        </member>
        <member name="F:Pulumirpc.Testing.PrepareLanguageTestsRequest.Types.Replacement.Replacement_FieldNumber">
            <summary>Field number for the "replacement" field.</summary>
        </member>
        <member name="T:Pulumirpc.Testing.PrepareLanguageTestsRequest.Types.ProgramOverride">
            <summary>
            ProgramOverrides represent overrides whereby a test may specify a set of hardcoded or pre-generated programs to
            be used, in place of running GenerateProject on source PCL. This is useful for testing SDK functionality when the
            requisite program code generation is not yet complete enough to support generating programs which exercise that
            functionality.
            </summary>
        </member>
        <member name="F:Pulumirpc.Testing.PrepareLanguageTestsRequest.Types.ProgramOverride.PathsFieldNumber">
            <summary>Field number for the "paths" field.</summary>
        </member>
        <member name="P:Pulumirpc.Testing.PrepareLanguageTestsRequest.Types.ProgramOverride.Paths">
            <summary>
            A list of paths to directories containing programs to use for the test. The length of this list should
            correspond to the number of `Runs` in the test, with each entry being used for the corresponding run (e.g.
            entry 0 for run 0, entry 1 for run 1, etc.).
            </summary>
        </member>
        <member name="F:Pulumirpc.Testing.PrepareLanguageTestsResponse.TokenFieldNumber">
            <summary>Field number for the "token" field.</summary>
        </member>
        <member name="F:Pulumirpc.Testing.RunLanguageTestRequest.TokenFieldNumber">
            <summary>Field number for the "token" field.</summary>
        </member>
        <member name="F:Pulumirpc.Testing.RunLanguageTestRequest.TestFieldNumber">
            <summary>Field number for the "test" field.</summary>
        </member>
        <member name="F:Pulumirpc.Testing.RunLanguageTestResponse.SuccessFieldNumber">
            <summary>Field number for the "success" field.</summary>
        </member>
        <member name="F:Pulumirpc.Testing.RunLanguageTestResponse.MessagesFieldNumber">
            <summary>Field number for the "messages" field.</summary>
        </member>
        <member name="F:Pulumirpc.Testing.RunLanguageTestResponse.StdoutFieldNumber">
            <summary>Field number for the "stdout" field.</summary>
        </member>
        <member name="F:Pulumirpc.Testing.RunLanguageTestResponse.StderrFieldNumber">
            <summary>Field number for the "stderr" field.</summary>
        </member>
        <member name="T:Pulumirpc.Testing.LanguageTest">
            <summary>
            LanguageTest is the interface to the pulumi language test framework. This is _highly_ experimental and
            currently subject to breaking changes without warning.
            </summary>
        </member>
        <member name="P:Pulumirpc.Testing.LanguageTest.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Pulumirpc.Testing.LanguageTest.LanguageTestBase">
            <summary>Base class for server-side implementations of LanguageTest</summary>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.LanguageTestBase.GetLanguageTests(Pulumirpc.Testing.GetLanguageTestsRequest,Grpc.Core.ServerCallContext)">
            <summary>
            GetLanguageTests returns a list of all the language tests.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.LanguageTestBase.PrepareLanguageTests(Pulumirpc.Testing.PrepareLanguageTestsRequest,Grpc.Core.ServerCallContext)">
            <summary>
            PrepareLanguageTests prepares the engine to run language tests. It sets up a stable artifacts folder
            (which should be .gitignore'd) and fills it with the core SDK artifact.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.LanguageTestBase.RunLanguageTest(Pulumirpc.Testing.RunLanguageTestRequest,Grpc.Core.ServerCallContext)">
            <summary>
            RunLanguageTest runs a single test of the language plugin.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="T:Pulumirpc.Testing.LanguageTest.LanguageTestClient">
            <summary>Client for LanguageTest</summary>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.LanguageTestClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for LanguageTest</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.LanguageTestClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for LanguageTest that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.LanguageTestClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.LanguageTestClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.LanguageTestClient.GetLanguageTests(Pulumirpc.Testing.GetLanguageTestsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            GetLanguageTests returns a list of all the language tests.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.LanguageTestClient.GetLanguageTests(Pulumirpc.Testing.GetLanguageTestsRequest,Grpc.Core.CallOptions)">
            <summary>
            GetLanguageTests returns a list of all the language tests.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.LanguageTestClient.GetLanguageTestsAsync(Pulumirpc.Testing.GetLanguageTestsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            GetLanguageTests returns a list of all the language tests.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.LanguageTestClient.GetLanguageTestsAsync(Pulumirpc.Testing.GetLanguageTestsRequest,Grpc.Core.CallOptions)">
            <summary>
            GetLanguageTests returns a list of all the language tests.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.LanguageTestClient.PrepareLanguageTests(Pulumirpc.Testing.PrepareLanguageTestsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            PrepareLanguageTests prepares the engine to run language tests. It sets up a stable artifacts folder
            (which should be .gitignore'd) and fills it with the core SDK artifact.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.LanguageTestClient.PrepareLanguageTests(Pulumirpc.Testing.PrepareLanguageTestsRequest,Grpc.Core.CallOptions)">
            <summary>
            PrepareLanguageTests prepares the engine to run language tests. It sets up a stable artifacts folder
            (which should be .gitignore'd) and fills it with the core SDK artifact.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.LanguageTestClient.PrepareLanguageTestsAsync(Pulumirpc.Testing.PrepareLanguageTestsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            PrepareLanguageTests prepares the engine to run language tests. It sets up a stable artifacts folder
            (which should be .gitignore'd) and fills it with the core SDK artifact.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.LanguageTestClient.PrepareLanguageTestsAsync(Pulumirpc.Testing.PrepareLanguageTestsRequest,Grpc.Core.CallOptions)">
            <summary>
            PrepareLanguageTests prepares the engine to run language tests. It sets up a stable artifacts folder
            (which should be .gitignore'd) and fills it with the core SDK artifact.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.LanguageTestClient.RunLanguageTest(Pulumirpc.Testing.RunLanguageTestRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            RunLanguageTest runs a single test of the language plugin.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.LanguageTestClient.RunLanguageTest(Pulumirpc.Testing.RunLanguageTestRequest,Grpc.Core.CallOptions)">
            <summary>
            RunLanguageTest runs a single test of the language plugin.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.LanguageTestClient.RunLanguageTestAsync(Pulumirpc.Testing.RunLanguageTestRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            RunLanguageTest runs a single test of the language plugin.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.LanguageTestClient.RunLanguageTestAsync(Pulumirpc.Testing.RunLanguageTestRequest,Grpc.Core.CallOptions)">
            <summary>
            RunLanguageTest runs a single test of the language plugin.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.LanguageTestClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.BindService(Pulumirpc.Testing.LanguageTest.LanguageTestBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Pulumirpc.Testing.LanguageTest.BindService(Grpc.Core.ServiceBinderBase,Pulumirpc.Testing.LanguageTest.LanguageTestBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="T:Codegen.LoaderReflection">
            <summary>Holder for reflection information generated from pulumi/codegen/loader.proto</summary>
        </member>
        <member name="P:Codegen.LoaderReflection.Descriptor">
            <summary>File descriptor for pulumi/codegen/loader.proto</summary>
        </member>
        <member name="T:Codegen.Parameterization">
            <summary>
            Parameterization specifies the name, version, and value for a parameterized package.
            </summary>
        </member>
        <member name="F:Codegen.Parameterization.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Codegen.Parameterization.Name">
            <summary>
            the parameterized package name.
            </summary>
        </member>
        <member name="F:Codegen.Parameterization.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Codegen.Parameterization.Version">
            <summary>
            the parameterized package version.
            </summary>
        </member>
        <member name="F:Codegen.Parameterization.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="P:Codegen.Parameterization.Value">
            <summary>
            the parameter value for the parameterized package.
            </summary>
        </member>
        <member name="T:Codegen.GetSchemaRequest">
            <summary>
            GetSchemaRequest allows the engine to return a schema for a given package and version.
            </summary>
        </member>
        <member name="F:Codegen.GetSchemaRequest.PackageFieldNumber">
            <summary>Field number for the "package" field.</summary>
        </member>
        <member name="P:Codegen.GetSchemaRequest.Package">
            <summary>
            the package name for the schema being requested.
            </summary>
        </member>
        <member name="F:Codegen.GetSchemaRequest.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Codegen.GetSchemaRequest.Version">
            <summary>
            the version for the schema being requested, must be a valid semver or empty.
            </summary>
        </member>
        <member name="F:Codegen.GetSchemaRequest.DownloadUrlFieldNumber">
            <summary>Field number for the "download_url" field.</summary>
        </member>
        <member name="P:Codegen.GetSchemaRequest.DownloadUrl">
            <summary>
            the optional download url for the schema being requested.
            </summary>
        </member>
        <member name="F:Codegen.GetSchemaRequest.ParameterizationFieldNumber">
            <summary>Field number for the "parameterization" field.</summary>
        </member>
        <member name="P:Codegen.GetSchemaRequest.Parameterization">
            <summary>
            the parameterization for the schema being requested, can be empty.
            </summary>
        </member>
        <member name="T:Codegen.GetSchemaResponse">
            <summary>
            GetSchemaResponse returns the schema data for the requested package.
            </summary>
        </member>
        <member name="F:Codegen.GetSchemaResponse.SchemaFieldNumber">
            <summary>Field number for the "schema" field.</summary>
        </member>
        <member name="P:Codegen.GetSchemaResponse.Schema">
            <summary>
            the JSON encoded schema.
            </summary>
        </member>
        <member name="T:Codegen.Loader">
            <summary>
            Loader is a service for getting schemas from the Pulumi engine for use in code generators and other tools.
            This is currently unstable and experimental.
            </summary>
        </member>
        <member name="P:Codegen.Loader.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Codegen.Loader.LoaderBase">
            <summary>Base class for server-side implementations of Loader</summary>
        </member>
        <member name="M:Codegen.Loader.LoaderBase.GetSchema(Codegen.GetSchemaRequest,Grpc.Core.ServerCallContext)">
            <summary>
            GetSchema tries to find a schema for the given package and version.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="T:Codegen.Loader.LoaderClient">
            <summary>Client for Loader</summary>
        </member>
        <member name="M:Codegen.Loader.LoaderClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for Loader</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Codegen.Loader.LoaderClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for Loader that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Codegen.Loader.LoaderClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Codegen.Loader.LoaderClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Codegen.Loader.LoaderClient.GetSchema(Codegen.GetSchemaRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            GetSchema tries to find a schema for the given package and version.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Codegen.Loader.LoaderClient.GetSchema(Codegen.GetSchemaRequest,Grpc.Core.CallOptions)">
            <summary>
            GetSchema tries to find a schema for the given package and version.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Codegen.Loader.LoaderClient.GetSchemaAsync(Codegen.GetSchemaRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            GetSchema tries to find a schema for the given package and version.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Codegen.Loader.LoaderClient.GetSchemaAsync(Codegen.GetSchemaRequest,Grpc.Core.CallOptions)">
            <summary>
            GetSchema tries to find a schema for the given package and version.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Codegen.Loader.LoaderClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:Codegen.Loader.BindService(Codegen.Loader.LoaderBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Codegen.Loader.BindService(Grpc.Core.ServiceBinderBase,Codegen.Loader.LoaderBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="T:Codegen.MapperReflection">
            <summary>Holder for reflection information generated from pulumi/codegen/mapper.proto</summary>
        </member>
        <member name="P:Codegen.MapperReflection.Descriptor">
            <summary>File descriptor for pulumi/codegen/mapper.proto</summary>
        </member>
        <member name="T:Codegen.GetMappingRequest">
            <summary>
            `GetMappingRequest` is the type of requests sent as part of a [](codegen.Mapper.GetMapping) call.
            </summary>
        </member>
        <member name="F:Codegen.GetMappingRequest.ProviderFieldNumber">
            <summary>Field number for the "provider" field.</summary>
        </member>
        <member name="P:Codegen.GetMappingRequest.Provider">
            <summary>
            The name of the source provider (e.g. the Terraform provider name if a Terraform program is being converted) for
            which a mapping into Pulumi should be returned.
            </summary>
        </member>
        <member name="F:Codegen.GetMappingRequest.PulumiProviderFieldNumber">
            <summary>Field number for the "pulumi_provider" field.</summary>
        </member>
        <member name="P:Codegen.GetMappingRequest.PulumiProvider">
            <summary>
            The name of the Pulumi plugin that is expected to provide the mapping. If left empty, will be defaulted to the
            source provider name.
            </summary>
        </member>
        <member name="F:Codegen.GetMappingRequest.ParameterizationHintFieldNumber">
            <summary>Field number for the "parameterization_hint" field.</summary>
        </member>
        <member name="P:Codegen.GetMappingRequest.ParameterizationHint">
            <summary>
            An optional parameterization that should be used on the named plugin before asking it for mappings.
            </summary>
        </member>
        <member name="T:Codegen.MapperParameterizationHint">
            <summary>
            `MapperPackageParameterizationHint` is the type of hints that may be passed to [](codegen.Mapper.GetMapping) when it
            is expected that a parameterized provider plugin is the most likely source of a mapping. E.g. in the case of a
            dynamically bridged Terraform provider, callers may wish to express that a mapping is most likely offered by the
            "terraform-provider" plugin, but only when it is parameterized with the appropriate Terraform provider information.
            </summary>
        </member>
        <member name="F:Codegen.MapperParameterizationHint.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Codegen.MapperParameterizationHint.Name">
            <summary>
            The package name expected once parameterization has been applied.
            </summary>
        </member>
        <member name="F:Codegen.MapperParameterizationHint.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:Codegen.MapperParameterizationHint.Version">
            <summary>
            The package version expected once parameterization has been applied.
            </summary>
        </member>
        <member name="F:Codegen.MapperParameterizationHint.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="P:Codegen.MapperParameterizationHint.Value">
            <summary>
            The parameter value to send to the provider plugin as part of parameterization.
            </summary>
        </member>
        <member name="T:Codegen.GetMappingResponse">
            <summary>
            `GetMappingResponse` is the type of responses sent by [](codegen.Mapper.GetMapping) calls.
            </summary>
        </member>
        <member name="F:Codegen.GetMappingResponse.DataFieldNumber">
            <summary>Field number for the "data" field.</summary>
        </member>
        <member name="P:Codegen.GetMappingResponse.Data">
            <summary>
            Conversion-plugin-specific mapping data. For a Terraform conversion, for instance, this is expected to be a piece
            of data that maps Terraform names (e.g. resource types) to Pulumi names (e.g. Pulumi resource types). In many
            cases this byte array will be a string of encoded JSON, but no specific format is required.
            </summary>
        </member>
        <member name="T:Codegen.Mapper">
            <summary>
            Mapper provides methods for retrieving mappings that describe how to map names in some source "provider" (e.g. a
            Terraform provider, if we are converting from Terraform) to names in appropriate Pulumi packages. So when converting
            a Terraform program containing code like `resource "aws_s3_bucket" "b" {}`, for instance, we need to know (among
            other things) that the `aws_s3_bucket` Terraform resource type corresponds to the Pulumi type `aws:s3/bucket:Bucket`,
            and thus lives in the `aws` package. This is the kind of information that a Mapper provides.
            </summary>
        </member>
        <member name="P:Codegen.Mapper.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Codegen.Mapper.MapperBase">
            <summary>Base class for server-side implementations of Mapper</summary>
        </member>
        <member name="M:Codegen.Mapper.MapperBase.GetMapping(Codegen.GetMappingRequest,Grpc.Core.ServerCallContext)">
            <summary>
            `GetMapping` returns any available mapping data for the given source provider name (so again, this is e.g. the
            name of a Terraform provider if converting from Terraform). Callers may pass "hints" that describe a Pulumi
            package that is expected to provide the mapping and satisfy the request, which implementations may use to
            optimise their efforts to return the best possible mapping. If no matching mapping exists, implementations should
            return an empty byte array result.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="T:Codegen.Mapper.MapperClient">
            <summary>Client for Mapper</summary>
        </member>
        <member name="M:Codegen.Mapper.MapperClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for Mapper</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Codegen.Mapper.MapperClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for Mapper that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Codegen.Mapper.MapperClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Codegen.Mapper.MapperClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Codegen.Mapper.MapperClient.GetMapping(Codegen.GetMappingRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `GetMapping` returns any available mapping data for the given source provider name (so again, this is e.g. the
            name of a Terraform provider if converting from Terraform). Callers may pass "hints" that describe a Pulumi
            package that is expected to provide the mapping and satisfy the request, which implementations may use to
            optimise their efforts to return the best possible mapping. If no matching mapping exists, implementations should
            return an empty byte array result.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Codegen.Mapper.MapperClient.GetMapping(Codegen.GetMappingRequest,Grpc.Core.CallOptions)">
            <summary>
            `GetMapping` returns any available mapping data for the given source provider name (so again, this is e.g. the
            name of a Terraform provider if converting from Terraform). Callers may pass "hints" that describe a Pulumi
            package that is expected to provide the mapping and satisfy the request, which implementations may use to
            optimise their efforts to return the best possible mapping. If no matching mapping exists, implementations should
            return an empty byte array result.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Codegen.Mapper.MapperClient.GetMappingAsync(Codegen.GetMappingRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            `GetMapping` returns any available mapping data for the given source provider name (so again, this is e.g. the
            name of a Terraform provider if converting from Terraform). Callers may pass "hints" that describe a Pulumi
            package that is expected to provide the mapping and satisfy the request, which implementations may use to
            optimise their efforts to return the best possible mapping. If no matching mapping exists, implementations should
            return an empty byte array result.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Codegen.Mapper.MapperClient.GetMappingAsync(Codegen.GetMappingRequest,Grpc.Core.CallOptions)">
            <summary>
            `GetMapping` returns any available mapping data for the given source provider name (so again, this is e.g. the
            name of a Terraform provider if converting from Terraform). Callers may pass "hints" that describe a Pulumi
            package that is expected to provide the mapping and satisfy the request, which implementations may use to
            optimise their efforts to return the best possible mapping. If no matching mapping exists, implementations should
            return an empty byte array result.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Codegen.Mapper.MapperClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:Codegen.Mapper.BindService(Codegen.Mapper.MapperBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Codegen.Mapper.BindService(Grpc.Core.ServiceBinderBase,Codegen.Mapper.MapperBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
    </members>
</doc>
